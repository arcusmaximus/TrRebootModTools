//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: trcommon.bt
//   Authors: arc_
//   Purpose: Common structures and functions for parsing TR Reboot files
//------------------------------------------------

#ifndef TR_COMMON_BT
#define TR_COMMON_BT

typedef struct
{
    float x, y;
} Vector2 <read=Str("(%f, %f)", x, y)>;

typedef struct
{
    float x, y, z;
} Vector3 <read=Str("(%f, %f, %f)", x, y, z)>;

typedef struct
{
    float x, y, z, w;
} Vector4 <read=Str("(%f, %f, %f, %f)", x, y, z, w)>;

typedef struct
{
    float x, y, z, w;
} Quaternion <read=Str("(%f, %f, %f, %f)", w, x, y, z)>;

typedef struct
{
    Vector4 a, b, c, d;
} Matrix;

enum <byte> RefType
{
    REFTYPE_NONE,
    REFTYPE_INTERNAL,
    REFTYPE_WIDE_EXTERNAL,
    REFTYPE_PACKED_EXTERNAL
};

enum ResourceType
{
    RESOURCETYPE_NONE             = 0,
    RESOURCETYPE_ANIMATION        = 2,
    RESOURCETYPE_PSDRES           = 4,
    RESOURCETYPE_TEXTURE          = 5,
    RESOURCETYPE_SOUND            = 6,
    RESOURCETYPE_DTP              = 7,
    RESOURCETYPE_SCRIPT           = 8,
    RESOURCETYPE_SHADERLIB        = 9,
    RESOURCETYPE_MATERIAL         = 10,
    RESOURCETYPE_GLOBALCONTENTREF = 11,
    RESOURCETYPE_MODEL            = 12,
    RESOURCETYPE_COLLISIONMESH    = 13,
    RESOURCETYPE_OBJECTREF        = 14,
    RESOURCETYPE_ANIMLIB          = 15
};

typedef struct
{
    string value;
} String <optimize=false>;

local String gResourceTypeExtensions[16];
gResourceTypeExtensions[RESOURCETYPE_ANIMATION].value         = Str(".tr%danim",        TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_PSDRES].value            = Str(".tr%dpsdres",      TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_TEXTURE].value           = ".dds";
gResourceTypeExtensions[RESOURCETYPE_SOUND].value             = Str(".tr%dsound",       TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_DTP].value               = Str(".tr%ddtp",         TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_SCRIPT].value            = Str(".tr%dscript",      TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_SHADERLIB].value         = Str(".tr%dshaderlib",   TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_MATERIAL].value          = Str(".tr%dmaterial",    TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_GLOBALCONTENTREF].value  = Str(".tr%dcontentref",  TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_MODEL].value             = Str(".tr%dmodel(data)", TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_COLLISIONMESH].value     = Str(".tr%dcmesh",       TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_OBJECTREF].value         = Str(".tr%dobjectref",   TR_VERSION);
gResourceTypeExtensions[RESOURCETYPE_ANIMLIB].value           = Str(".tr%danimlib",     TR_VERSION);

local RefType gRefTypeByFilePos[FileSize() / 4 + 1];
local int gRefIndexByFilePos[FileSize() / 4 + 1];
local int gResourceBodyPos;

typedef struct
{
    int refOffset <format=hex>;
    int targetOffset <format=hex>;
} InternalRefDefinition <read=Str("%X -> %X", refOffset, targetOffset)>;

typedef struct
{
    if (TR_VERSION == 9)
    {
        uquad unused : 16;
        uquad refOffset : 23 <format=hex>;
        uquad resourceOffset : 25 <format=hex>;
    }
    else
    {
        int refOffset <format=hex>;
        ResourceType resourceType;
        int resourceId;
        int resourceOffset <format=hex>;
    }
} WideExternalRefDefinition <optimize=true>;

BitfieldDisablePadding();

typedef struct
{
    int refOffset : 25 <format=hex>;
    ResourceType resourceType : 7;
} PackedExternalRefDefinition;

BitfieldEnablePadding();

typedef struct
{
    local RefType type = gRefTypeByFilePos[FTell() / 4];
    local int index = gRefIndexByFilePos[FTell() / 4];
    if (TR_VERSION == 9)
        uint pointer <read="">;
    else
        quad pointer <read="">;
    
    if (type == REFTYPE_INTERNAL)
    {
        local int prevPos = FTell();
        FSeek(gResourceBodyPos + refDefinitions.internalRefs[index].targetOffset);
        if (FTell() < FileSize())
            byte target <read="">;
        
        FSeek(prevPos);
    }
} Ref <optimize=false, style=sMarker, read=ReadRef, write=WriteRef>;

string ReadRef(Ref& ref)
{
    if (ref.type == REFTYPE_INTERNAL)
    {
        return "";
    }
    
    if (ref.type == REFTYPE_WIDE_EXTERNAL)
    {
        ResourceType resourceType = ref.pointer >> 24;
        int resourceId = ref.pointer & 0x00FFFFFF;
        string extension = resourceType < 16 ? gResourceTypeExtensions[resourceType].value : Str(".tr%d", resourceType);
        return Str("%d%s at offset %Xh", resourceId, extension, refDefinitions.wideExternalRefs[ref.index].resourceOffset);
    }
    
    if (ref.type == REFTYPE_PACKED_EXTERNAL)
    {
        ResourceType resourceType = refDefinitions.packedExternalRefs[ref.index].resourceType;
        int resourceId = ref.pointer & 0x7FFFFFFF;
        return Str("%d%s", resourceId, gResourceTypeExtensions[resourceType].value);
    }
    
    return "null";
}

void WriteRef(Ref& ref, string value)
{
    if (ref.type == REFTYPE_PACKED_EXTERNAL)
    {
        local int resourceId;
        if (SScanf(value, "%d", resourceId) == 1)
            ref.pointer = resourceId;
    }
}

typedef struct
{
    int numInternalRefs;
    int numWideExternalRefs;
    int numIntPatches;
    int numShortPatches;
    int numPackedExternalRefs;
    
    InternalRefDefinition internalRefs[numInternalRefs];
    WideExternalRefDefinition wideExternalRefs[numWideExternalRefs];
    int intPatches[numIntPatches];
    quad shortPatches[numShortPatches];
    PackedExternalRefDefinition packedExternalRefs[numPackedExternalRefs];
    
    gResourceBodyPos = FTell();
    
    local int i, refPos;
    
    for (i = 0; i < refDefinitions.numInternalRefs; i++)
    {
        refPos = gResourceBodyPos + internalRefs[i].refOffset;
        gRefTypeByFilePos[refPos / 4] = REFTYPE_INTERNAL;
        gRefIndexByFilePos[refPos / 4] = i;
        #ifdef TR_REVEAL_REFS
            FSeek(refPos);
            Ref internalRef;
        #endif
    }
    
    for (i = 0; i < refDefinitions.numWideExternalRefs; i++)
    {
        refPos = gResourceBodyPos + wideExternalRefs[i].refOffset * 4;
        gRefTypeByFilePos[refPos / 4] = REFTYPE_WIDE_EXTERNAL;
        gRefIndexByFilePos[refPos / 4] = i;
        #ifdef TR_REVEAL_REFS
            FSeek(refPos);
            Ref externalRef;
        #endif
    }
    
    for (i = 0; i < refDefinitions.numPackedExternalRefs; i++)
    {
        refPos = gResourceBodyPos + packedExternalRefs[i].refOffset * 4;
        gRefTypeByFilePos[refPos / 4] = REFTYPE_PACKED_EXTERNAL;
        gRefIndexByFilePos[refPos / 4] = i;
        #ifdef TR_REVEAL_REFS
            FSeek(refPos);
            Ref externalRef;
        #endif
    }
    
    FSeek(gResourceBodyPos);
} RefDefinitions <style=sHeading1>;

local int gFilePosStack[10];
local int gFilePosStackIdx = 0;

void FAlign(int alignment)
{
    FSeek((FTell() + alignment - 1) & ~(alignment - 1));
}

byte CanSeekTo(Ref& ref)
{
    return exists(ref.target);
}

void SeekToRef(Ref& ref)
{
    gFilePosStack[gFilePosStackIdx++] = FTell();
    FSeek(startof(ref.target));
}

void ReturnFromRef()
{
    FSeek(gFilePosStack[--gFilePosStackIdx]);
}

#endif
