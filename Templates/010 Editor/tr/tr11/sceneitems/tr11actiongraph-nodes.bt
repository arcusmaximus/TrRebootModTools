enum <int> ValueType
{
    ValueType_signal,
    ValueType_bool,
    ValueType_int,
    ValueType_float,
    ValueType_uint32,
    ValueType_color,
    ValueType_vector3,
    ValueType_instance,
    ValueType_marker,
    ValueType_position,
    ValueType_rotation,
    ValueType_objecttype,
    ValueType_objectid,
    ValueType_string,
    ValueType_any,
    ValueType_unit,
    ValueType_waypointset,
    ValueType_goapaction,
    ValueType_goapgoal,
    ValueType_placement,
    ValueType_size_t
};

typedef struct
{
    ValueType type;
    FSkip(4);
    switch (type)
    {    
        case ValueType_bool:
            byte value;
            FSkip(7);
            break;
        
        case ValueType_int:
            int value;
            FSkip(4);
            break;
        
        case ValueType_float:
            float value;
            FSkip(4);
            break;
        
        case ValueType_uint32:
        case ValueType_color:
        case ValueType_marker:
        case ValueType_objecttype:
        case ValueType_goapaction:
        case ValueType_goapgoal:
        case ValueType_any:
            uint value;
            FSkip(4);
            break;
        
        case ValueType_waypointset:
            ushort unit;
            ushort waypointSetID;
            FSkip(4);
            break;
            
        case ValueType_vector3:
        case ValueType_position:
            Ref valueRef;
            if (CanSeekTo(valueRef))
            {
                SeekToRef(valueRef);
                Vector3 value;
                ReturnFromRef();
            }
            break;
        
        case ValueType_instance:
        case ValueType_placement:
            uquad value <format=hex>;
            break;
        
        case ValueType_rotation:
            Ref valueRef;
            if (CanSeekTo(valueRef))
            {
                SeekToRef(valueRef);
                Quaternion value;
                ReturnFromRef();
            }
            break;
        
        case ValueType_objectid:
        case ValueType_unit:
            ushort value;
            FSkip(6);
            break;
        
        case ValueType_string:
            Ref valueRef;
            if (CanSeekTo(valueRef))
            {
                SeekToRef(valueRef);
                string value;
                ReturnFromRef();
            }
            break;
        
        default:
            uquad value;
            break;
    }
} ActionGraphDataUnion <optimize=false>;

string DataUnionToString(ActionGraphDataUnion& data)
{
    switch (data.type)
    {
        case ValueType_float:
            return Str("%f", data.value);
        case ValueType_waypointset:
            return Str("%d.%d", data.unit, data.waypointSetID);
        case ValueType_vector3:
        case ValueType_position:
            return Str("(%f, %f, %f)", data.value.x, data.value.y, data.value.z);
        case ValueType_rotation:
            return Str("(%f, %f, %f)", data.value.x, data.value.y, data.value.z, data.value.w);
        case ValueType_string:
            return data.value;
        default:
            return Str("%d", data.value);
    }
}

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    ActionGraphDataUnion data;
    byte outputOnInit;
    FSkip(7);
} ScriptableNodeInputSocketHidden <optimize=false, read=Str("%s = %s", name, DataUnionToString(data))>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    char type;
    FSkip(7);
} ScriptableNodeOutputSocket <optimize=false, read=name>;

typedef struct
{
    local int endPos = FileSize();
    if (graph.numOutputs > 0)
        endPos = startof(parentof(parentof(this)).outputsRef.target);
    
    int graphDtpId;
    FSkip(4);
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        while (FTell() <= endPos - 0x20 && gRefTypeByFilePos[FTell() / 4] == REFTYPE_INTERNAL)
        {
            ScriptableNodeInputSocketHidden inputList;
        }
        ReturnFromRef();
    }
} SubGraphNode <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(6);
    PlacementPath placementID;
} InstancePlacementIDNode <optimize=false>;

typedef union
{
    float doNotChange;
    float match;
    float resetToDefault;
    float setToAbsoluteValue;
    float setToRelativeValue;
} FXACamTransitionParams__CustomAngleUnion;

typedef struct
{
    FXACamTransitionParams__CustomAngleUnion customPanValue;
    FXACamTransitionParams__CustomAngleUnion customTiltValue;
    ushort easeType;
    ushort panSync;
    ushort tiltSync;
    byte matchEffects;
} FXACamTransitionParams <optimize=false>;

typedef struct
{
    float inTime;
    int inEaseType;
    float outTime;
    float outStartTime;
    FXACamTransitionParams outParamsCommon;
    byte outBlockBlendUntilAnyInput;
} FXATimelinePlay__CameraParams <optimize=false>;

typedef struct
{
    byte streamIntoNewUnit;
    FSkip(1);
    ushort currentUnit;
    PlacementPath currentUnitSignalToNewUnit;
} FXATimelinePlay__StreamIntoNewUnitParams <optimize=false>;

typedef struct
{
    PlacementPath timelinePlacement;
    Ref inputOptionsRef;
    if (CanSeekTo(inputOptionsRef))
    {
        SeekToRef(inputOptionsRef);
        byte inputOptions;
        ReturnFromRef();
    }
    unsigned int numDynamicInputs;
    unsigned int numDynamicOutputs;
    FXATimelinePlay__CameraParams camParams;
    FSkip(4);
    byte isCinematic;
    FSkip(3);
    float timeBeforeUIAppears;
    byte processTriggers;
    byte playerAllowCancel;
    FSkip(2);
    float delayBeforeCancellingAllowed;
    int skipFadeoutType;
    unsigned int loopCount;
    int goToTimeType;
    byte handleTimeManually;
    byte doNothingToInventory;
    byte teleportCharacters;
    byte areCharactersInInteractable;
    FSkip(4);
    PlacementPath useTimelinePlacementTime;
    PlacementPath markerPositionDefaultID;
    FXATimelinePlay__StreamIntoNewUnitParams streamIntoNewUnitParams;
} FXATimelinePlay <optimize=false>;

typedef struct
{
    byte enabled;
    byte enabledForDuplicas;
    FSkip(6);
    uquad triggerPlacement;
} Instance_Trigger__InputsType <optimize=false>;

typedef struct
{
    Instance_Trigger__InputsType inputs;
    ushort trackedObjectType;
    FSkip(6);
    PlacementPath triggerPlacement;
} Instance_Trigger <optimize=false>;

typedef struct
{
    unsigned int markerUniqueID;
} ActionGraphMarkerID <optimize=false>;

typedef struct
{
    unsigned int scriptIDFFF;
} ObjectTypeScriptIDOnly <optimize=false>;

typedef struct
{
    ushort unit;
    ushort waypointSetID;
} ActionGraphWaypointSetID <optimize=false>;

typedef struct
{
    unsigned int actionId;
} ActionGraphGoapActionID <optimize=false>;

typedef struct
{
    unsigned int goalId;
} ActionGraphGoapGoalID <optimize=false>;

typedef struct
{
    byte enabledForPlayer;
    byte enabledForInstances;
} MiscTriggerGroupNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    unsigned int triggerGroup;
    unsigned int trackedObjectType;
    MiscTriggerGroupNode__InputsType inputs;
} MiscTriggerGroupNode <optimize=false>;

typedef struct
{
    unsigned int objectiveId;
    unsigned int subObjectiveId;
} ScriptObjective <optimize=false>;

typedef struct
{
    PlacementPath attachPlacementDefault;
    int type;
    byte useOneInsteadOfZero;
    byte forceActivation;
    FSkip(2);
    ScriptObjective objective;
} GameObjectiveNode <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad overridePlacementID;
    uquad lookatPlacementID;
} GameTutorialStepNode__InputsType_Default <optimize=false>;

typedef struct
{
    unsigned int introUniqueID;
} ActionGraphIntroID <optimize=false>;

typedef struct
{
    ActionGraphIntroID playerID;
    ActionGraphIntroID overrideInstanceID;
    ActionGraphIntroID overrideInstanceIDTwo;
    ActionGraphIntroID lookatInstanceID;
    ActionGraphIntroID lookatInstanceIDTwo;
} GameTutorialStepNode__InputsType_MultiStep <optimize=false>;

typedef struct
{
} GameTutorialStepNode__InputsType_GetStatus <optimize=false>;

typedef union
{
    GameTutorialStepNode__InputsType_Default defaultMode;
    GameTutorialStepNode__InputsType_MultiStep multiStepMode;
    GameTutorialStepNode__InputsType_GetStatus getStatusMode;
} GameTutorialStepNode__InputsType;

typedef struct
{
    unsigned int objectiveId;
    unsigned int subObjectiveId;
} ChallengeTombScriptObjective <optimize=false>;

typedef struct
{
    int tutorialAttachType;
    float offsetPos[3];
    float additional43OffsetPos[3];
    float offsetRot[3];
    byte cameraZoom;
    FSkip(3);
    float cameraZoomTime;
    byte cameraZoomPrealignPlayer;
    FSkip(3);
    int lookatAttemptFrames;
    float lookatTruckOffset[3];
    byte disableInputActionTypes;
    byte disableInputActionTypesCamera;
    FSkip(2);
    int startuplockFrames;
    byte canStompExistingTutorial;
    byte debugForceShow;
} GameTutorialStepNode__Options_Default <optimize=false>;

typedef struct
{
    int tutorialAttachType;
    float offsetPos[3];
    float additional43OffsetPos[3];
    float offsetRot[3];
    byte cameraZoom;
    FSkip(3);
    float cameraZoomTime;
    byte cameraZoomPrealignPlayer;
    FSkip(3);
    int lookatAttemptFrames;
    float lookatTruckOffset[3];
    byte disableInputActionTypesCamera;
    FSkip(3);
    int startuplockFrames;
    byte canStompExistingTutorial;
    byte debugForceShow;
    FSkip(2);
    int tutorialAttachTypeS2;
    float offsetPosS2[3];
    float additional43OffsetPosS2[3];
    float offsetRotS2[3];
    byte cameraZoomS2;
    FSkip(3);
    float cameraZoomTimeS2;
    byte cameraZoomPrealignPlayerS2;
    FSkip(3);
    int lookatAttemptFramesS2;
    float lookatTruckOffsetS2[3];
    byte disableInputActionTypesCameraS2;
    FSkip(3);
    int startuplockFramesS2;
} GameTutorialStepNode__Options_MultiStep <optimize=false>;

typedef struct
{
} GameTutorialStepNode__Options_GetStatus <optimize=false>;

typedef union
{
    GameTutorialStepNode__Options_Default defaultMode;
    GameTutorialStepNode__Options_MultiStep multiStepMode;
    GameTutorialStepNode__Options_GetStatus getStatusMode;
} GameTutorialStepNode__OptionsType;

typedef struct
{
    PlacementPath playerIDDefault;
    PlacementPath overridePlacementDefaultID;
    PlacementPath overridePlacementDefaultIDTwo;
    PlacementPath lookatPlacementDefaultID;
    PlacementPath lookatPlacementDefaultIDTwo;
    int type;
    FSkip(4);
    GameTutorialStepNode__InputsType inputs;
    ScriptObjective objective;
    ChallengeTombScriptObjective challengeTombObjective;
    GameTutorialStepNode__OptionsType options;
    int widgetType;
    float scale[2];
} GameTutorialStepNode <optimize=false>;

typedef struct
{
    uquad dynamicSpawnerUnitId;
    PlacementPath dynamicSpawnerId;
    uquad numSpawnPoints;
    Ref spawnPointListRef;
    if (CanSeekTo(spawnPointListRef))
    {
        SeekToRef(spawnPointListRef);
        PlacementPath spawnPointList[numSpawnPoints];
        ReturnFromRef();
    }
} GeneratorStatusNode <optimize=false>;

typedef struct
{
    unsigned int script;
} ScriptableNode__AdditionalData <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} ScriptableNode__InputsType <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList;
        ReturnFromRef();
    }
} ScriptableNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} ScriptableNode__InputsCount <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} ScriptableNode__OutputsCount <optimize=false>;

typedef struct
{
    ScriptableNode__AdditionalData data;
    FSkip(4);
    ScriptableNode__InputsType inputs;
    ScriptableNode__OutputsType outputs;
    unsigned int inputCount;
    unsigned int outputCount;
    ScriptableNode__InputsCount inputCountWorkaround;
    FSkip(4);
    ScriptableNode__OutputsCount outputCountWorkaround;
} ScriptableNode <optimize=false>;

typedef struct
{
    unsigned int hash <format=hex>;
} EventEnum <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceNetSendEventNode__InputsType <optimize=false>;

typedef struct
{
    Ref messageNameRef;
    if (CanSeekTo(messageNameRef))
    {
        SeekToRef(messageNameRef);
        EventEnum messageName;
        ReturnFromRef();
    }
    PlacementPath placementDefault;
    InstanceNetSendEventNode__InputsType inputs;
} InstanceNetSendEventNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceNetSyncNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    InstanceNetSyncNode__InputsType inputs;
} InstanceNetSyncNode <optimize=false>;

typedef struct
{
    ubyte weatherType;
    byte outputOnInit;
} WeatherIntensityChangesNode <optimize=false>;

typedef struct
{
    ubyte weatherType;
    byte outputOnInit;
} WeatherEventsNode <optimize=false>;

typedef struct
{
    uquad playerID;
} WeatherInfoNode__InputsType <optimize=false>;

typedef struct
{
    WeatherInfoNode__InputsType inputs;
    byte enabledByDefault;
    byte outputOnInit;
    FSkip(2);
    float mediumRainThreshold;
    float heavyRainThreshold;
} WeatherInfoNode <optimize=false>;

typedef struct
{
    ubyte timeOfDayType;
    byte outputOnInit;
} TimeOfDayEventsNode <optimize=false>;

typedef struct
{
} TimeOfDayInfoNode__InputsType <optimize=false>;

typedef struct
{
    TimeOfDayInfoNode__InputsType inputs;
    byte enabledByDefault;
    byte outputOnInit;
} TimeOfDayInfoNode <optimize=false>;

typedef struct
{
    int referenceType;
    int crossLanguageDialogueID;
    int crossLanguageDialoguePackageID;
} DialogueDialogueNode <optimize=false>;

typedef struct
{
    float fSpecularPower;
    float fSoftParticle;
    float fFadeWidth;
    float fAlphaBias;
    float fFlowMapSpeed;
    float fFlowMapStrength;
} FXLib__emitterfx__MaterialData <optimize=false>;

typedef struct
{
    float fWarpAmount;
    float fScrollX;
    float fScrollY;
    float fUScrollRate;
    float fVScrollRate;
    float fUCount;
    float fVCount;
    float fCmPerV;
} FXLib__emitterfx__ScrollData <optimize=false>;

typedef struct
{
    int samplepoints[31];
} MyColorBar <optimize=false>;

typedef struct
{
    int samplepoints[31];
} MyColorBarNoAlpha <optimize=false>;

typedef struct
{
    float fColorScaleMin;
    float fColorScaleMax;
    float fAlphaScaleMin;
    float fAlphaScaleMax;
    float fColorDist;
    FSkip(4);
    Ref colorBarPLRef;
    if (CanSeekTo(colorBarPLRef))
    {
        SeekToRef(colorBarPLRef);
        MyColorBar colorBarPL;
        ReturnFromRef();
    }
    Ref colorBarELRef;
    if (CanSeekTo(colorBarELRef))
    {
        SeekToRef(colorBarELRef);
        MyColorBarNoAlpha colorBarEL;
        ReturnFromRef();
    }
    Ref colorBarDistRef;
    if (CanSeekTo(colorBarDistRef))
    {
        SeekToRef(colorBarDistRef);
        MyColorBar colorBarDist;
        ReturnFromRef();
    }
} FXLib__emitterfx__ColorData <optimize=false>;

typedef struct
{
    float fEdgeFadeTime;
    float vShapeMin[3];
    float vShapeMax[3];
    float fShapeLen;
    float fShotgun;
    float vCapsuleMax[2];
    float vConeMin[2];
    float vConeMax[2];
    float vShapePos[3];
    float vShapeRot[3];
    FSkip(4);
    Ref aCurveOffsetInitELRef;
    if (CanSeekTo(aCurveOffsetInitELRef))
    {
        SeekToRef(aCurveOffsetInitELRef);
        ubyte aCurveOffsetInitEL;
        ReturnFromRef();
    }
} FXLib__emitterfx__BirthControl <optimize=false>;

typedef struct
{
    float fVortexAmp;
    float fVortexFreq;
    float fVortex;
    FSkip(4);
    Ref aCurveVortexCoefRef;
    if (CanSeekTo(aCurveVortexCoefRef))
    {
        SeekToRef(aCurveVortexCoefRef);
        ubyte aCurveVortexCoef;
        ReturnFromRef();
    }
    Ref aCurveVortexAmpRef;
    if (CanSeekTo(aCurveVortexAmpRef))
    {
        SeekToRef(aCurveVortexAmpRef);
        ubyte aCurveVortexAmp;
        ReturnFromRef();
    }
    Ref aCurveVortexFreqRef;
    if (CanSeekTo(aCurveVortexFreqRef))
    {
        SeekToRef(aCurveVortexFreqRef);
        ubyte aCurveVortexFreq;
        ReturnFromRef();
    }
} FXLib__emitterfx__VortexData <optimize=false>;

typedef struct
{
    float fModelScale;
    float fModelScaleNonUniform[3];
    float fStretch;
    float fStretchRand;
    float fStretchSpeedMin;
    float fStretchSpeedMax;
    float fStretchRatioAtSpeedMin;
    float fStretchRatioAtSpeedMax;
    float fParticleSize;
    float fParticleSizeRand;
    Ref aCurveSizeELRef;
    if (CanSeekTo(aCurveSizeELRef))
    {
        SeekToRef(aCurveSizeELRef);
        ubyte aCurveSizeEL;
        ReturnFromRef();
    }
    Ref aCurveSizePLRef;
    if (CanSeekTo(aCurveSizePLRef))
    {
        SeekToRef(aCurveSizePLRef);
        ubyte aCurveSizePL;
        ReturnFromRef();
    }
    Ref aCurveSizeRandELRef;
    if (CanSeekTo(aCurveSizeRandELRef))
    {
        SeekToRef(aCurveSizeRandELRef);
        ubyte aCurveSizeRandEL;
        ReturnFromRef();
    }
    Ref aCurveSizeRandPLRef;
    if (CanSeekTo(aCurveSizeRandPLRef))
    {
        SeekToRef(aCurveSizeRandPLRef);
        ubyte aCurveSizeRandPL;
        ReturnFromRef();
    }
    Ref aCurveStretchPLRef;
    if (CanSeekTo(aCurveStretchPLRef))
    {
        SeekToRef(aCurveStretchPLRef);
        ubyte aCurveStretchPL;
        ReturnFromRef();
    }
} FXLib__emitterfx__DimensionData <optimize=false>;

typedef struct
{
    float fGravityScale;
    float fWindFactor;
    float fInheritScale;
    float fTurbulence;
    float fMaxSpeed;
    float fMaxRange;
    Ref aCurveTurbulenceRef;
    if (CanSeekTo(aCurveTurbulenceRef))
    {
        SeekToRef(aCurveTurbulenceRef);
        ubyte aCurveTurbulence;
        ReturnFromRef();
    }
    Ref aCurveVelInheritPLRef;
    if (CanSeekTo(aCurveVelInheritPLRef))
    {
        SeekToRef(aCurveVelInheritPLRef);
        ubyte aCurveVelInheritPL;
        ReturnFromRef();
    }
} FXLib__emitterfx__AdvancedData <optimize=false>;

typedef struct
{
    float fFlarePositionDistance;
    float fFlarePositionSpread;
    float fFlarePositionRandomSpread;
    float fFlarePositionRandomSeed;
    float fFlareSizeRandomSpread;
    float eFlareAxisLockAmount;
    float fFlareSizeRandomSeed;
    float fFlareRadius;
    float fFlarePositionOffsetX;
    float fFlarePositionOffsetY;
    float fFlarePositionOffsetZ;
    float fFlarePositionOffsetAngle;
} FXLib__emitterfx__LensFlareData <optimize=false>;

typedef struct
{
    float fFadeAngleStart;
    float fFadeAngleEnd;
    float fFadeSizeStart;
    float fFadeSizeEnd;
    float f3dLod;
    float fZPushPart;
    float fZPushGeom;
    float fSphereBumper;
    float fSphereCushion;
    float fActiveDist;
    Ref aCurveFadeRef;
    if (CanSeekTo(aCurveFadeRef))
    {
        SeekToRef(aCurveFadeRef);
        ubyte aCurveFade;
        ReturnFromRef();
    }
} FXLib__emitterfx__VisibilityData <optimize=false>;

typedef struct
{
    float vVelInit[3];
    float vVelRand[3];
    Ref aCurveVelInitELRef;
    if (CanSeekTo(aCurveVelInitELRef))
    {
        SeekToRef(aCurveVelInitELRef);
        ubyte aCurveVelInitEL;
        ReturnFromRef();
    }
    Ref aCurveVelPLRef;
    if (CanSeekTo(aCurveVelPLRef))
    {
        SeekToRef(aCurveVelPLRef);
        ubyte aCurveVelPL;
        ReturnFromRef();
    }
    Ref aCurveVelRandELRef;
    if (CanSeekTo(aCurveVelRandELRef))
    {
        SeekToRef(aCurveVelRandELRef);
        ubyte aCurveVelRandEL;
        ReturnFromRef();
    }
    Ref aCurveVelRandPLRef;
    if (CanSeekTo(aCurveVelRandPLRef))
    {
        SeekToRef(aCurveVelRandPLRef);
        ubyte aCurveVelRandPL;
        ReturnFromRef();
    }
} FXLib__emitterfx__VelocityData <optimize=false>;

typedef struct
{
    unsigned int eSurfaceType;
    unsigned int colFxa;
    ubyte eHeadingType : 2;
    byte _Bitfieldpadding2 : 6;
} FXLib__FXSurfaceCol <optimize=false>;

typedef struct
{
    float fShotgunRadiusMin;
    float fShotgunRadiusMax;
    int iRingParticleCount;
    float fIdividualRotation;
} FXLib__ShotgunRing <optimize=false>;

typedef struct
{
    float x;
    float y;
} FXPointCurve__Point <optimize=false>;

typedef struct
{
    unsigned int numPoints;
    FSkip(4);
    Ref pointsRef;
    if (CanSeekTo(pointsRef))
    {
        SeekToRef(pointsRef);
        FXPointCurve__Point points[numPoints];
        ReturnFromRef();
    }
} FXPointCurve <optimize=false>;

typedef struct
{
    unsigned int eSurfaceType;
    char iProbeTile;
    FSkip(3);
    float fProbeRadius;
    unsigned int probeFxa;
    ubyte eHeadingType : 2;
    byte _Bitfieldpadding4 : 6;
} FXLib__FXSurface <optimize=false>;

typedef struct
{
    unsigned int iProbeMarker;
    float fProbeLength;
    float fProbeTolerance;
    unsigned int probeSound;
    ubyte bProbeEnabled : 1;
    ubyte bProbeLocal : 1;
    ubyte bDieOnImpact : 1;
    ubyte bApplyDamage : 1;
    ubyte bProbeTerrain : 1;
    ubyte bProbeObjects : 1;
    ubyte bProbeWater : 1;
    ubyte bProbeSnow : 1;
    ubyte bProbePlayer : 1;
    ubyte bProbeEnemy : 1;
    ubyte bProbeFriendlyTeam : 1;
    ubyte bParentCollision : 1;
    ubyte bIgnoreProjectile : 1;
    ubyte bIgnoreProjectileThrower : 1;
    ubyte bProbePrev : 1;
    ubyte bDamageSpeed : 1;
    FSkip(2);
    float vLastBirth[3];
    ushort nSurfaces;
    FSkip(6);
    Ref aSurfaceRef;
    if (CanSeekTo(aSurfaceRef))
    {
        SeekToRef(aSurfaceRef);
        FXLib__FXSurface aSurface;
        ReturnFromRef();
    }
} FXLib__FXProbe <optimize=false>;

typedef struct
{
    ubyte key;
    FSkip(3);
    float value;
} FXLib__FXGameDataKeyValuePair <optimize=false>;

typedef struct
{
    Ref materialDataRef;
    if (CanSeekTo(materialDataRef))
    {
        SeekToRef(materialDataRef);
        FXLib__emitterfx__MaterialData materialData;
        ReturnFromRef();
    }
    Ref scrollDataRef;
    if (CanSeekTo(scrollDataRef))
    {
        SeekToRef(scrollDataRef);
        FXLib__emitterfx__ScrollData scrollData;
        ReturnFromRef();
    }
    Ref colorDataRef;
    if (CanSeekTo(colorDataRef))
    {
        SeekToRef(colorDataRef);
        FXLib__emitterfx__ColorData colorData;
        ReturnFromRef();
    }
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
    ubyte bEnabled;
    ubyte bEnabledMulti;
    ubyte bEnabledInCaptures;
    ubyte bDamageIndicator : 1;
    ubyte bDebugColor : 1;
    ubyte bDebugInfo : 1;
    ubyte bDebugShape : 1;
    ubyte bDebugSphere : 1;
    ubyte bDebugActivation : 1;
    ubyte bDebugSleep : 1;
    ubyte bDebugCollision : 1;
    ubyte bDebugAvgVel : 1;
    ubyte bDebugDrawKV : 1;
    ubyte bDebugDrawWS : 1;
    ubyte bDebugCenter : 1;
    ubyte bDebugOutline : 1;
    ubyte bDebugNormals : 1;
    ubyte bDebugMaterial : 1;
    ubyte bDebugAlphaBar : 1;
    ubyte bDebugVel : 1;
    ubyte bCallbackBirth : 1;
    ubyte bCallbackPost : 1;
    ubyte bStopProcIfNotVisible : 1;
    ubyte bAlwaysFitBoundingRadius : 1;
    ubyte bRendBuf : 1;
    ubyte bRendPostScr : 1;
    ubyte bRendBehindCamera : 1;
    ubyte bPrefab : 1;
    ubyte bPostBirth : 1;
    ubyte bAtRest : 1;
    ubyte bLockRot : 1;
    ubyte bDistributed : 1;
    ubyte bShapeLocal : 1;
    ubyte bGrounded : 1;
    ubyte bAssertCreate : 1;
    ubyte bAssertDestroy : 1;
    ubyte bAssertKill : 1;
    ubyte bAssertBaseFree : 1;
    ubyte bInfiniteLife : 1;
    ubyte bUseLRDistr : 1;
    ubyte bMoveRibbonTail : 1;
    ubyte bPostDeathConnect : 1;
    ubyte bKillVolume : 1;
    ubyte bCollideFirst : 1;
    ubyte bCollideAll : 1;
    ubyte bCollideTer : 1;
    ubyte bCollideObj : 1;
    ubyte bCollideWater : 1;
    ubyte bCollideSnow : 1;
    ubyte bCollidePlayer : 1;
    ubyte bCollideEnemy : 1;
    ubyte bCollideFriendly : 1;
    ubyte bCollideParent : 1;
    ubyte bCollideParent2 : 1;
    ubyte bEmitterLoop : 1;
    ubyte bLocalVel : 1;
    ubyte bRadialVelReverse : 1;
    ubyte bRadialVel : 1;
    ubyte bConicalVel : 1;
    ubyte bPropDist : 1;
    ubyte bFlockingBound : 1;
    ubyte bFrameStartRand : 1;
    ubyte bAnimOneShot : 1;
    ubyte bSE1Parent : 1;
    ubyte bSE2Parent : 1;
    ubyte bWindAsVel : 1;
    ubyte bDieAtRange : 1;
    ubyte bInheritInitOnly : 1;
    ubyte bFlareSourceOriented : 1;
    ubyte bFlareLockOcclusionToSource : 1;
    ubyte bFlareProbe : 1;
    ubyte bSimpleCollide : 1;
    ubyte bCallbackDamage : 1;
    ubyte bDoAlphaAngleUsingDirFromCam : 1;
    ubyte bDoAlphaAngleUsingLocalDirVsCamToEmitterDir : 1;
    byte wwiseBirthAutoStop : 1;
    ubyte bUseEmitterParams : 1;
    ubyte bEmitterParam0SetAtStart : 1;
    ubyte bEmitterParam0UseNamedValue : 1;
    ubyte bEmitterParam1SetAtStart : 1;
    ubyte bEmitterParam1UseNamedValue : 1;
    ubyte bEmitterParam2SetAtStart : 1;
    ubyte bEmitterParam2UseNamedValue : 1;
    ubyte bEmitterParam3SetAtStart : 1;
    ubyte bEmitterParam3UseNamedValue : 1;
    ubyte bUseParticleParams : 1;
    ubyte bParticleParam0SetAtSpawnTime : 1;
    ubyte bParticleParam0UseNamedValue : 1;
    ubyte bParticleParam1SetAtSpawnTime : 1;
    ubyte bParticleParam1UseNamedValue : 1;
    ubyte bRandomUCoordFlip : 1;
    ubyte bRandomVCoordFlip : 1;
    ubyte bDoStretchBySpeed : 1;
    ubyte bDoNotStretchOnFirstFrame : 1;
    byte bDrawGroupAnimation : 1;
    byte bDrawGroupAnimationLoop : 1;
    byte _Bitfieldpadding106 : 3;
    FSkip(1);
    ushort eParticleTargetarea;
    ubyte eDebugValue : 4;
    ubyte eBirthType : 4;
    ubyte eCollideReact : 3;
    ubyte eFacing : 4;
    byte _Bitfieldpadding114 : 1;
    ubyte eBirthShape : 3;
    ubyte eSortOrder : 2;
    ubyte eShapeEdgeX : 3;
    ubyte eShapeEdgeY : 3;
    ubyte eShapeEdgeZ : 3;
    ubyte eBirthMethod : 2;
    ubyte eDistType : 2;
    ubyte eOccluderShape : 2;
    ubyte eFlareAxisLockType : 2;
    ubyte eNormal : 1;
    byte _Bitfieldpadding122 : 1;
    FSkip(1);
    int eEmitterParam0NamedValueType;
    int eEmitterParam1NamedValueType;
    int eEmitterParam2NamedValueType;
    int eEmitterParam3NamedValueType;
    int eParticleParam0NamedValueType;
    int eParticleParam1NamedValueType;
    ushort overrideProjectileID;
    FSkip(2);
    float fParticleAnisotropy;
    float fScatteringAbsorption;
    float fParticleTexelCoverage;
    float fParticleSphericalNormalFactor;
    float fLifeEmitter;
    float fLifeEmitterRand;
    float fPresetEmitter;
    float fFadeTimeIn;
    float fFadeTimeOut;
    float fLifeParticle;
    float fLifeParticleRand;
    float fBirthDelay;
    float fBirthDelayRand;
    Ref birthControlRef;
    if (CanSeekTo(birthControlRef))
    {
        SeekToRef(birthControlRef);
        FXLib__emitterfx__BirthControl birthControl;
        ReturnFromRef();
    }
    float fDilationMin;
    FSkip(4);
    Ref vortexDataRef;
    if (CanSeekTo(vortexDataRef))
    {
        SeekToRef(vortexDataRef);
        FXLib__emitterfx__VortexData vortexData;
        ReturnFromRef();
    }
    Ref dimensionDataRef;
    if (CanSeekTo(dimensionDataRef))
    {
        SeekToRef(dimensionDataRef);
        FXLib__emitterfx__DimensionData dimensionData;
        ReturnFromRef();
    }
    float fBloomMult;
    float fBloomRange;
    Ref advancedDataRef;
    if (CanSeekTo(advancedDataRef))
    {
        SeekToRef(advancedDataRef);
        FXLib__emitterfx__AdvancedData advancedData;
        ReturnFromRef();
    }
    float fFlocking;
    float fBounce;
    float fNoLitScale;
    FSkip(4);
    Ref lensFlareDataRef;
    if (CanSeekTo(lensFlareDataRef))
    {
        SeekToRef(lensFlareDataRef);
        FXLib__emitterfx__LensFlareData lensFlareData;
        ReturnFromRef();
    }
    float fDisplacementX;
    float fDisplacementY;
    float fFrameRate;
    FSkip(4);
    Ref visibilityDataRef;
    if (CanSeekTo(visibilityDataRef))
    {
        SeekToRef(visibilityDataRef);
        FXLib__emitterfx__VisibilityData visibilityData;
        ReturnFromRef();
    }
    float fBloomInfluence;
    float fBloomThreshold;
    float fDecalFov;
    float fDecalNear;
    float fDecalFar;
    float fDistToCam;
    float fFlockingSpeed;
    float fFlockingAttract;
    float fShotgunScale;
    float fEmitterParam0BaseValue;
    float fEmitterParam1BaseValue;
    float fEmitterParam2BaseValue;
    float fEmitterParam3BaseValue;
    float fParticleParam0BaseValue;
    float fParticleParam0RandomValue;
    float fParticleParam1BaseValue;
    float fParticleParam1RandomValue;
    float fParticleCount;
    float fParticleCountRand;
    float wwiseBirthFadeSecondsOnStop;
    int iMaxCount;
    char iFrameX;
    char iFrameY;
    char iFrameStart;
    char iFrameEnd;
    char iMaxBounce;
    char iNthCount;
    FSkip(2);
    float fShotgunRange;
    Ref velocityDataRef;
    if (CanSeekTo(velocityDataRef))
    {
        SeekToRef(velocityDataRef);
        FXLib__emitterfx__VelocityData velocityData;
        ReturnFromRef();
    }
    float vRotInit[3];
    float vRotRand[3];
    float vRotVelInit[3];
    float vRotVelRand[3];
    float vAlphaAngleLocalDir[3];
    FSkip(4);
    Ref aCurveAlphaInRef;
    if (CanSeekTo(aCurveAlphaInRef))
    {
        SeekToRef(aCurveAlphaInRef);
        ubyte aCurveAlphaIn;
        ReturnFromRef();
    }
    Ref aCurveAlphaOutRef;
    if (CanSeekTo(aCurveAlphaOutRef))
    {
        SeekToRef(aCurveAlphaOutRef);
        ubyte aCurveAlphaOut;
        ReturnFromRef();
    }
    Ref aCurveRotInitELRef;
    if (CanSeekTo(aCurveRotInitELRef))
    {
        SeekToRef(aCurveRotInitELRef);
        ubyte aCurveRotInitEL;
        ReturnFromRef();
    }
    Ref aCurveRotRandELRef;
    if (CanSeekTo(aCurveRotRandELRef))
    {
        SeekToRef(aCurveRotRandELRef);
        ubyte aCurveRotRandEL;
        ReturnFromRef();
    }
    Ref aCurveRotVelInitELRef;
    if (CanSeekTo(aCurveRotVelInitELRef))
    {
        SeekToRef(aCurveRotVelInitELRef);
        ubyte aCurveRotVelInitEL;
        ReturnFromRef();
    }
    Ref aCurveRotVelRandELRef;
    if (CanSeekTo(aCurveRotVelRandELRef))
    {
        SeekToRef(aCurveRotVelRandELRef);
        ubyte aCurveRotVelRandEL;
        ReturnFromRef();
    }
    Ref aCurveFlareScreenAlphaRef;
    if (CanSeekTo(aCurveFlareScreenAlphaRef))
    {
        SeekToRef(aCurveFlareScreenAlphaRef);
        ubyte aCurveFlareScreenAlpha;
        ReturnFromRef();
    }
    Ref aCurveFlareAngleAlphaRef;
    if (CanSeekTo(aCurveFlareAngleAlphaRef))
    {
        SeekToRef(aCurveFlareAngleAlphaRef);
        ubyte aCurveFlareAngleAlpha;
        ReturnFromRef();
    }
    Ref aCurveFlareCamDistAlphaRef;
    if (CanSeekTo(aCurveFlareCamDistAlphaRef))
    {
        SeekToRef(aCurveFlareCamDistAlphaRef);
        ubyte aCurveFlareCamDistAlpha;
        ReturnFromRef();
    }
    Ref aCurveFlareEmitterAgeAlphaRef;
    if (CanSeekTo(aCurveFlareEmitterAgeAlphaRef))
    {
        SeekToRef(aCurveFlareEmitterAgeAlphaRef);
        ubyte aCurveFlareEmitterAgeAlpha;
        ReturnFromRef();
    }
    Ref aCurveFlareScreenSizeRef;
    if (CanSeekTo(aCurveFlareScreenSizeRef))
    {
        SeekToRef(aCurveFlareScreenSizeRef);
        ubyte aCurveFlareScreenSize;
        ReturnFromRef();
    }
    Ref aCurveFlareAngleSizeRef;
    if (CanSeekTo(aCurveFlareAngleSizeRef))
    {
        SeekToRef(aCurveFlareAngleSizeRef);
        ubyte aCurveFlareAngleSize;
        ReturnFromRef();
    }
    Ref aCurveFlareCamDistSizeRef;
    if (CanSeekTo(aCurveFlareCamDistSizeRef))
    {
        SeekToRef(aCurveFlareCamDistSizeRef);
        ubyte aCurveFlareCamDistSize;
        ReturnFromRef();
    }
    Ref aCurveFlareEmitterAgeSizeRef;
    if (CanSeekTo(aCurveFlareEmitterAgeSizeRef))
    {
        SeekToRef(aCurveFlareEmitterAgeSizeRef);
        ubyte aCurveFlareEmitterAgeSize;
        ReturnFromRef();
    }
    Ref aSESpeed1Ref;
    if (CanSeekTo(aSESpeed1Ref))
    {
        SeekToRef(aSESpeed1Ref);
        ubyte aSESpeed1;
        ReturnFromRef();
    }
    Ref aSESpeed2Ref;
    if (CanSeekTo(aSESpeed2Ref))
    {
        SeekToRef(aSESpeed2Ref);
        ubyte aSESpeed2;
        ReturnFromRef();
    }
    Ref aEmitterParam0BaseCurveELRef;
    if (CanSeekTo(aEmitterParam0BaseCurveELRef))
    {
        SeekToRef(aEmitterParam0BaseCurveELRef);
        ubyte aEmitterParam0BaseCurveEL;
        ReturnFromRef();
    }
    Ref aEmitterParam1BaseCurveELRef;
    if (CanSeekTo(aEmitterParam1BaseCurveELRef))
    {
        SeekToRef(aEmitterParam1BaseCurveELRef);
        ubyte aEmitterParam1BaseCurveEL;
        ReturnFromRef();
    }
    Ref aEmitterParam2BaseCurveELRef;
    if (CanSeekTo(aEmitterParam2BaseCurveELRef))
    {
        SeekToRef(aEmitterParam2BaseCurveELRef);
        ubyte aEmitterParam2BaseCurveEL;
        ReturnFromRef();
    }
    Ref aEmitterParam3BaseCurveELRef;
    if (CanSeekTo(aEmitterParam3BaseCurveELRef))
    {
        SeekToRef(aEmitterParam3BaseCurveELRef);
        ubyte aEmitterParam3BaseCurveEL;
        ReturnFromRef();
    }
    Ref aParticleParam0BaseCurvePLRef;
    if (CanSeekTo(aParticleParam0BaseCurvePLRef))
    {
        SeekToRef(aParticleParam0BaseCurvePLRef);
        ubyte aParticleParam0BaseCurvePL;
        ReturnFromRef();
    }
    Ref aParticleParam0BaseCurveELRef;
    if (CanSeekTo(aParticleParam0BaseCurveELRef))
    {
        SeekToRef(aParticleParam0BaseCurveELRef);
        ubyte aParticleParam0BaseCurveEL;
        ReturnFromRef();
    }
    Ref aParticleParam0RandomCurvePLRef;
    if (CanSeekTo(aParticleParam0RandomCurvePLRef))
    {
        SeekToRef(aParticleParam0RandomCurvePLRef);
        ubyte aParticleParam0RandomCurvePL;
        ReturnFromRef();
    }
    Ref aParticleParam0RandomCurveELRef;
    if (CanSeekTo(aParticleParam0RandomCurveELRef))
    {
        SeekToRef(aParticleParam0RandomCurveELRef);
        ubyte aParticleParam0RandomCurveEL;
        ReturnFromRef();
    }
    Ref aParticleParam1BaseCurvePLRef;
    if (CanSeekTo(aParticleParam1BaseCurvePLRef))
    {
        SeekToRef(aParticleParam1BaseCurvePLRef);
        ubyte aParticleParam1BaseCurvePL;
        ReturnFromRef();
    }
    Ref aParticleParam1BaseCurveELRef;
    if (CanSeekTo(aParticleParam1BaseCurveELRef))
    {
        SeekToRef(aParticleParam1BaseCurveELRef);
        ubyte aParticleParam1BaseCurveEL;
        ReturnFromRef();
    }
    Ref aParticleParam1RandomCurvePLRef;
    if (CanSeekTo(aParticleParam1RandomCurvePLRef))
    {
        SeekToRef(aParticleParam1RandomCurvePLRef);
        ubyte aParticleParam1RandomCurvePL;
        ReturnFromRef();
    }
    Ref aParticleParam1RandomCurveELRef;
    if (CanSeekTo(aParticleParam1RandomCurveELRef))
    {
        SeekToRef(aParticleParam1RandomCurveELRef);
        ubyte aParticleParam1RandomCurveEL;
        ReturnFromRef();
    }
    EventEnum eMessageName;
    unsigned int wwiseCollidePlayId;
    unsigned int wwiseBirthPlayId;
    unsigned int wwiseParticlePlayId;
    Ref materialRef;
    Ref sIMaterialRef;
    ushort survivalInstinctMaterialTrait;
    FSkip(6);
    Ref revealTextureRef;
    Ref renderMeshRef;
    Ref renderMesh1Ref;
    Ref renderMesh2Ref;
    Ref renderMesh3Ref;
    float drawGroupAnimationRate;
    unsigned int sE1Fxa;
    unsigned int sE2Fxa;
    unsigned int nPassThruSurfaces;
    Ref passThruSurfacesRef;
    if (CanSeekTo(passThruSurfacesRef))
    {
        SeekToRef(passThruSurfacesRef);
        unsigned int passThruSurfaces;
        ReturnFromRef();
    }
    ushort nCollideSurfaces;
    FSkip(6);
    Ref aCollideSurfaceRef;
    if (CanSeekTo(aCollideSurfaceRef))
    {
        SeekToRef(aCollideSurfaceRef);
        FXLib__FXSurfaceCol aCollideSurface;
        ReturnFromRef();
    }
    unsigned int nShotgunRings;
    FSkip(4);
    Ref shotgunRingsRef;
    if (CanSeekTo(shotgunRingsRef))
    {
        SeekToRef(shotgunRingsRef);
        FXLib__ShotgunRing shotgunRings;
        ReturnFromRef();
    }
    char sEmitterParam0NamedValueName[32];
    char sEmitterParam1NamedValueName[32];
    char sEmitterParam2NamedValueName[32];
    char sEmitterParam3NamedValueName[32];
    char sParticleParam0NamedValueName[32];
    char sParticleParam1NamedValueName[32];
    FXPointCurve aCurveFlare;
    FXPointCurve aCurveSE1;
    FXPointCurve aCurveSE2;
    ushort nProbes;
    FSkip(6);
    Ref probeRef;
    if (CanSeekTo(probeRef))
    {
        SeekToRef(probeRef);
        FXLib__FXProbe probe;
        ReturnFromRef();
    }
    ubyte nGameData;
    FSkip(7);
    Ref aGameDataRef;
    if (CanSeekTo(aGameDataRef))
    {
        SeekToRef(aGameDataRef);
        FXLib__FXGameDataKeyValuePair aGameData;
        ReturnFromRef();
    }
} FXLib__emitterfx <optimize=false>;

typedef union
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReference__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReference__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReference <optimize=false>;

typedef struct
{
    char type;
    FSkip(1);
    short length;
    char priority;
    ModelBoneOrMarkerReference startSegment;
    ModelBoneOrMarkerReference endSegment;
    ubyte maxColorR;
    ubyte maxColorG;
    ubyte maxColorB;
    ubyte startoninit : 1;
    byte _Bitfieldpadding6 : 7;
    FSkip(1);
    ushort maxradius;
    short lifeTime;
    short fadeinTime;
    short fadeoutTime;
    char groupId;
} FXLib__DynamicLightData <optimize=false>;

typedef struct
{
    ubyte bWeatherObject : 1;
    byte _Bitfieldpadding1 : 7;
    FSkip(3);
    unsigned int fxLibDTPID;
    ushort emitterFXCount;
    FSkip(6);
    Ref emitterFXListRef;
    if (CanSeekTo(emitterFXListRef))
    {
        SeekToRef(emitterFXListRef);
        FXLib__emitterfx emitterFXList[emitterFXCount];
        ReturnFromRef();
    }
    ushort dynamicLightCount;
    FSkip(6);
    Ref dynamicLightListRef;
    if (CanSeekTo(dynamicLightListRef))
    {
        SeekToRef(dynamicLightListRef);
        FXLib__DynamicLightData dynamicLightList[dynamicLightCount];
        ReturnFromRef();
    }
} FXLib <optimize=false>;

typedef struct
{
    ushort type : 3;
    ushort disable : 1;
    ushort oneshot : 1;
    ushort padding : 3;
    ushort triggercondition : 2;
    short _Bitfieldpadding0 : 6;
    short frame;
    ubyte iFxEvent;
} FxHeader <optimize=false>;

typedef struct
{
    ushort fxtype;
    short group;
    ushort override;
    ushort modifier3;
} endallfx <optimize=false>;

typedef struct
{
    FxHeader header;
    FSkip(1);
    Ref payloadRef;
    if (CanSeekTo(payloadRef))
    {
        SeekToRef(payloadRef);
        endallfx payload;
        ReturnFromRef();
    }
} fx_endallfx <optimize=false>;

typedef struct
{
    fx_endallfx fxEndallfxList[1];
    byte gap0[8];
} fx__triggers <optimize=false>;

typedef struct
{
    int iFlags;
    float vRotation[3];
    float vPosition[3];
    float fFOV;
    float fFocalDistance;
    float fFStop;
    float fFocalLength;
    float fFogDistance;
} fx__FXCameraKeys <optimize=false>;

typedef struct
{
    unsigned int nChannel;
    unsigned int fxCameraKeyCount;
    Ref fxCameraKeysRef;
    if (CanSeekTo(fxCameraKeysRef))
    {
        SeekToRef(fxCameraKeysRef);
        fx__FXCameraKeys fxCameraKeys[fxCameraKeyCount];
        ReturnFromRef();
    }
} fx__FXCamera <optimize=false>;

typedef struct
{
    Ref fxLibRef;
    if (CanSeekTo(fxLibRef))
    {
        SeekToRef(fxLibRef);
        FXLib fxLib;
        ReturnFromRef();
    }
    Ref fxListRef;
    if (CanSeekTo(fxListRef))
    {
        SeekToRef(fxListRef);
        fx__triggers fxList;
        ReturnFromRef();
    }
    ushort proxyAnimationObject;
    FSkip(2);
    unsigned int fxCameraCount;
    Ref fxCamerasRef;
    if (CanSeekTo(fxCamerasRef))
    {
        SeekToRef(fxCamerasRef);
        fx__FXCamera fxCameras[fxCameraCount];
        ReturnFromRef();
    }
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} fx <optimize=false>;

typedef struct
{
} LevelObjectiveNode__Inputs <optimize=false>;

typedef struct
{
    PlacementPath levelObjectivePath;
    FSkip(-32);
    LevelObjectiveNode__Inputs inputs;
} LevelObjectiveNode <optimize=false>;

typedef struct
{
    Ref debugMenuStringRef;
    if (CanSeekTo(debugMenuStringRef))
    {
        SeekToRef(debugMenuStringRef);
        string debugMenuString;
        ReturnFromRef();
    }
    int debugMenuTriggerType;
    byte startEnabled;
    byte exitDebugMenuOnTrigger;
} DebugMenuTriggerNode <optimize=false>;

typedef struct
{
} AGQuerySecurityLevelNode__InputsType <optimize=false>;

typedef struct
{
    int nodeType;
    ushort worldStateVarIndex;
    ubyte maxSecurityLevel;
    FSkip(-7);
    AGQuerySecurityLevelNode__InputsType inputs;
} AGQuerySecurityLevelNode <optimize=false>;

typedef struct
{
    byte drawOnce;
    byte startDraw;
    byte stopDraw;
    FSkip(1);
    float pos[3];
    float offset[3];
    FSkip(4);
    Ref textRef;
    if (CanSeekTo(textRef))
    {
        SeekToRef(textRef);
        string text;
        ReturnFromRef();
    }
    float screenYOffset;
} DebugDrawText__InputsType <optimize=false>;

typedef struct
{
    DebugDrawText__InputsType inputs;
} DebugDrawText <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
    uquad instanceID;
} InstanceSpawnedPlacementNode__InputsType <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList;
        ReturnFromRef();
    }
} InstanceSpawnedPlacementNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} InstanceSpawnedPlacementNode__InputsCount <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} InstanceSpawnedPlacementNode__OutputsCount <optimize=false>;

typedef struct
{
    ushort objectZoneID;
    byte bCheckInstanceType;
    byte bAllowInherited;
    FSkip(4);
    InstanceSpawnedPlacementNode__InputsType inputs;
    InstanceSpawnedPlacementNode__OutputsType outputs;
    unsigned int inputCount;
    unsigned int outputCount;
    InstanceSpawnedPlacementNode__InputsCount inputCountWorkaround;
    FSkip(4);
    InstanceSpawnedPlacementNode__OutputsCount outputCountWorkaround;
} InstanceSpawnedPlacementNode <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} InstancePlacementNode__InputsType <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList;
        ReturnFromRef();
    }
} InstancePlacementNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} InstancePlacementNode__InputsCount <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} InstancePlacementNode__OutputsCount <optimize=false>;

typedef struct
{
    PlacementPath placementID;
    InstancePlacementNode__InputsType inputs;
    InstancePlacementNode__OutputsType outputs;
    unsigned int inputCount;
    unsigned int outputCount;
    InstancePlacementNode__InputsCount inputCountWorkaround;
    FSkip(4);
    InstancePlacementNode__OutputsCount outputCountWorkaround;
} InstancePlacementNode <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} ActionGraphInstanceNode__InputsType <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList;
        ReturnFromRef();
    }
} ActionGraphInstanceNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} ActionGraphInstanceNode__InputsCount <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} ActionGraphInstanceNode__OutputsCount <optimize=false>;

typedef struct
{
    PlacementPath placementID;
    ActionGraphInstanceNode__InputsType inputs;
    ActionGraphInstanceNode__OutputsType outputs;
    unsigned int inputCount;
    unsigned int outputCount;
    ActionGraphInstanceNode__InputsCount inputCountWorkaround;
    FSkip(4);
    ActionGraphInstanceNode__OutputsCount outputCountWorkaround;
} ActionGraphInstanceNode <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} ObjectNode__InputsType <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList;
        ReturnFromRef();
    }
} ObjectNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} ObjectNode__InputsCount <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} ObjectNode__OutputsCount <optimize=false>;

typedef struct
{
    ObjectNode__InputsType inputs;
    ObjectNode__OutputsType outputs;
    unsigned int inputCount;
    unsigned int outputCount;
    ObjectNode__InputsCount inputCountWorkaround;
    FSkip(4);
    ObjectNode__OutputsCount outputCountWorkaround;
} ObjectNode <optimize=false>;

typedef struct
{
    uquad placementID;
} BarkGetStatus__InputsType <optimize=false>;

typedef struct
{
    BarkGetStatus__InputsType inputs;
    PlacementPath placementDefaultID;
} BarkGetStatus <optimize=false>;

typedef struct
{
    uquad placementID;
} BarkOverride__InputsType <optimize=false>;

typedef struct
{
    int barkType;
    unsigned int bark;
    unsigned int grunt;
    char subtitleMode;
    byte enabled;
    byte doRMScalcForAnim;
    byte overridePriority;
    int priority;
    byte playAfterDeath;
} VocalRef <optimize=false>;

typedef struct
{
    BarkOverride__InputsType inputs;
    byte enabledDefault;
    FSkip(3);
    PlacementPath placementDefaultID;
    VocalRef vocalRef;
} BarkOverride <optimize=false>;

typedef struct
{
} CampsiteEvents <optimize=false>;

typedef struct
{
    byte allowBackout;
} Campsite_Tutorials <optimize=false>;

typedef struct
{
    float time;
} AGLogPrintMultiData__InputsType <optimize=false>;

typedef struct
{
    Ref dataLabel_1Ref;
    if (CanSeekTo(dataLabel_1Ref))
    {
        SeekToRef(dataLabel_1Ref);
        string dataLabel_1;
        ReturnFromRef();
    }
    Ref dataLabel_2Ref;
    if (CanSeekTo(dataLabel_2Ref))
    {
        SeekToRef(dataLabel_2Ref);
        string dataLabel_2;
        ReturnFromRef();
    }
    Ref dataLabel_3Ref;
    if (CanSeekTo(dataLabel_3Ref))
    {
        SeekToRef(dataLabel_3Ref);
        string dataLabel_3;
        ReturnFromRef();
    }
    Ref dataLabel_4Ref;
    if (CanSeekTo(dataLabel_4Ref))
    {
        SeekToRef(dataLabel_4Ref);
        string dataLabel_4;
        ReturnFromRef();
    }
    Ref dataLabel_5Ref;
    if (CanSeekTo(dataLabel_5Ref))
    {
        SeekToRef(dataLabel_5Ref);
        string dataLabel_5;
        ReturnFromRef();
    }
    Ref dataLabel_6Ref;
    if (CanSeekTo(dataLabel_6Ref))
    {
        SeekToRef(dataLabel_6Ref);
        string dataLabel_6;
        ReturnFromRef();
    }
    Ref dataLabel_7Ref;
    if (CanSeekTo(dataLabel_7Ref))
    {
        SeekToRef(dataLabel_7Ref);
        string dataLabel_7;
        ReturnFromRef();
    }
    Ref dataLabel_8Ref;
    if (CanSeekTo(dataLabel_8Ref))
    {
        SeekToRef(dataLabel_8Ref);
        string dataLabel_8;
        ReturnFromRef();
    }
    byte displayInstanceName;
    byte addNewLine;
    byte requireActivate;
    byte printOnInit;
    AGLogPrintMultiData__InputsType inputs;
} AGLogPrintMultiData <optimize=false>;

typedef struct
{
    float time;
} MultiplayerLogPrintDataNode__InputsType <optimize=false>;

typedef struct
{
    Ref titleRef;
    if (CanSeekTo(titleRef))
    {
        SeekToRef(titleRef);
        string title;
        ReturnFromRef();
    }
    Ref dataLabelRef;
    if (CanSeekTo(dataLabelRef))
    {
        SeekToRef(dataLabelRef);
        string dataLabel;
        ReturnFromRef();
    }
    byte displayInstanceName;
    byte allowDuplicates;
    byte requireActivate;
    byte logToo;
    byte printOnInit;
    FSkip(3);
    MultiplayerLogPrintDataNode__InputsType inputs;
} MultiplayerLogPrintDataNode <optimize=false>;

typedef struct
{
    byte trigger30hz;
    byte outputWhenEnabled;
    byte allowInputDuringInit;
    byte enabled;
} FrameTriggerNode <optimize=false>;

typedef struct
{
    byte disable;
} StartNode__InputsType <optimize=false>;

typedef struct
{
    byte mainOnly;
    StartNode__InputsType inputs;
} StartNode <optimize=false>;

typedef struct
{
    uquad instanceID;
    byte wipeStoredData;
} Misc_RegisterExtraFingerOfGod__InputsType <optimize=false>;

typedef struct
{
    Misc_RegisterExtraFingerOfGod__InputsType inputs;
} Misc_RegisterExtraFingerOfGod <optimize=false>;

typedef struct
{
} Misc_MapRevealUnit__InputsType <optimize=false>;

typedef struct
{
    unsigned int unitMapHashedString;
} ScriptUnitMapID <optimize=false>;

typedef struct
{
    Misc_MapRevealUnit__InputsType inputs;
    ScriptUnitMapID markerUnit;
} Misc_MapRevealUnit <optimize=false>;

typedef struct
{
    byte disable;
    FSkip(3);
    int controller;
} MiscControllerNode__InputsType <optimize=false>;

typedef struct
{
    MiscControllerNode__InputsType inputs;
    byte approvedAsDebugOnly;
} MiscControllerNode <optimize=false>;

enum <int> NamedValueDataType
{
    NamedValueDataType_Bool,
    NamedValueDataType_Int,
    NamedValueDataType_Float,
    NamedValueDataType_Vector,
    NamedValueDataType_Quaternion
};

typedef struct
{
    PlacementPath placementDefault;
    int namedValueType;
    NamedValueDataType namedValueDataType;
    int callbackType;
    FSkip(4);
    Ref namedValueNameRef;
    if (CanSeekTo(namedValueNameRef))
    {
        SeekToRef(namedValueNameRef);
        string namedValueName;
        ReturnFromRef();
    }
    uquad placementID;
} MiscGetNamedValue <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    int namedValueType;
    NamedValueDataType namedValueDataType;
    Ref namedValueNameRef;
    if (CanSeekTo(namedValueNameRef))
    {
        SeekToRef(namedValueNameRef);
        string namedValueName;
        ReturnFromRef();
    }
    local int endPos = FTell() + 0x20;
    switch (namedValueDataType)
    {
        case NamedValueDataType_Bool:
            byte value;
            FSkip(7);
            uquad placementID;
            break;
        case NamedValueDataType_Int:
            int value;
            FSkip(4);
            uquad placementID;
            break;
        case NamedValueDataType_Float:
            float value;
            FSkip(4);
            uquad placementID;
            break;
        case NamedValueDataType_Vector:
            float value[3];
            FSkip(4);
            uquad placementID;
            break;
        case NamedValueDataType_Quaternion:
            float value[3];
            FSkip(4);
            uquad placementID;
            break;
    }
    FSeek(endPos);
} MiscSetNamedValue <optimize=false>;

typedef union
{
    byte _bool;
    int _int;
    float _float;
} PersistentDataValueUnionRedirect;

enum <int> MiscPersistentDataNode_Scope
{
    MiscPersistentDataNode_Scope_Global = 0x0,
    MiscPersistentDataNode_Scope_Instance = 0x1,
};

typedef struct
{
    ushort name;
    FSkip(2);
    int type;
    Ref commentRef;
    if (CanSeekTo(commentRef))
    {
        SeekToRef(commentRef);
        string comment;
        ReturnFromRef();
    }
    PersistentDataValueUnionRedirect _default;
} PersistentDataGlobalStruct <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ushort name;
    FSkip(2);
    int type;
} MiscPersistentDataNode__PersistentDataInstanceStruct <optimize=false>;

typedef struct
{
} MiscPersistentDataNode__InputsTypeGlobal <optimize=false>;

typedef struct
{
    uquad placementID;
} MiscPersistentDataNode__InputsTypeInstance <optimize=false>;

typedef struct
{
    MiscPersistentDataNode_Scope scope;
    FSkip(4);
    local int endPos = FTell() + 0x28;
    switch (scope)
    {
        case MiscPersistentDataNode_Scope_Global:
            PersistentDataGlobalStruct data;
            break;
        case MiscPersistentDataNode_Scope_Instance:
            MiscPersistentDataNode__PersistentDataInstanceStruct data;
            break;
    }
    FSeek(endPos);
    byte skipLocalState;
    byte retroSave;
    byte mPVerified;
    FSkip(1);
    
    endPos = FTell() + 8;
    switch (scope)
    {
        case MiscPersistentDataNode_Scope_Global:
            MiscPersistentDataNode__InputsTypeGlobal inputs;
            break;
        case MiscPersistentDataNode_Scope_Instance:
            MiscPersistentDataNode__InputsTypeInstance inputs;
            break;
    }
    FSeek(endPos);
} MiscPersistentDataNode <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int namedValueType;
    FSkip(4);
    uquad placementID;
    Ref namedValueNameRef;
    if (CanSeekTo(namedValueNameRef))
    {
        SeekToRef(namedValueNameRef);
        string namedValueName;
        ReturnFromRef();
    }
} MiscClearNamedValue <optimize=false>;

typedef struct
{
    int controller;
    int motor0ShockValue;
    int motor0NumFrames;
    int motor1ShockValue;
    int motor1NumFrames;
    int motor2ShockValue;
    int motor2NumFrames;
    int motor3ShockValue;
    int motor3NumFrames;
} Misc_PadShock__InputPadshockTypeDirectControl <optimize=false>;

typedef struct
{
    int controller;
    float pHIATVolumeScale;
    float pHIATSpeedScale;
} Misc_PadShock__InputPadshockTypePHIATControl <optimize=false>;

typedef union
{
    Misc_PadShock__InputPadshockTypeDirectControl inputsDirectControl;
    Misc_PadShock__InputPadshockTypePHIATControl inputsPHIATControl;
} Misc_PadShock__InputsType;

typedef union
{
    byte isMotor0Digital;
    Ref padshockFileRef;
    if (CanSeekTo(padshockFileRef))
    {
        SeekToRef(padshockFileRef);
        string padshockFile;
        ReturnFromRef();
    }
} Misc_PadShock__PHIATFileUseTypes;

typedef struct
{
    char padshockType;
    FSkip(3);
    Misc_PadShock__InputsType inputs;
    Misc_PadShock__PHIATFileUseTypes additParams;
    byte useDefaultPlayerController;
} Misc_PadShock <optimize=false>;

typedef struct
{
    uquad playerID;
} Misc_SetInputActionTracking__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    int type;
    FSkip(4);
    Misc_SetInputActionTracking__InputsType inputs;
    unsigned int nInputActionListCnt;
    unsigned int inputActionList[1];
} Misc_SetInputActionTracking <optimize=false>;

typedef struct
{
    int controller;
} MiscInputAction__InputsType <optimize=false>;

typedef struct
{
    unsigned int inputActionType;
    byte disableOnStart;
    FSkip(3);
    MiscInputAction__InputsType inputs;
} MiscInputAction <optimize=false>;

typedef struct
{
} PatchCheckpointSave__InputsType <optimize=false>;

typedef struct
{
    PatchCheckpointSave__InputsType inputs;
    unsigned int checkpointUnit;
    PlacementPath checkpointPlacementPath;
} PatchCheckpointSave <optimize=false>;

typedef struct
{
    byte allowOnInit;
    byte trigger30hz;
} TriggerNextFrameNode <optimize=false>;

typedef struct
{
    unsigned int inCol;
} FromColorNode__InputType <optimize=false>;

typedef struct
{
    int fromColorDataType;
    FromColorNode__InputType inputs;
} FromColorNode <optimize=false>;

typedef struct
{
    float inR;
    float inG;
    float inB;
    float inA;
} ToColorNode__FloatsToColor <optimize=false>;

typedef struct
{
    float inRGB[3];
    float inA;
} ToColorNode__VectToColor <optimize=false>;

typedef struct
{
    unsigned int inR;
    unsigned int inG;
    unsigned int inB;
    unsigned int inA;
} ToColorNode__IntsToColor <optimize=false>;

typedef union
{
    ToColorNode__FloatsToColor floats1ToColor;
    ToColorNode__FloatsToColor floats255ToColor;
    ToColorNode__VectToColor vect1ToColor;
    ToColorNode__VectToColor vect255ToColor;
    ToColorNode__IntsToColor ints255ToColor;
} ToColorNode__InputsType;

typedef struct
{
    int toColorDataType;
    ToColorNode__InputsType inputs;
} ToColorNode <optimize=false>;

typedef struct
{
    int assertNodeType;
    FSkip(4);
    Ref assertStringRef;
    if (CanSeekTo(assertStringRef))
    {
        SeekToRef(assertStringRef);
        string assertString;
        ReturnFromRef();
    }
    byte assertOnInit;
    byte audioAssert;
} Debug_AssertNode <optimize=false>;

typedef struct
{
    byte resetInputCount;
    byte loop;
} AG_Misc_InputSwitch__InputsType <optimize=false>;

typedef struct
{
    AG_Misc_InputSwitch__InputsType inputs;
} AG_Misc_InputSwitch <optimize=false>;

typedef struct
{
    uquad placementID;
} MiscTriggerStreamSignal__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    MiscTriggerStreamSignal__InputsType inputs;
    ushort currentUnit;
    FSkip(2);
    PlacementPath currentUnitSignalToNewUnit;
} MiscTriggerStreamSignal <optimize=false>;

typedef struct
{
    uquad placementID;
} MiscTriggerStreamStates__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    MiscTriggerStreamStates__InputsType inputs;
} MiscTriggerStreamStates <optimize=false>;

typedef struct
{
    int stateEvent;
    int fromState;
    int toState;
} UiMenuStateNode <optimize=false>;

typedef struct
{
    int state;
} UiIsCurrentMenuStateNode <optimize=false>;

typedef struct
{
    int state;
} UiMenuStateSetNode__SetStateOptionsType <optimize=false>;

typedef struct
{
} UiMenuStateSetNode__SetStatePreviousOptionsType <optimize=false>;

typedef union
{
    UiMenuStateSetNode__SetStateOptionsType setState;
    UiMenuStateSetNode__SetStatePreviousOptionsType setStatePrevious;
    UiMenuStateSetNode__SetStateOptionsType replaceCurrentState;
} UiMenuStateSetNode__OptionsType;

typedef struct
{
    char nodeType;
    FSkip(3);
    UiMenuStateSetNode__OptionsType options;
} UiMenuStateSetNode <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
} Campsite_Open <optimize=false>;

typedef struct
{
    ushort menuCollection;
} UiCollection_Load_Unload <optimize=false>;

typedef struct
{
    int promptType;
    float initialFailTime;
    float adequateTime;
    float perfectTime;
    unsigned int perfectHitWindowStart;
    unsigned int failHitSound;
    unsigned int adequateHitSound;
    unsigned int perfectHitSound;
    unsigned int dodgeCounterStart;
    unsigned int dodgeCounterLoop;
    unsigned int dodgeCounterEnd;
} Ui_QuickTimeEvent <optimize=false>;

typedef struct
{
} RelocateNode__InputsType <optimize=false>;

typedef struct
{
    byte relative;
    FSkip(1);
    ushort relativeUnitID;
    byte playerRelative;
    FSkip(-5);
    RelocateNode__InputsType inputs;
} RelocateNode <optimize=false>;

typedef struct
{
} MiscAddSubtitleNode__InputsType <optimize=false>;

typedef struct
{
    MiscAddSubtitleNode__InputsType inputs;
    uquad subtitle;
    float durationInSeconds;
    char condition;
} MiscAddSubtitleNode <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
    FSkip(2);
    int groupID;
} BCStatusNode__InputsType <optimize=false>;

typedef struct
{
    BCStatusNode__InputsType inputs;
    byte enabled;
    byte bVerifiedSafeToStartEnabled;
    FSkip(2);
    float damageThreshold;
    byte ignoreNonCombatants;
} BCStatusNode <optimize=false>;

typedef struct
{
    byte spawn;
    FSkip(3);
    int groupID;
    int spawnPointIndex;
    int spawnListIndex;
    int maxInstancesToSpawn;
    int needSettingsOverrideIndex;
} BCSpawnNode__InputsType <optimize=false>;

typedef struct
{
    ubyte barkActorMode;
    FSkip(7);
    Ref barksActorGroupIDsRef;
    unsigned int numBarksActorGroupIDs;
    if (CanSeekTo(barksActorGroupIDsRef))
    {
        SeekToRef(barksActorGroupIDsRef);
        unsigned int barksActorGroupIDs[numBarksActorGroupIDs];
        ReturnFromRef();
    }
} BarkActorPicker <optimize=false>;

typedef struct
{
    BarkActorPicker barkActorPicker;
} SpawnInfo__BarkActorPickerInherited <optimize=false>;

typedef struct
{
    ushort objectID;
    FSkip(6);
    SpawnInfo__BarkActorPickerInherited barkActorPickerInherited;
    ubyte count;
    ubyte listItemID;
    FSkip(2);
    unsigned int scriptTypeID;
    unsigned int lootTableID;
} SpawnInfo__ChildInfo <optimize=false>;

typedef struct
{
    unsigned int spawnListSize;
    FSkip(4);
    SpawnInfo__ChildInfo spawnList[spawnListSize];
} SpawnInfo <optimize=false>;

typedef struct
{
    BarkActorPicker barkActorPicker;
} SpawnInfoWeakReferences__BarkActorPickerInherited <optimize=false>;

typedef struct
{
    ushort objectID;
    SpawnInfoWeakReferences__BarkActorPickerInherited barkActorPickerInherited;
    ubyte count;
    ubyte listItemID;
    unsigned int scriptTypeID;
    unsigned int lootTableID;
} SpawnInfoWeakReferences__ChildInfo <optimize=false>;

typedef struct
{
    unsigned int spawnListSize;
    SpawnInfoWeakReferences__ChildInfo spawnList[spawnListSize];
} SpawnInfoWeakReferences <optimize=false>;

typedef union
{
    byte _bool;
    int _int;
    float _float;
    int vector3[3];
    int quat[4];
} NamedValueDataUnion;

typedef struct
{
    Ref namedValueNameRef;
    if (CanSeekTo(namedValueNameRef))
    {
        SeekToRef(namedValueNameRef);
        string namedValueName;
        ReturnFromRef();
    }
    int namedValueDataType;
    NamedValueDataUnion valueToSet;
} BCSpawnNode__BcSpawnNamedValue <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    BCSpawnNode__InputsType inputs;
    float damageThreshold;
    byte bUseOneSpawnPointPerSpawn;
    byte bPacEnemies;
    byte bForcePlayerAwareness;
    byte bForcePlayerAwarenessOnce;
    byte bAutoXpAward;
    byte bCleanUpChildren;
    FSkip(2);
    unsigned int numSpawnPoints;
    Ref spawnPointListRef;
    if (CanSeekTo(spawnPointListRef))
    {
        SeekToRef(spawnPointListRef);
        PlacementPath spawnPointList[numSpawnPoints];
        ReturnFromRef();
    }
    byte useWeakReferences;
    FSkip(3);
    unsigned int numSpawnLists;
    Ref spawnListListRef;
    if (CanSeekTo(spawnListListRef))
    {
        SeekToRef(spawnListListRef);
        byte spawnListList[numSpawnLists];
        ReturnFromRef();
    }
    Ref localSpawnListRef;
    if (CanSeekTo(localSpawnListRef))
    {
        SeekToRef(localSpawnListRef);
        SpawnInfo localSpawnList;
        ReturnFromRef();
    }
    unsigned int numWeakSpawnLists;
    FSkip(4);
    Ref weakSpawnListListRef;
    if (CanSeekTo(weakSpawnListListRef))
    {
        SeekToRef(weakSpawnListListRef);
        byte weakSpawnListList[numWeakSpawnLists];
        ReturnFromRef();
    }
    Ref localWeakSpawnListRef;
    if (CanSeekTo(localWeakSpawnListRef))
    {
        SeekToRef(localWeakSpawnListRef);
        SpawnInfoWeakReferences localWeakSpawnList;
        ReturnFromRef();
    }
    byte assignToStreamLayer;
    FSkip(1);
    ushort unit;
    int streamLayer;
    Ref debugNamePrefixRef;
    if (CanSeekTo(debugNamePrefixRef))
    {
        SeekToRef(debugNamePrefixRef);
        string debugNamePrefix;
        ReturnFromRef();
    }
    byte selectDebugInstance;
    FSkip(3);
    unsigned int numNeedSettingsList;
    Ref needSettingsListRef;
    if (CanSeekTo(needSettingsListRef))
    {
        SeekToRef(needSettingsListRef);
        byte needSettingsList;
        ReturnFromRef();
    }
    float slowdownNpcProximityRange;
    byte bSetNamedValuesOnSpawnedInstances;
    FSkip(3);
    Ref namedValueListRef;
    unsigned int numNamedValuesToSet;
    if (CanSeekTo(namedValueListRef))
    {
        SeekToRef(namedValueListRef);
        BCSpawnNode__BcSpawnNamedValue namedValueList[numNamedValuesToSet];
        ReturnFromRef();
    }
} BCSpawnNode <optimize=false>;

typedef struct
{
    byte getNumIndividuals;
    FSkip(3);
    int groupID;
} BCGetNumIndividualsNode__InputsType <optimize=false>;

typedef struct
{
    BCGetNumIndividualsNode__InputsType inputs;
    byte countOnlyNPCs;
    byte ignoreNpcsThatAreTryingToDespawn;
    byte offscreenOnly;
    byte ignoreNonCombatants;
    byte ignoreDeadNPCs;
} BCGetNumIndividualsNode <optimize=false>;

typedef struct
{
    byte despawnNPCs;
    FSkip(3);
    int groupID;
} BCDespawnNPCsNode__InputsType <optimize=false>;

typedef struct
{
    BCDespawnNPCsNode__InputsType inputs;
    unsigned int numSpawnPoints;
    FSkip(4);
    Ref spawnPointListRef;
    if (CanSeekTo(spawnPointListRef))
    {
        SeekToRef(spawnPointListRef);
        PlacementPath spawnPointList[numSpawnPoints];
        ReturnFromRef();
    }
    byte silentDeleteImmediate;
} BCDespawnNPCsNode <optimize=false>;

typedef struct
{
    byte getGroupMembers;
    byte getGroupMemberCount;
    FSkip(2);
    int groupID;
} BCGetGroupMembersNode__InputsType <optimize=false>;

typedef struct
{
    BCGetGroupMembersNode__InputsType inputs;
    byte ignoreNonCombatants;
    byte ignorePlayers;
    byte ignoreSearchGroupMembers;
    byte onlySearchGroupMembers;
} BCGetGroupMembersNode <optimize=false>;

typedef struct
{
    byte getClosestEnemy;
    byte getClosestAlly;
    byte getClosestNPC;
    FSkip(5);
    uquad placementID;
    int groupID;
    byte getFarthestEnemy;
    FSkip(3);
    float positionOverride[3];
    FSkip(4);
    Ref ignoreNamedValueRef;
    if (CanSeekTo(ignoreNamedValueRef))
    {
        SeekToRef(ignoreNamedValueRef);
        string ignoreNamedValue;
        ReturnFromRef();
    }
} BCGetClosestEnemyNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    BCGetClosestEnemyNode__InputsType inputs;
    byte requireLOSCheck;
    byte requireAwareness;
    byte bAliveOnly;
    FSkip(1);
    float maxDistance;
    float minDistance;
    byte requireObjectMatch;
    FSkip(1);
    ushort objectID;
    byte checkParent;
} BCGetClosestEnemyNode <optimize=false>;

typedef struct
{
    byte setDynamicDifficulty;
    FSkip(3);
    float dynamicDifficultyIn;
} BCSetDynamicDifficultyNode__InputsType <optimize=false>;

typedef struct
{
    BCSetDynamicDifficultyNode__InputsType inputs;
} BCSetDynamicDifficultyNode <optimize=false>;

typedef struct
{
    int setGlobalForcedAwareness;
    FSkip(4);
    uquad targetPlacementID;
    byte forcedAwarenessEnabled;
    FSkip(3);
    int alertOnce;
    int groupID;
} BCForceNpcAwarenessOfInstanceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetPlacementDefaultID;
    BCForceNpcAwarenessOfInstanceNode__InputsType inputs;
    byte alwaysUpdateLastKnownPosition;
} BCForceNpcAwarenessOfInstanceNode <optimize=false>;

typedef struct
{
    int groupID;
    byte bAliveOnly;
} AGBattleConductor_GetNPCTypeCount__InputsType <optimize=false>;

typedef struct
{
    AGBattleConductor_GetNPCTypeCount__InputsType inputs;
    FSkip(3);
    unsigned int objectType;
    byte allowInherited;
} AGBattleConductor_GetNPCTypeCount <optimize=false>;

typedef struct
{
    int groupID;
    byte enableDebugPrint;
} AGBattleConductor_GroupUseCover__InputsType <optimize=false>;

typedef struct
{
    PlacementPath coverPointPath;
    unsigned int flags;
    FSkip(4);
    uquad user;
    float userDist;
} AGBattleConductor_GroupUseCover__CoverPointInfo <optimize=false>;

typedef struct
{
    AGBattleConductor_GroupUseCover__InputsType inputs;
    FSkip(3);
    unsigned int numCoverPoints;
    FSkip(4);
    Ref coverPointsRef;
    if (CanSeekTo(coverPointsRef))
    {
        SeekToRef(coverPointsRef);
        AGBattleConductor_GroupUseCover__CoverPointInfo coverPoints[numCoverPoints];
        ReturnFromRef();
    }
} AGBattleConductor_GroupUseCover <optimize=false>;

typedef struct
{
    int trigger;
    FSkip(4);
    uquad sourcePlacementID;
    uquad otherPlacementID;
    float followUpPosition[3];
    float location[3];
} BCBroadcastNpcEventNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath sourcePlacementDefaultID;
    PlacementPath otherPlacementDefaultID;
    BCBroadcastNpcEventNode__InputsType inputs;
    Ref npcEventInfoRef;
    if (CanSeekTo(npcEventInfoRef))
    {
        SeekToRef(npcEventInfoRef);
        byte npcEventInfo;
        ReturnFromRef();
    }
    ushort generateEventIDOnlyOnce : 1;
    short _Bitfieldpadding8 : 15;
} BCBroadcastNpcEventNode <optimize=false>;

typedef struct
{
    int trigger;
    FSkip(4);
    uquad sourcePlacementID;
    char npcEventType;
    FSkip(3);
    float broadcastRadius;
    byte visualBroadcastEnabled;
    FSkip(3);
    float visualBroadcastRadiusMod;
    uquad otherPlacementID;
} BCBroadcastSoundEventNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath sourcePlacementDefaultID;
    PlacementPath otherPlacementDefaultID;
    BCBroadcastSoundEventNode__InputsType inputs;
} BCBroadcastSoundEventNode <optimize=false>;

typedef struct
{
    int trigger;
    FSkip(4);
    uquad targetPlacementID;
    char attackType;
    FSkip(3);
    float cooldownTime;
} BCSetAttackCooldownNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetPlacementDefaultID;
    BCSetAttackCooldownNode__InputsType inputs;
} BCSetAttackCooldownNode <optimize=false>;

typedef struct
{
    byte trigger;
} BCChangeSettingsNode__InputsType <optimize=false>;

typedef struct
{
    BCChangeSettingsNode__InputsType inputs;
    FSkip(7);
    Ref bCSettingsRef;
    if (CanSeekTo(bCSettingsRef))
    {
        SeekToRef(bCSettingsRef);
        byte bCSettings;
        ReturnFromRef();
    }
} BCChangeSettingsNode <optimize=false>;

typedef struct
{
    int set;
} BCSetMaxAssaultModeAttackersNode__InputsType <optimize=false>;

typedef struct
{
    BCSetMaxAssaultModeAttackersNode__InputsType inputs;
    int maxAssaultModeAttackers;
} BCSetMaxAssaultModeAttackersNode <optimize=false>;

typedef struct
{
    int setAutomatic;
    int setForcedOn;
    int setForcedOff;
    byte forceGroupSuppression;
    FSkip(3);
    int groupID;
    FSkip(4);
    uquad suppressionPlacementKey;
} BCSuppressionControlNode__InputsType <optimize=false>;

typedef struct
{
    BCSuppressionControlNode__InputsType inputs;
} BCSuppressionControlNode <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
} BCWaypointSetNode__InputsType <optimize=false>;

typedef struct
{
    BCWaypointSetNode__InputsType inputs;
    FSkip(2);
    PlacementPath waypointSetPath;
} BCWaypointSetNode <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
    FSkip(6);
    uquad placementID;
    float scale;
    float duration;
    float rampIn;
    float rampOut;
} CameraShakeNode__InputType <optimize=false>;

typedef struct
{
    float depth;
    byte oscDepth;
    FSkip(3);
    float horizontal;
    byte oscHorizontal;
    FSkip(3);
    float vertical;
    byte oscVertical;
    FSkip(3);
    float springFreq;
    float springDamp;
    float mass;
    float period;
    float randomPct;
    byte singleDimension;
} CameraShakeEffect__TranslationParams <optimize=false>;

typedef struct
{
    float pitch;
    byte oscPitch;
    FSkip(3);
    float roll;
    byte oscRoll;
    FSkip(3);
    float yaw;
    byte oscYaw;
    FSkip(3);
    float springFreq;
    float springDamp;
    float mass;
    float period;
    float randomPct;
    byte singleDimension;
} CameraShakeEffect__RotationParams <optimize=false>;

typedef struct
{
    float zoom;
    byte oscZoom;
    FSkip(3);
    float springFreq;
    float springDamp;
    float mass;
    float period;
    float randomPct;
} CameraShakeEffect__FOVParams <optimize=false>;

typedef struct
{
    float delay;
    float rampIn;
    float duration;
    float rampOut;
    float dilationPercent;
} CameraShakeEffect__TimeParams <optimize=false>;

typedef struct
{
    CameraShakeEffect__TranslationParams posParams;
    FSkip(3);
    CameraShakeEffect__RotationParams rotParams;
    FSkip(3);
    CameraShakeEffect__FOVParams fovParams;
    CameraShakeEffect__TimeParams timeParams;
    int cullingType;
    float addToScaleOnDuplicateCalls;
    byte allowDisable;
} CameraShakeEffect <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    CameraShakeNode__InputType inputs;
    CameraShakeEffect cameraShakeEffect;
} CameraShakeNode <optimize=false>;

typedef struct
{
    ushort zoneID;
    FSkip(2);
    PlacementPath splineID;
} CameraSplineNode <optimize=false>;

typedef struct
{
    unsigned int componentID;
} Camera_ResourceID <optimize=false>;

typedef struct
{
    unsigned int shakeID;
} Shake_ResourceID <optimize=false>;

typedef struct
{
    byte disable;
    byte enable;
    byte disableMatchPan;
    byte enableMatchPan;
    byte disableMatchTilt;
    byte enableMatchTilt;
    byte getState;
} CameraEnableCategory__InputType <optimize=false>;

typedef struct
{
    byte disDisable;
    byte outEnable;
    byte outDisableMatchPan;
    byte outEnableMatchPan;
    byte outDisableMatchTilt;
    byte outEnableMatchTilt;
} CameraEnableCategory__OutputType <optimize=false>;

typedef struct
{
    CameraEnableCategory__InputType inputs;
    CameraEnableCategory__OutputType outputs;
    FSkip(3);
    unsigned int categoryHash;
} CameraEnableCategory <optimize=false>;

typedef struct
{
    int viewport;
    float position[3];
    float targetRadius;
    float targetOffset[3];
} CameraGetScreenPosNode__InputsType <optimize=false>;

typedef struct
{
    CameraGetScreenPosNode__InputsType inputs;
} CameraGetScreenPosNode <optimize=false>;

typedef struct
{
    int ownerID;
    int splineID;
    float time;
    float evaluateTime;
    float evaluatePos[3];
} Camera_EvaluateCameraSpline__InputsType <optimize=false>;

typedef struct
{
    Camera_EvaluateCameraSpline__InputsType inputs;
    PlacementPath splineID;
} Camera_EvaluateCameraSpline <optimize=false>;

typedef struct
{
    int ownerID;
    int splineID;
    float speed;
    float startProgress_0to1;
} Camera_EvaluateCameraSplineBySpeed__InputsType <optimize=false>;

typedef struct
{
    Camera_EvaluateCameraSplineBySpeed__InputsType inputs;
    PlacementPath splineID;
} Camera_EvaluateCameraSplineBySpeed <optimize=false>;

typedef struct
{
    int viewportID;
    float waveSpeed;
    float waveLengthX;
    float waveLengthY;
    float waveAngle;
    float waveTuneX;
    float waveTuneY;
} WaveShake__InputsType <optimize=false>;

typedef struct
{
    int numSamples;
    float curveX[128];
    float curveY[128];
    WaveShake__InputsType inputs;
} WaveShake <optimize=false>;

typedef struct
{
    byte disable;
    byte checkResource;
    FSkip(2);
    int viewport;
} Camera_GetCurrentResourceID__InputType <optimize=false>;

typedef struct
{
    Camera_GetCurrentResourceID__InputType inputs;
} Camera_GetCurrentResourceID <optimize=false>;

typedef struct
{
    uquad placementID;
    byte disable;
} Camera_GetCurrentStack__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Camera_GetCurrentStack__InputType inputs;
    byte getNotCurrentButAllActive;
} Camera_GetCurrentStack <optimize=false>;

typedef struct
{
    uquad targetInstance;
    float targetOffset[3];
    float angleThreshold;
} AGCamera_Is_Facing__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetInstanceDefault;
    AGCamera_Is_Facing__InputsType inputs;
} AGCamera_Is_Facing <optimize=false>;

typedef struct
{
    int trackingSegmentID;
    byte lookAtTrackingInst;
} Camera_SwitchToSplineCam__TrackingParams <optimize=false>;

typedef struct
{
    float rodDistance;
    byte enableLateralOffset;
    FSkip(3);
    float lateralLimitLeft;
    float lateralLimitRight;
    byte enableScootBack;
    FSkip(3);
    float scootTime;
    float scootDistance;
    byte enablePan;
    FSkip(3);
    float panMin;
    float panMax;
    byte enableTilt;
    FSkip(3);
    float tiltMin;
    float tiltMax;
    float panTiltInputWeight;
} Camera_SwitchToSplineCam__SplineCamParams <optimize=false>;

typedef struct
{
    float time;
} CamTransitionParams_Custom_TimeBased <optimize=false>;

typedef struct
{
    float angVelocity;
    float velocity;
    float minTime;
} CamTransitionParams_Custom_VelocityBased <optimize=false>;

typedef union
{
    CamTransitionParams_Custom_TimeBased timeBased;
    CamTransitionParams_Custom_VelocityBased velocityBased;
} CamTransitionParams_CustomUnion;

typedef union
{
    float doNotChange;
    float match;
    float resetToDefault;
    float setToAbsoluteValue;
    float setToRelativeValue;
} CamTransitionParams_Common__CustomAngleUnion;

typedef struct
{
    int easeType;
    int panSync;
    int tiltSync;
    byte matchEffects;
    FSkip(3);
    CamTransitionParams_Common__CustomAngleUnion customPanValue;
    CamTransitionParams_Common__CustomAngleUnion customTiltValue;
    float cutThresholdPan;
    float cutThresholdTilt;
    float cutThresholdDist;
} CamTransitionParams_Common <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath posSplineID;
    PlacementPath targetSplineID;
    Camera_SwitchToSplineCam__TrackingParams trackingParams;
    FSkip(3);
    Camera_SwitchToSplineCam__SplineCamParams splineCamParams;
    int transitionType;
    CamTransitionParams_CustomUnion transitionParamsCustomUnion;
    CamTransitionParams_Common transitionParamsCommon;
} Camera_SwitchToSplineCam <optimize=false>;

typedef struct
{
    int trackingSegmentID;
    byte lookAtTrackingInst;
} Camera_ClimbSplineLogic__TrackingParams <optimize=false>;

typedef struct
{
    byte useHeightSplineDrivenParams;
    FSkip(3);
    float heightCurve[16];
    int heightCurveSamples;
    float zoomAt0;
    float zoomAt1;
    float truckAt0[3];
    float truckAt1[3];
} Camera_ClimbSplineLogic__HeightSplineDrivenParams <optimize=false>;

typedef struct
{
    float rodDistance;
    byte enableLateralOffset;
    FSkip(3);
    float lateralLimitLeft;
    float lateralLimitRight;
    byte enableScootBack;
    FSkip(3);
    float scootTime;
    float scootDistance;
    byte enablePan;
    FSkip(3);
    float panMin;
    float panMax;
    byte enableTilt;
    FSkip(3);
    float tiltMin;
    float tiltMax;
    float panTiltInputWeight;
} Camera_ClimbSplineLogic__SplineCamParams <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath posSplineID;
    PlacementPath targetSplineID;
    PlacementPath heightSplineID;
    Camera_ClimbSplineLogic__TrackingParams trackingParams;
    Camera_ClimbSplineLogic__HeightSplineDrivenParams heightDrivenParams;
    FSkip(3);
    Camera_ClimbSplineLogic__SplineCamParams splineCamParams;
    int transitionType;
    CamTransitionParams_CustomUnion transitionParamsCustomUnion;
    CamTransitionParams_Common transitionParamsCommon;
    byte doAutoClimbUpReset;
    FSkip(3);
    int transitionTypeClimbUpReset;
    CamTransitionParams_CustomUnion transitionParamsCustomUnionClimbUpReset;
    CamTransitionParams_Common transitionParamsCommonClimbUpReset;
    byte doAutoGroundReset;
    FSkip(3);
    int transitionTypeOnGroundReset;
    CamTransitionParams_CustomUnion transitionParamsCustomUnionOnGroundReset;
    CamTransitionParams_Common transitionParamsCommonOnGroundReset;
    int transitionTypeForcedReset;
    CamTransitionParams_CustomUnion transitionParamsCustomUnionForcedReset;
    CamTransitionParams_Common transitionParamsCommonForcedReset;
} Camera_ClimbSplineLogic <optimize=false>;

typedef struct
{
    int viewport;
    FSkip(4);
    uquad placementID;
    byte trigger;
    FSkip(3);
    float time;
    unsigned int overrideResourceID;
} Camera_Switch__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int transitionType;
    CamTransitionParams_CustomUnion transitionParamsCustomUnion;
    CamTransitionParams_Common transitionParamsCommon;
    Camera_Switch__InputType inputs;
} Camera_Switch <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int resourceID;
    byte trigger;
    FSkip(3);
    float time;
    byte skipIfAlreadySet;
} Camera_ChangeOrResetStack__InputType_Change <optimize=false>;

typedef struct
{
    uquad placementID;
    byte trigger;
    FSkip(3);
    float time;
    unsigned int optionalResourceID;
} Camera_ChangeOrResetStack__InputType_Reset <optimize=false>;

typedef union
{
    Camera_ChangeOrResetStack__InputType_Change instanceChangeCamera;
    Camera_ChangeOrResetStack__InputType_Reset instanceResetCamera;
    Camera_ChangeOrResetStack__InputType_Change combatChangeCamera;
    Camera_ChangeOrResetStack__InputType_Reset combatResetCamera;
    Camera_ChangeOrResetStack__InputType_Change overrideChangeCamera;
    Camera_ChangeOrResetStack__InputType_Reset overrideResetCamera;
} Camera_ChangeOrResetStack__InputTypes;

typedef struct
{
    PlacementPath placementDefaultID;
    int changeOrResetType;
    int transitionType;
    CamTransitionParams_CustomUnion transitionParamsCustomUnion;
    CamTransitionParams_Common transitionParamsCommon;
    Camera_ChangeOrResetStack__InputTypes inputs;
} Camera_ChangeOrResetStack <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
} CameraGetActiveCameraIDNode__InputsType <optimize=false>;

typedef struct
{
    CameraGetActiveCameraIDNode__InputsType inputs;
} CameraGetActiveCameraIDNode <optimize=false>;

typedef struct
{
    uquad cameraComponentID;
} CameraGetPropertiesNode__InputsType <optimize=false>;

typedef struct
{
    CameraGetPropertiesNode__InputsType inputs;
} CameraGetPropertiesNode <optimize=false>;

typedef struct
{
    uquad cameraComponentID;
    float time;
    int easeType;
    byte matchPan;
    byte matchTilt;
    byte matchEffects;
} CameraResetToDefaultsNode__InputsType <optimize=false>;

typedef struct
{
    CameraResetToDefaultsNode__InputsType inputs;
} CameraResetToDefaultsNode <optimize=false>;

typedef struct
{
    uquad cameraComponentID;
    float zoom;
    byte isRelative;
    FSkip(3);
    float time;
    int easeType;
} CameraSetZoomNode__InputsType <optimize=false>;

typedef struct
{
    CameraSetZoomNode__InputsType inputs;
} CameraSetZoomNode <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int resourceToReplace;
    unsigned int replacementResource;
    byte replace;
    byte reset;
    FSkip(2);
    float time;
} Camera_ReplaceResource__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Camera_ReplaceResource__InputType inputs;
    int transitionType;
    CamTransitionParams_CustomUnion transitionParamsCustomUnion;
    CamTransitionParams_Common transitionParamsCommon;
    byte switchIfActive;
} Camera_ReplaceResource <optimize=false>;

typedef struct
{
    float value;
} CameraSetPropertyNode__InputsType_SetFloat <optimize=false>;

typedef struct
{
    float valueLow;
    float valueMid;
    float valueHigh;
} CameraSetPropertyNode__InputsType_SetFloat3pt <optimize=false>;

typedef struct
{
    float value[3];
} CameraSetPropertyNode__InputsType_SetVector <optimize=false>;

typedef struct
{
    float valueLow[3];
    float valueMid[3];
    float valueHigh[3];
} CameraSetPropertyNode__InputsType_SetVector3pt <optimize=false>;

typedef struct
{
    float minValue;
    float maxValue;
} CameraSetPropertyNode__InputsType_SetMinMax <optimize=false>;

typedef struct
{
} CameraSetPropertyNode__InputsType_EnableDisable <optimize=false>;

typedef struct
{
} CameraSetPropertyNode__InputsType_Trigger <optimize=false>;

typedef union
{
    CameraSetPropertyNode__InputsType_SetFloat setDolly;
    CameraSetPropertyNode__InputsType_SetFloat3pt setDolly_3pnt;
    CameraSetPropertyNode__InputsType_SetVector setTruck;
    CameraSetPropertyNode__InputsType_SetVector3pt setTruck_3pnt;
    CameraSetPropertyNode__InputsType_SetVector setTrackingFocusOffset;
    CameraSetPropertyNode__InputsType_SetFloat setTilt;
    CameraSetPropertyNode__InputsType_SetFloat setPan;
    CameraSetPropertyNode__InputsType_SetFloat setRoll;
    CameraSetPropertyNode__InputsType_SetFloat setOrbitPitch;
    CameraSetPropertyNode__InputsType_SetFloat setOrbitYaw;
    CameraSetPropertyNode__InputsType_SetFloat setYawRelativeToFacing;
    CameraSetPropertyNode__InputsType_SetFloat setZoom;
    CameraSetPropertyNode__InputsType_SetFloat setFOVLimit;
    CameraSetPropertyNode__InputsType_SetFloat setAttractionWeight;
    CameraSetPropertyNode__InputsType_SetFloat setAttractionMaxLength;
    CameraSetPropertyNode__InputsType_SetFloat3pt setZoom_3pnt;
    CameraSetPropertyNode__InputsType_SetMinMax setPitchLimits;
    CameraSetPropertyNode__InputsType_SetMinMax setYawLimits;
    CameraSetPropertyNode__InputsType_SetMinMax setPanLimits;
    CameraSetPropertyNode__InputsType_SetMinMax setTiltLimits;
    CameraSetPropertyNode__InputsType_EnableDisable enableFollowPitch;
    CameraSetPropertyNode__InputsType_EnableDisable enableFollowYaw;
    CameraSetPropertyNode__InputsType_Trigger resetToDefault;
} CameraSetPropertyNode__InputsType;

typedef struct
{
    float time;
    int easeType;
} CameraSetPropertyNode__ExtraParamType_SetBasic <optimize=false>;

typedef struct
{
} CameraSetPropertyNode__ExtraParamType_None <optimize=false>;

typedef struct
{
    byte relativeToFacing;
} CameraSetPropertyNode__ExtraParamType_Relative <optimize=false>;

typedef struct
{
    float time;
    int easeType;
    int panSync;
    int tiltSync;
} CameraSetPropertyNode__ExtraParamType_ResetToDefault <optimize=false>;

typedef union
{
    CameraSetPropertyNode__ExtraParamType_SetBasic setDolly;
    CameraSetPropertyNode__ExtraParamType_SetBasic setDolly_3pnt;
    CameraSetPropertyNode__ExtraParamType_SetBasic setTruck;
    CameraSetPropertyNode__ExtraParamType_SetBasic setTruck_3pnt;
    CameraSetPropertyNode__ExtraParamType_SetBasic setTrackingFocusOffset;
    CameraSetPropertyNode__ExtraParamType_SetBasic setTilt;
    CameraSetPropertyNode__ExtraParamType_SetBasic setPan;
    CameraSetPropertyNode__ExtraParamType_SetBasic setRoll;
    CameraSetPropertyNode__ExtraParamType_SetBasic setOrbitPitch;
    CameraSetPropertyNode__ExtraParamType_SetBasic setOrbitYaw;
    CameraSetPropertyNode__ExtraParamType_SetBasic setYawRelativeToFacing;
    CameraSetPropertyNode__ExtraParamType_SetBasic setZoom;
    CameraSetPropertyNode__ExtraParamType_SetBasic setFOVLimit;
    CameraSetPropertyNode__ExtraParamType_SetBasic setAttractionWeight;
    CameraSetPropertyNode__ExtraParamType_SetBasic setAttractionMaxLength;
    CameraSetPropertyNode__ExtraParamType_SetBasic setZoom_3pnt;
    CameraSetPropertyNode__ExtraParamType_None setPitchLimits;
    CameraSetPropertyNode__ExtraParamType_Relative setYawLimits;
    CameraSetPropertyNode__ExtraParamType_Relative setPanLimits;
    CameraSetPropertyNode__ExtraParamType_None setTiltLimits;
    CameraSetPropertyNode__ExtraParamType_None enableFollowPitch;
    CameraSetPropertyNode__ExtraParamType_None enableFollowYaw;
    CameraSetPropertyNode__ExtraParamType_ResetToDefault resetToDefault;
} CameraSetPropertyNode__ExtraParamType;

typedef struct
{
    byte overrideStack;
    byte combatStack;
    byte stateControlStack;
    byte defaultStack;
    byte baseCamera;
    FSkip(3);
    unsigned int categoryHash;
    unsigned int optionalResourceID;
} CameraSetPropertyNode__SetFilters <optimize=false>;

typedef struct
{
    int setPropType;
    CameraSetPropertyNode__InputsType inputs;
    CameraSetPropertyNode__ExtraParamType params;
    CameraSetPropertyNode__SetFilters setFilters;
} CameraSetPropertyNode <optimize=false>;

typedef struct
{
    unsigned int emote;
} ChallengeTombTriggerEmote <optimize=false>;

typedef struct
{
    unsigned int statusIcon;
} ChallengeTombDisplayStatusIcon <optimize=false>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    char type;
    FSkip(7);
    ActionGraphDataUnion data;
} ScriptableNodeInputSocket <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_One <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Two <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Three <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Four <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Five <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Six <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Seven <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Eight <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
    FSkip(7);
    ScriptableNodeInputSocket value9;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Nine <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
    FSkip(7);
    ScriptableNodeInputSocket value9;
    FSkip(7);
    ScriptableNodeInputSocket value10;
    FSkip(3);
    int randomize;
} AGArrayNode__Inputs_Ten <optimize=false>;

typedef union
{
    AGArrayNode__Inputs_One one;
    AGArrayNode__Inputs_Two two;
    AGArrayNode__Inputs_Three three;
    AGArrayNode__Inputs_Four four;
    AGArrayNode__Inputs_Five five;
    AGArrayNode__Inputs_Six six;
    AGArrayNode__Inputs_Seven seven;
    AGArrayNode__Inputs_Eight eight;
    AGArrayNode__Inputs_Nine nine;
    AGArrayNode__Inputs_Ten ten;
} AGArrayNode__InputsType;

typedef struct
{
    int arraySize;
    AGArrayNode__InputsType inputs;
} AGArrayNode <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
} AGSelectorNode__Inputs_One <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
} AGSelectorNode__Inputs_Two <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
} AGSelectorNode__Inputs_Three <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
} AGSelectorNode__Inputs_Four <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
} AGSelectorNode__Inputs_Five <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
} AGSelectorNode__Inputs_Six <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
} AGSelectorNode__Inputs_Seven <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
} AGSelectorNode__Inputs_Eight <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
    FSkip(7);
    ScriptableNodeInputSocket value9;
} AGSelectorNode__Inputs_Nine <optimize=false>;

typedef struct
{
    int lookup;
    FSkip(4);
    ScriptableNodeInputSocket value1;
    FSkip(7);
    ScriptableNodeInputSocket value2;
    FSkip(7);
    ScriptableNodeInputSocket value3;
    FSkip(7);
    ScriptableNodeInputSocket value4;
    FSkip(7);
    ScriptableNodeInputSocket value5;
    FSkip(7);
    ScriptableNodeInputSocket value6;
    FSkip(7);
    ScriptableNodeInputSocket value7;
    FSkip(7);
    ScriptableNodeInputSocket value8;
    FSkip(7);
    ScriptableNodeInputSocket value9;
    FSkip(7);
    ScriptableNodeInputSocket value10;
} AGSelectorNode__Inputs_Ten <optimize=false>;

typedef union
{
    AGSelectorNode__Inputs_One one;
    AGSelectorNode__Inputs_Two two;
    AGSelectorNode__Inputs_Three three;
    AGSelectorNode__Inputs_Four four;
    AGSelectorNode__Inputs_Five five;
    AGSelectorNode__Inputs_Six six;
    AGSelectorNode__Inputs_Seven seven;
    AGSelectorNode__Inputs_Eight eight;
    AGSelectorNode__Inputs_Nine nine;
    AGSelectorNode__Inputs_Ten ten;
} AGSelectorNode__InputsType;

typedef struct
{
    int arraySize;
    AGSelectorNode__InputsType inputs;
} AGSelectorNode <optimize=false>;

typedef struct
{
    int start;
    int stop;
    float startPos[3];
    float displacement[3];
} DebugDrawVector__InputsType <optimize=false>;

typedef struct
{
    unsigned int colorValue;
    DebugDrawVector__InputsType inputs;
} DebugDrawVector <optimize=false>;

typedef struct
{
    uquad placementID;
} DialogueActorAssignmentNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int actorID;
    FSkip(4);
    DialogueActorAssignmentNode__InputsType inputs;
} DialogueActorAssignmentNode <optimize=false>;

typedef struct
{
    uquad placementID;
} DialoguePlayLineNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int lineSound;
    char lineSubtitleMode;
    FSkip(3);
    unsigned int LineIndexInDialogue;
    unsigned int lineIndexInDialogue;
    unsigned int ShortDesc;
    FSkip(4);
    DialoguePlayLineNode__InputsType inputs;
    byte useMouthFlap;
    FSkip(3);
    int priority;
} DialoguePlayLineNode <optimize=false>;

typedef struct
{
} QueryVOImmersionModeNode__InputsType <optimize=false>;

typedef struct
{
    QueryVOImmersionModeNode__InputsType inputs;
} QueryVOImmersionModeNode <optimize=false>;

typedef struct
{
    unsigned int hash;
} EnumPlayNotification <optimize=false>;

typedef struct
{
    unsigned int hash;
} EnumAmmoType <optimize=false>;

typedef struct
{
    int objectiveStateType;
} ScriptObjectiveStateType <optimize=false>;

enum <uint> InventoryState
{
    InventoryState_Cinematic_Torch_Visible = 0x1A94D294,
    InventoryState_Cinematic_NoPistol = 0xB01A0BC4,
    InventoryState_Cinematic = 0x41BBE4FC,
    InventoryState_Normal = 0xA530EE3D,
    InventoryState_HideWeaponsOnBack = 0x8DB15124,
    InventoryState_PistolOnly = 0x48F368E7,
    InventoryState_SpectatorMode = 0xD569FA97,
    InventoryState_Hide_NPC_All = 0xDF2CA026,
    InventoryState_Show_NPC_All = 0x6CFCA9F1,
    InventoryState_NothingButBow = 0x0C262F6E,
    InventoryState_NoWeapons_NoGear = 0x6F29AC16,
    InventoryState_NoPistol = 0xAD27512E,
    InventoryState_Campsite_Hide_Gun = 0xD55B0DF5,
    InventoryState_VillageHub_RothCine_Custom_Gear_Hide = 0x200FE44F,
    InventoryState_ShotgunSlide = 0xC056211A,
    InventoryState_Hands_Tied_No_Weapons = 0x84E72BE9,
    InventoryState_PistolOnlyProcessAndRender = 0x520BBA4B,
    InventoryState_Prying = 0xB435B184,
    InventoryState_Hide_Pistol_Bow_SMG_Shotgun = 0x91002C97,
    InventoryState_Sickle_Only_NPC = 0x08EDF1F5,
    InventoryState_Ledge = 0x05D041CE,
    InventoryState_NothingButBowAndTorch = 0xF6E255EC,
    InventoryState_NoCharacterCollide_NoDraw = 0xF5782BDA,
    InventoryState_NoCharacterCollide = 0x82DC656A,
    InventoryState_HideAxe = 0x78707DFC,
    InventoryState_ShowAxe = 0x11584469,
    InventoryState_ForcePistol = 0x5F6CBC0C,
    InventoryState_Cinematic_ShowBow = 0x91F844F5,
    InventoryState_NoWalkieTalkie = 0x4E2F56BC,
    InventoryState_EverythingButBow = 0xA42D4F93,
    InventoryState_ForceRenderQuiver = 0x51D67FC4,
    InventoryState_Squeeze_HideGears = 0x692C6CA0,
    InventoryState_Underwater = 0xC728DA59,
    InventoryState_DoNothing = 0x044DC2CC,
    InventoryState_HideKnife = 0xC6C4C454,
    InventoryState_HideWeaponsOnBack_NoPistol = 0x6F00D2FD
};

typedef struct
{
    unsigned int hash;
} EnumThreatMood <optimize=false>;

typedef struct
{
    unsigned int hash;
} EnumUIButtonIconType <optimize=false>;

typedef struct
{
    unsigned int hash;
} EnumCombatMusicTypes <optimize=false>;

typedef union
{
    EnumPlayNotification playNotifications;
    EventEnum events;
    unsigned int inputActions;
    EnumAmmoType ammoTypes;
    ScriptObjectiveStateType objectiveStateType;
    int damage;
    int hitReact;
    ushort object;
    int inventory;
    InventoryState inventoryState;
    EnumThreatMood threatMood;
    char markupTypes;
    ubyte concealmentTypes;
    EnumUIButtonIconType uIButtonIconType;
    char gameTeams;
    char projectileStateTypes;
    EnumCombatMusicTypes combatMusicStateType;
    int stealthLoopStates;
    ubyte ledgeHangTypes;
} Misc_EnumValue__ValueType;

typedef struct
{
    int enumType;
    Misc_EnumValue__ValueType enumValue;
    byte outputOnInit;
} Misc_EnumValue <optimize=false>;

typedef union
{
    EnumPlayNotification playNotifications;
    EventEnum events;
    unsigned int inputActions;
    EnumAmmoType ammoTypes;
    int damage;
    int hitReact;
    int inventory;
    InventoryState inventoryState;
    EnumThreatMood threatMood;
    char markupTypes;
    ubyte concealmentTypes;
    char nPCEvents;
    char nPCEventsSubType;
    char projectileStateTypes;
    EnumCombatMusicTypes combatMusicStateType;
    int stealthLoopStates;
    ubyte ledgeHangTypes;
} Misc_EnumSelector__ValueType;

typedef struct
{
    Misc_EnumSelector__ValueType unionValue;
} Misc_EnumSelector__UnionStruct <optimize=false>;

typedef struct
{
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        Misc_EnumSelector__UnionStruct outputList;
        ReturnFromRef();
    }
    byte noMatch;
} Misc_EnumSelector__OutputsType <optimize=false>;

typedef struct
{
    int enumType;
    byte invertResults;
    FSkip(3);
    Misc_EnumSelector__OutputsType outputs;
    FSkip(3);
    unsigned int outputsListCount;
} Misc_EnumSelector <optimize=false>;

typedef struct
{
    unsigned int value;
} Misc_ValueConvertor__InputActionsType <optimize=false>;

typedef struct
{
    int value;
} Misc_ValueConvertor__Damage_Type <optimize=false>;

typedef struct
{
    int value;
} Misc_ValueConvertor__HitReact_Type <optimize=false>;

typedef struct
{
    ushort value;
} Misc_ValueConvertor__Object_ID <optimize=false>;

typedef struct
{
    int value;
} Misc_ValueConvertor__Inventory_Type <optimize=false>;

typedef struct
{
    char value;
} Misc_ValueConvertor__Markup_Type <optimize=false>;

typedef struct
{
    ubyte value;
} Misc_ValueConvertor__Concealment_Type <optimize=false>;

typedef struct
{
    int value;
} Misc_ValueConvertor__IntType <optimize=false>;

typedef struct
{
    Ref valueRef;
    if (CanSeekTo(valueRef))
    {
        SeekToRef(valueRef);
        string value;
        ReturnFromRef();
    }
} Misc_ValueConvertor__StringType <optimize=false>;

typedef struct
{
    char value;
} Misc_ValueConvertor__ProjectileState_Type <optimize=false>;

typedef union
{
    EnumPlayNotification playNotifications;
    EventEnum events;
    Misc_ValueConvertor__InputActionsType inputActions;
    EnumAmmoType ammoTypes;
    ScriptObjectiveStateType objectiveStateType;
    Misc_ValueConvertor__Damage_Type damage;
    Misc_ValueConvertor__HitReact_Type hitReact;
    Misc_ValueConvertor__Object_ID object;
    Misc_ValueConvertor__Inventory_Type inventory;
    EnumThreatMood threatMood;
    Misc_ValueConvertor__Markup_Type markupTypes;
    Misc_ValueConvertor__Concealment_Type concealmentTypes;
    EnumUIButtonIconType uIButtonIconType;
    Misc_ValueConvertor__IntType integer;
    Misc_ValueConvertor__StringType _string;
    Misc_ValueConvertor__ProjectileState_Type projectileStateTypes;
} Misc_ValueConvertor__InValueType;

typedef struct
{
    float value;
} Misc_ValueConvertor__FloatType <optimize=false>;

typedef union
{
    Misc_ValueConvertor__IntType integer;
    Misc_ValueConvertor__StringType _string;
    Misc_ValueConvertor__FloatType _float;
} Misc_ValueConvertor__OutValueType;

typedef struct
{
    Misc_ValueConvertor__InValueType pairInValue;
    Misc_ValueConvertor__OutValueType pairOutValue;
} Misc_ValueConvertor__PairStruct <optimize=false>;

typedef struct
{
    int enumType;
    int outType;
    Ref pairsListRef;
    if (CanSeekTo(pairsListRef))
    {
        SeekToRef(pairsListRef);
        Misc_ValueConvertor__PairStruct pairsList;
        ReturnFromRef();
    }
    unsigned int pairsListCount;
} Misc_ValueConvertor <optimize=false>;

typedef struct
{
    ActionGraphIntroID player;
} GiveExperienceAward__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    GiveExperienceAward__InputsType inputs;
    ushort achievementsListIndex;
} GiveExperienceAward <optimize=false>;

typedef struct
{
    uquad player;
    int xp;
} GiveXP__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    GiveXP__InputsType inputs;
    byte pacXP;
    byte retroSave;
    FSkip(2);
    uquad bonusString;
} GiveXP <optimize=false>;

typedef struct
{
    uquad player;
    int skillPoints;
} GiveSkillPoints__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    GiveSkillPoints__InputsType inputs;
} GiveSkillPoints <optimize=false>;

typedef struct
{
    uquad placementHashKey;
    int _int;
} Experience_AdrenalineNode__Input_Int <optimize=false>;

typedef struct
{
    uquad placementHashKey;
    float _float;
} Experience_AdrenalineNode__Input_Float <optimize=false>;

typedef struct
{
    uquad placementHashKey;
    byte _bool;
} Experience_AdrenalineNode__Input_Bool <optimize=false>;

typedef struct
{
    uquad placementHashKey;
} Experience_AdrenalineNode__Input_Base <optimize=false>;

typedef union
{
    Experience_AdrenalineNode__Input_Int giveXP;
    Experience_AdrenalineNode__Input_Float giveAP;
    Experience_AdrenalineNode__Input_Bool setAPFreeze;
    Experience_AdrenalineNode__Input_Base getXP;
    Experience_AdrenalineNode__Input_Base getAP;
    Experience_AdrenalineNode__Input_Base getAPPercent;
    Experience_AdrenalineNode__Input_Base getAPThreshold;
    Experience_AdrenalineNode__Input_Base getAPCap;
    Experience_AdrenalineNode__Input_Base isAdrenalineActive;
    Experience_AdrenalineNode__Input_Base isAdrenalineCooldown;
    Experience_AdrenalineNode__Input_Base isAdrenalineFreeze;
    Experience_AdrenalineNode__Input_Base isAdrenalineReady;
    Experience_AdrenalineNode__Input_Base startAdrenaline;
    Experience_AdrenalineNode__Input_Base stopAdrenaline;
} Experience_AdrenalineNode__InputsType;

typedef struct
{
    int type;
    FSkip(4);
    Experience_AdrenalineNode__InputsType inputs;
} Experience_AdrenalineNode <optimize=false>;

typedef struct
{
    uquad player;
    int health;
} ExperienceAdjustMaxHealth__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    ExperienceAdjustMaxHealth__InputsType inputs;
} ExperienceAdjustMaxHealth <optimize=false>;

typedef struct
{
    uquad placementID;
} HasTraitNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ushort trait;
    FSkip(6);
    HasTraitNode__InputsType inputs;
} HasTraitNode <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int trait;
} AGAddTraitNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ushort trait;
    byte applyToAllPlayers;
    byte retroSave;
    FSkip(4);
    AGAddTraitNode__InputsType inputs;
} AGAddTraitNode <optimize=false>;

typedef struct
{
    uquad placementID;
} AGRevealSkillNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ushort trait;
    FSkip(6);
    AGRevealSkillNode__InputsType inputs;
} AGRevealSkillNode <optimize=false>;

typedef struct
{
} Experience_ToggleAutoXpAward__InputsType <optimize=false>;

typedef struct
{
    Experience_ToggleAutoXpAward__InputsType inputs;
} Experience_ToggleAutoXpAward <optimize=false>;

typedef struct
{
    uquad placementID;
} AGRemoveTraitNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ushort trait;
    FSkip(6);
    AGRemoveTraitNode__InputsType inputs;
} AGRemoveTraitNode <optimize=false>;

typedef struct
{
    int unlockCondition;
    FSkip(4);
    Ref pathsToGiveRef;
    unsigned int numPathsToGive;
    if (CanSeekTo(pathsToGiveRef))
    {
        SeekToRef(pathsToGiveRef);
        unsigned int pathsToGive[numPathsToGive];
        ReturnFromRef();
    }
} PlayStylePath__PlayStyleUnlock <optimize=false>;

typedef struct
{
    unsigned int dlcHash;
} DLCFeatureRef <optimize=false>;

typedef struct
{
    ushort trait;
    FSkip(2);
    int not;
} PlayerTraitListIndexComparison <optimize=false>;

typedef struct
{
    int sessionType;
    int collectibleGroup;
    ushort collectibleGroupIndex;
    ushort collectibleItemIndex;
    unsigned int collectibleId <format=hex>;
} ChooseCollectible <optimize=false>;

typedef struct
{
    uquad titleStr;
    uquad descriptionStr;
    ushort pathTrait;
    byte isDlcPath;
    FSkip(1);
    DLCFeatureRef dlcRef;
    unsigned int numTraitRequirements;
    FSkip(4);
    Ref traitRequirementsRef;
    if (CanSeekTo(traitRequirementsRef))
    {
        SeekToRef(traitRequirementsRef);
        PlayerTraitListIndexComparison traitRequirements[numTraitRequirements];
        ReturnFromRef();
    }
    Ref iconTypeRef;
    if (CanSeekTo(iconTypeRef))
    {
        SeekToRef(iconTypeRef);
        string iconType;
        ReturnFromRef();
    }
    unsigned int numSkills;
    FSkip(4);
    Ref skillsRef;
    if (CanSeekTo(skillsRef))
    {
        SeekToRef(skillsRef);
        ushort skills[numSkills];
        ReturnFromRef();
    }
    unsigned int numAvailableSkills;
    FSkip(4);
    Ref availableSkillsRef;
    if (CanSeekTo(availableSkillsRef))
    {
        SeekToRef(availableSkillsRef);
        ushort availableSkills[numAvailableSkills];
        ReturnFromRef();
    }
    unsigned int numWeapons;
    FSkip(4);
    Ref weaponsRef;
    if (CanSeekTo(weaponsRef))
    {
        SeekToRef(weaponsRef);
        ushort weapons[numWeapons];
        ReturnFromRef();
    }
    unsigned int numAvailableWeapons;
    FSkip(4);
    Ref availableWeaponsRef;
    if (CanSeekTo(availableWeaponsRef))
    {
        SeekToRef(availableWeaponsRef);
        ushort availableWeapons[numAvailableWeapons];
        ReturnFromRef();
    }
    unsigned int numCollectibles;
    FSkip(4);
    Ref collectiblesRef;
    if (CanSeekTo(collectiblesRef))
    {
        SeekToRef(collectiblesRef);
        ChooseCollectible collectibles[numCollectibles];
        ReturnFromRef();
    }
    unsigned int numAvailableCollectibles;
    FSkip(4);
    Ref availableCollectiblesRef;
    if (CanSeekTo(availableCollectiblesRef))
    {
        SeekToRef(availableCollectiblesRef);
        ushort availableCollectibles[numAvailableCollectibles];
        ReturnFromRef();
    }
} ContentPath <optimize=false>;

typedef struct
{
    unsigned int numPathUnlocks;
    FSkip(4);
    Ref playStyleUnlocksRef;
    if (CanSeekTo(playStyleUnlocksRef))
    {
        SeekToRef(playStyleUnlocksRef);
        PlayStylePath__PlayStyleUnlock playStyleUnlocks;
        ReturnFromRef();
    }
    unsigned int numPaths;
    FSkip(4);
    Ref pathsRef;
    if (CanSeekTo(pathsRef))
    {
        SeekToRef(pathsRef);
        ContentPath paths[numPaths];
        ReturnFromRef();
    }
} PlayStylePath <optimize=false>;

typedef struct
{
    uquad placementID;
} AGPlaystylePathNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Ref playstylepathRef;
    if (CanSeekTo(playstylepathRef))
    {
        SeekToRef(playstylepathRef);
        PlayStylePath playstylepath;
        ReturnFromRef();
    }
    unsigned int path;
    FSkip(4);
    AGPlaystylePathNode__InputsType inputs;
} AGPlaystylePathNode <optimize=false>;

typedef struct
{
} FxWindUnitEnabler__InputType <optimize=false>;

typedef struct
{
    FxWindUnitEnabler__InputType inputs;
    PlacementPath windUnitPlacement;
    unsigned int forceArrayIndex;
} FxWindUnitEnabler <optimize=false>;

typedef struct
{
    float fLifeMin;
    float fLifeMax;
    float fSpeedMin;
    float fSpeedMax;
    float fSpeed;
} FxWindSplineModifier__InputType <optimize=false>;

typedef struct
{
    FxWindSplineModifier__InputType inputs;
    PlacementPath placementDefaultID;
} FxWindSplineModifier <optimize=false>;

typedef struct
{
    float fLifeMin;
    float fLifeMax;
    float fSpeedMin;
    float fSpeedMax;
    float fDirMin;
    float fDirMax;
    float fSpeed;
    float fVariance;
} FxWindUnit__InputType <optimize=false>;

typedef struct
{
    FxWindUnit__InputType inputs;
    PlacementPath windUnitPlacement;
    unsigned int forceArrayIndex;
} FxWindUnit <optimize=false>;

typedef struct
{
    PlacementPath placementID;
    float setRadius1;
    float setRadius2;
    float setMinSpeed;
    float setMaxSpeed;
} FxWindPointNode__InputType <optimize=false>;

typedef struct
{
    FxWindPointNode__InputType inputs;
    PlacementPath placementDefaultID;
} FxWindPointNode <optimize=false>;

typedef struct
{
    int type;
    unsigned int index;
} GameRulesInstanceTagData <optimize=false>;

typedef struct
{
    GameRulesInstanceTagData gameTagData;
    int compareOp;
} GameRulesInstance <optimize=false>;

typedef struct
{
    int type;
    unsigned int index;
} GameRulesMarkerTagData <optimize=false>;

typedef struct
{
    GameRulesMarkerTagData gameTagData;
    int compareOp;
} GameRulesMarker <optimize=false>;

typedef struct
{
    ScriptObjective objective;
    unsigned int numSubObjectives;
} ObjectiveProgression <optimize=false>;

typedef struct
{
    float timer;
    byte loop;
    FSkip(3);
    uquad targetPlacementID;
} GameObjectiveNagNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetPlacementDefaultID;
    GameObjectiveNagNode__InputsType inputs;
    VocalRef vocalRef;
    FSkip(3);
    ScriptObjective objective;
} GameObjectiveNagNode <optimize=false>;

typedef struct
{
    uquad playerID;
    byte getStatus;
} NoticeableActionNode__Input_Query <optimize=false>;

typedef struct
{
    uquad playerID;
} NoticeableActionNode__Input_Modify <optimize=false>;

typedef struct
{
    uquad playerID;
} NoticeableActionNode__Input_Events <optimize=false>;

typedef union
{
    NoticeableActionNode__Input_Query noticeableActionQuery;
    NoticeableActionNode__Input_Modify noticeableActionModify;
    NoticeableActionNode__Input_Events noticeableActionEvents;
} NoticeableActionNode__InputsType;

typedef struct
{
    PlacementPath playerIDDefault;
    int type;
    ushort objectID;
    FSkip(2);
    unsigned int noticeableActionIndex;
    FSkip(4);
    NoticeableActionNode__InputsType inputs;
} NoticeableActionNode <optimize=false>;

typedef struct
{
    int type;
} CurrentModeType__InputsType <optimize=false>;

typedef struct
{
    CurrentModeType__InputsType inputs;
} CurrentModeType <optimize=false>;

typedef struct
{
    int teamID;
    unsigned int progressionRank;
} ProgressionRank__InputsType <optimize=false>;

typedef struct
{
    ProgressionRank__InputsType inputs;
} ProgressionRank <optimize=false>;

typedef struct
{
    ushort objectID;
    FSkip(2);
    unsigned int adaptationID;
} MultiplayerAdaptationNode <optimize=false>;

typedef struct
{
    byte value;
} NewGamePlus__InputsType <optimize=false>;

typedef struct
{
    NewGamePlus__InputsType inputs;
} NewGamePlus <optimize=false>;

typedef struct
{
} AGPlayerClassTotalsNode__InputsType <optimize=false>;

typedef struct
{
    AGPlayerClassTotalsNode__InputsType inputs;
} AGPlayerClassTotalsNode <optimize=false>;

typedef struct
{
    float tensionValue;
} AGSetTensionNode__InputsType <optimize=false>;

typedef struct
{
    ushort worldStateVarIndex;
    FSkip(2);
    AGSetTensionNode__InputsType inputs;
} AGSetTensionNode <optimize=false>;

typedef struct
{
} AGSecuritySystemNode__InputsType <optimize=false>;

typedef struct
{
    ushort worldStateVarIndex;
    FSkip(-2);
    AGSecuritySystemNode__InputsType inputs;
} AGSecuritySystemNode <optimize=false>;

typedef struct
{
    byte getGameDifficulty;
} GameWorld_GetDifficulty__InputsType <optimize=false>;

typedef struct
{
    ubyte category : 2;
    byte _Bitfieldpadding3 : 6;
    GameWorld_GetDifficulty__InputsType inputs;
} GameWorld_GetDifficulty <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
} GameWorld_OnDifficultyChanged__InputsType <optimize=false>;

typedef struct
{
    byte outputOnInit;
    byte enabled;
    ubyte category : 2;
    byte _Bitfieldpadding5 : 6;
    GameWorld_OnDifficultyChanged__InputsType inputs;
} GameWorld_OnDifficultyChanged <optimize=false>;

typedef struct
{
} GeneratorChangeSettingsNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int dynamicSpawnerUnitId;
    PlacementPath dynamicSpawnerId;
    byte overrideSpawnSettings;
    FSkip(3);
    float spawnMaxDist;
    byte overrideDespawnSettings;
    FSkip(3);
    float despawnMinDist;
    FSkip(-52);
    GeneratorChangeSettingsNode__InputsType inputs;
} GeneratorChangeSettingsNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    uquad startAtClosestNodeOfID;
    int stopUsing;
    int stopAtNextNode;
    int stopAtSpecifiedNode;
    byte _continue;
    byte followTarget;
    FSkip(2);
    uquad followTargetID;
    byte reverseDirection;
} HelicopterSetWaypointNode__InputsType <optimize=false>;

typedef struct
{
    int loop;
    int start;
    int order;
} PathFollowSpec <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    HelicopterSetWaypointNode__InputsType inputs;
    FSkip(3);
    PlacementPath waypointSetPath;
    int startNode;
    PlacementPath startAtClosestNodeOfDefaultID;
    byte transitionToStartNode;
    FSkip(3);
    PathFollowSpec pathfollowSpec;
    byte followTarget;
    FSkip(3);
    PlacementPath followTargetDefaultID;
    byte reverseDirection;
} HelicopterSetWaypointNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad helicopterPlacementID;
    uquad lookAtTargetPlacementID;
    int clearLookAtTarget;
} HelicopterSetLookAtTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath helicopterPlacementDefaultID;
    PlacementPath lookAtTargetPlacementDefaultID;
    byte tilt;
    FSkip(3);
    HelicopterSetLookAtTargetNode__InputsType inputs;
} HelicopterSetLookAtTargetNode <optimize=false>;

typedef struct
{
    byte give;
    FSkip(7);
    uquad animalPlacementID;
    uquad hmPlacementID;
} HMGiveInstanceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath animalPlacementDefaultID;
    PlacementPath hmPlacementDefaultID;
    HMGiveInstanceNode__InputsType inputs;
} HMGiveInstanceNode <optimize=false>;

typedef struct
{
    byte spawn;
    byte take;
    FSkip(6);
    uquad hmPlacementID;
} HMTakeInstanceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath hmPlacementDefaultID;
    HMTakeInstanceNode__InputsType inputs;
    ushort objectToPlace;
    FSkip(6);
    Ref objectNameRef;
    if (CanSeekTo(objectNameRef))
    {
        SeekToRef(objectNameRef);
        string objectName;
        ReturnFromRef();
    }
} HMTakeInstanceNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad hmPlacementID;
} HMHowManyNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath hmPlacementDefaultID;
    HMHowManyNode__InputsType inputs;
    ushort objectToPlace;
    FSkip(6);
    Ref objectNameRef;
    if (CanSeekTo(objectNameRef))
    {
        SeekToRef(objectNameRef);
        string objectName;
        ReturnFromRef();
    }
} HMHowManyNode <optimize=false>;

typedef struct
{
    byte scare;
    byte despawn;
    FSkip(2);
    float despawnAfterTime;
    byte disable;
    byte resume;
    FSkip(2);
    float enableAfterTime;
    uquad hmPlacementID;
} HMScareAndDisableNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath hmPlacementDefaultID;
    HMScareAndDisableNode__InputsType inputs;
    float threat;
    byte ambientThreat;
} HMScareAndDisableNode <optimize=false>;

typedef struct
{
    int inputSignal;
} DeviceRouter__InputsType <optimize=false>;

typedef struct
{
    DeviceRouter__InputsType inputs;
} DeviceRouter <optimize=false>;

typedef struct
{
    int controller;
    byte leftStick;
    FSkip(3);
    uquad placementID;
} StickToWorld__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    StickToWorld__InputsType inputs;
} StickToWorld <optimize=false>;

typedef struct
{
    uquad playerID;
    float minConeAngle;
    float maxConeAngle;
    float minDeflection;
    float maxDeflection;
} StickZone__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    StickZone__InputsType inputs;
    byte leftStick;
    byte characterRelative;
    byte disableOnStart;
} StickZone <optimize=false>;

typedef struct
{
    byte disableOnSuccess;
    FSkip(7);
    uquad playerID;
} Input_CheckAnyButtonPressed__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Input_CheckAnyButtonPressed__InputsType inputs;
    byte checkInputDPad;
    byte checkInputLeftShoulders;
    byte checkInputRightShoulders;
    byte checkInputFaceButtons;
    byte checkInputLeftStick;
    byte checkInputRightStick;
} Input_CheckAnyButtonPressed <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    byte buttonOn;
} SetAction__InputsButton <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float analogValue;
} SetAction__InputsAnalog <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float worldDir[3];
} SetAction__InputsWorldDir <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float destination[3];
} SetAction__InputsDestination <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float relativeDir[3];
} SetAction__InputsRelativeDir <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    byte buttonOn;
    FSkip(3);
    float analogValue;
} SetAction__InputsButtonAnalog <optimize=false>;

typedef union
{
    SetAction__InputsButton button;
    SetAction__InputsAnalog analog;
    SetAction__InputsWorldDir worldDir;
    SetAction__InputsDestination destination;
    SetAction__InputsRelativeDir relativeDir;
    SetAction__InputsButtonAnalog buttonAnalog;
} SetAction__InputsType;

typedef struct
{
    PlacementPath placementDefaultID;
    unsigned int inputActionType;
    int inputValueType;
    SetAction__InputsType inputs;
} SetAction <optimize=false>;

typedef struct
{
    int stickType;
    char angleType;
    FSkip(3);
    float minMagnitude;
    float tickOutputAngle;
    float averageTime;
    byte resetOnSwitch;
    byte trigger30hz;
} Input_StickRotateTracker__RotateTrackerParams <optimize=false>;

typedef struct
{
    int controller;
} Input_StickRotateTracker__InputsType <optimize=false>;

typedef struct
{
    Input_StickRotateTracker__RotateTrackerParams trackParms;
    FSkip(2);
    Input_StickRotateTracker__InputsType inputs;
} Input_StickRotateTracker <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int inputAction;
} Input_CheckRequestedInputAction__Input_Query <optimize=false>;

typedef struct
{
    uquad playerID;
} Input_CheckRequestedInputAction__Input_Get <optimize=false>;

typedef union
{
    Input_CheckRequestedInputAction__Input_Query querySeizeInputAction;
    Input_CheckRequestedInputAction__Input_Query queryISSInputAction;
    Input_CheckRequestedInputAction__Input_Query queryInteractInputAction;
    Input_CheckRequestedInputAction__Input_Get getSeizeInputAction;
    Input_CheckRequestedInputAction__Input_Get getISSInputAction;
    Input_CheckRequestedInputAction__Input_Get getInteractInputAction;
} Input_CheckRequestedInputAction__InputsType;

typedef struct
{
    PlacementPath playerIDDefault;
    int type;
    FSkip(4);
    Input_CheckRequestedInputAction__InputsType inputs;
} Input_CheckRequestedInputAction <optimize=false>;

typedef struct
{
    uquad playerID;
} Input_DisableInputActionTypes__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    int type;
    FSkip(4);
    Input_DisableInputActionTypes__InputsType inputs;
    unsigned int nInputActionTypeListCnt;
    unsigned int inputActionToKeepEnabled;
    ubyte inputActionTypeList[1];
} Input_DisableInputActionTypes <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int inputAction;
} Input_IsInputActionEnabled__Input_Actions <optimize=false>;

typedef struct
{
    uquad playerID;
    ubyte actionType;
} Input_IsInputActionEnabled__Input_Type <optimize=false>;

typedef union
{
    Input_IsInputActionEnabled__Input_Actions isInputActionEnabled;
    Input_IsInputActionEnabled__Input_Type isInputActionTypeEnabled;
} Input_IsInputActionEnabled__InputsType;

typedef struct
{
    int type;
    FSkip(4);
    Input_IsInputActionEnabled__InputsType inputs;
} Input_IsInputActionEnabled <optimize=false>;

typedef struct
{
    byte disableOnStart;
} Input_GetAction__Options_Auto <optimize=false>;

typedef struct
{
} Input_GetAction__Options_Manual <optimize=false>;

typedef union
{
    Input_GetAction__Options_Auto getActionAuto;
    Input_GetAction__Options_Manual getActionManual;
} Input_GetAction__GetAction_Options;

typedef struct
{
    uquad playerID;
} Input_GetAction__InputsType_Auto <optimize=false>;

typedef struct
{
    uquad playerID;
} Input_GetAction__InputsType_Manual <optimize=false>;

typedef union
{
    Input_GetAction__InputsType_Auto getActionAuto;
    Input_GetAction__InputsType_Manual getActionManual;
} Input_GetAction__InputsType;

typedef struct
{
    PlacementPath playerIDDefault;
    int getActionMode;
    Input_GetAction__GetAction_Options options;
    FSkip(3);
    unsigned int inputActionType;
    byte useUIInputController;
    FSkip(3);
    Input_GetAction__InputsType inputs;
} Input_GetAction <optimize=false>;

typedef struct
{
    uquad playerID;
} Input_DisableAction__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Input_DisableAction__InputsType inputs;
    unsigned int nInputActionListCnt;
    unsigned int inputActionList[1];
} Input_DisableAction <optimize=false>;

typedef struct
{
    byte bVerifiedByMP;
} Instance1stLocalPlayerIDNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_HasAuthority__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_HasAuthority__InputsType inputs;
} Instance_HasAuthority <optimize=false>;

typedef union
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReferenceWithContext <optimize=false>;

typedef struct
{
    Ref descRef;
    if (CanSeekTo(descRef))
    {
        SeekToRef(descRef);
        string desc;
        ReturnFromRef();
    }
    PlacementPath placementDefault;
    ModelBoneOrMarkerReferenceWithContext boneMarker;
    byte triggerImmediately;
    FSkip(3);
    unsigned int fxa;
    byte fxaIsOverridable;
    FSkip(3);
    Ref fxRef;
    if (CanSeekTo(fxRef))
    {
        SeekToRef(fxRef);
        fx _fx;
        ReturnFromRef();
    }
} InstanceFXNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
} Instance_CheckCharacterClass__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    unsigned int class;
    Instance_CheckCharacterClass__InputsType inputs;
} Instance_CheckCharacterClass <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(3);
    float scale;
    uquad placementID;
} InstanceSetUniformScaleNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceSetUniformScaleNode__InputsType inputs;
} InstanceSetUniformScaleNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(3);
    float scale[3];
    uquad placementID;
} InstanceSetNonuniformScaleNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceSetNonuniformScaleNode__InputsType inputs;
} InstanceSetNonuniformScaleNode <optimize=false>;

typedef struct
{
} Instance_ComparePlacementIDsNode__InputsType <optimize=false>;

typedef struct
{
    Instance_ComparePlacementIDsNode__InputsType inputs;
} Instance_ComparePlacementIDsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float position[3];
    float rotation[3];
} InstancePosNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementDefault;
    FSkip(4);
    InstancePosNode__InputsType inputs;
    byte useLocalTransforms;
    byte outputOnInit;
    byte outputIfChanged;
    byte forceRebuildTransformsPlayer;
    byte forceRebuildTransforms;
    byte simpleMove;
    byte notifyTeleport;
    byte relocateCloth;
    byte relocateHair;
} InstancePosNode <optimize=false>;

typedef struct
{
    uquad placementID;
    int segment;
} InstanceGetPosNode__InputsType <optimize=false>;

typedef union
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReferenceWithObject__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReferenceWithObject__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReferenceWithObject <optimize=false>;

typedef struct
{
    InstanceGetPosNode__InputsType inputs;
    PlacementPath placementDefault;
    byte useBoneMarker;
    byte useZoneMarker;
    ModelBoneOrMarkerReferenceWithObject boneMarker;
    byte useOldTransform;
    byte outputOnInit;
    PlacementPath zoneMarkerID;
} InstanceGetPosNode <optimize=false>;

typedef struct
{
    uquad placement;
} AGInstanceGetAxis__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    AGInstanceGetAxis__InputsType inputs;
} AGInstanceGetAxis <optimize=false>;

typedef struct
{
    uquad placementID;
    float offset[3];
} AGInstance_GetOffset__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AGInstance_GetOffset__InputsType inputs;
} AGInstance_GetOffset <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad otherPlacementID;
} GetHeadingToOtherInstanceNode__Input_Instance <optimize=false>;

typedef struct
{
    uquad placementID;
    float otherPos[3];
} GetHeadingToOtherInstanceNode__Input_Pos <optimize=false>;

typedef union
{
    GetHeadingToOtherInstanceNode__Input_Instance instanceToInstance;
    GetHeadingToOtherInstanceNode__Input_Pos instanceToPos;
} GetHeadingToOtherInstanceNode__InputsType;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath otherPlacementDefaultID;
    int type;
    FSkip(4);
    GetHeadingToOtherInstanceNode__InputsType inputs;
    byte useBoneMarker;
    ModelBoneOrMarkerReferenceWithContext boneMarker;
    byte useOldTransform;
    byte useBoneMarkerOther;
    ModelBoneOrMarkerReferenceWithContext boneMarkerOther;
    byte useOldTransformOther;
} GetHeadingToOtherInstanceNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float position[3];
    float rotation[3];
    byte resetVelocity;
    byte unlinkFromParent;
} InstanceTeleportNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    InstanceTeleportNode__InputsType inputs;
    byte forceRebuildTransformsPlayer;
    byte forceRebuildTransforms;
    byte cancelInteract;
    byte streamIntoNewUnit;
    byte hostSetsAllInstances;
    FSkip(1);
    ushort currentUnit;
    FSkip(2);
    PlacementPath currentUnitSignalToNewUnit;
    byte wipeProxyDataHack;
} InstanceTeleportNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float forwardVector[3];
    float globalPoint[3];
} InstanceAlignToPointNode__InputsType_Instant <optimize=false>;

typedef struct
{
    uquad placementID;
    float forwardVector[3];
    float globalPoint[3];
    float timeSecs;
} InstanceAlignToPointNode__InputsType_TimeBased_Secs <optimize=false>;

typedef struct
{
    uquad placementID;
    float forwardVector[3];
    float globalPoint[3];
    int timeFrames;
} InstanceAlignToPointNode__InputsType_TimeBased_Frame <optimize=false>;

typedef struct
{
    uquad placementID;
    float forwardVector[3];
    float globalPoint[3];
    float velDegs;
} InstanceAlignToPointNode__InputsType_RotVelBased_Deg <optimize=false>;

typedef struct
{
    uquad placementID;
    float forwardVector[3];
    float globalPoint[3];
    float velRads;
} InstanceAlignToPointNode__InputsType_RotVelBased_Rad <optimize=false>;

typedef union
{
    InstanceAlignToPointNode__InputsType_Instant alignInstant;
    InstanceAlignToPointNode__InputsType_TimeBased_Secs alignTimeBasedSecs;
    InstanceAlignToPointNode__InputsType_TimeBased_Frame alignTimeBasedFrame;
    InstanceAlignToPointNode__InputsType_RotVelBased_Deg alignRotVelBasedDeg;
    InstanceAlignToPointNode__InputsType_RotVelBased_Rad alignRotVelBasedRad;
} InstanceAlignToPointNode__InputsType;

typedef struct
{
    PlacementPath placementDefaultID;
    byte debugDraw;
    FSkip(7);
    InstanceAlignToPointNode__InputsType inputs;
    byte limitToPlane;
    FSkip(3);
    int limitType;
    float limitNormal[3];
    int alignType;
} InstanceAlignToPointNode <optimize=false>;

typedef struct
{
    byte simOn;
    byte simOff;
    byte invalidate;
    byte reset;
    FSkip(4);
    uquad placementID;
} InstanceClothControlNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    byte propagateToChildren;
    InstanceClothControlNode__InputType inputs;
} InstanceClothControlNode <optimize=false>;

typedef struct
{
    uquad placementID;
    int configID;
} InstanceSwitchClothConfigNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceSwitchClothConfigNode__InputsType inputs;
} InstanceSwitchClothConfigNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceResetClothNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceResetClothNode__InputsType inputs;
} InstanceResetClothNode <optimize=false>;

typedef struct
{
    byte set;
    FSkip(7);
    uquad placementID;
    uquad warpToPlacementID;
} InstanceWarpAttachNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath warpToPlacementDefaultID;
    InstanceWarpAttachNode__InputType inputs;
    ModelBoneOrMarkerReferenceWithContext boneMarker;
    ModelBoneOrMarkerReferenceWithContext warpToBoneMarker;
    byte dynamicLink;
    byte ignoreXRotation;
    byte ignoreYRotation;
    byte ignoreZRotation;
} InstanceWarpAttachNode <optimize=false>;

typedef struct
{
    byte set;
    FSkip(7);
    uquad placementID;
} InstanceWarpDetachNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceWarpDetachNode__InputType inputs;
} InstanceWarpDetachNode <optimize=false>;

typedef struct
{
    byte set;
    FSkip(7);
    uquad placementID;
    uquad bindToPlacementID;
} InstanceSkeletonBindNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath bindToPlacementDefaultID;
    byte matchPoseNow;
    InstanceSkeletonBindNode__InputType inputs;
} InstanceSkeletonBindNode <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
    FSkip(6);
    uquad placementID;
    uquad followPlacementID;
    float minZFollow;
    float maxZFollow;
    int localPositionOffset[3];
    float speed;
} InstanceFollowTargetNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    byte autoEnable;
    FSkip(3);
    float speed;
    byte enablePhysics;
    byte rotate;
    FSkip(2);
    float rotateTime;
    float rotatePitchCorrection;
    byte _2DFollow;
    byte rebuildTransforms;
    byte useNamedValues;
    InstanceFollowTargetNode__InputType inputs;
} InstanceFollowTargetNode <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalMovesetType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalClusterType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalStateType <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceSetAnimGoal__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AnimGraphGoalMovesetType goalMoveset;
    FSkip(4);
    AnimGraphGoalClusterType goalCluster;
    FSkip(4);
    AnimGraphGoalStateType goal;
    FSkip(4);
    InstanceSetAnimGoal__InputsType inputs;
} InstanceSetAnimGoal <optimize=false>;

typedef struct
{
    byte ownerUpdate;
} InstanceOwnerPlayerNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float vectorIn[3];
} InstanceCoordinatesNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceCoordinatesNode__InputsType inputs;
    char type;
} InstanceCoordinatesNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_CheckCharacter__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_CheckCharacter__InputsType inputs;
    unsigned int characterProfileIndex;
} Instance_CheckCharacter <optimize=false>;

typedef struct
{
    byte set;
    FSkip(3);
    float position[3];
    float range;
} InstanceAllInRangeNode__InputType <optimize=false>;

typedef struct
{
    InstanceAllInRangeNode__InputType inputs;
} InstanceAllInRangeNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceDebugNameNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceDebugNameNode__InputType inputs;
    byte outputOnInit;
} InstanceDebugNameNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceObjectNameNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceObjectNameNode__InputType inputs;
    byte outputOnInit;
} InstanceObjectNameNode <optimize=false>;

typedef struct
{
    PlacementPath instanceID;
} UnitInstanceIDNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float timeTillDeath;
    float fadeInTime;
} FadeOutNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    FadeOutNode__InputsType inputs;
} FadeOutNode <optimize=false>;

typedef struct
{
    uquad placementID;
} DestroyNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    byte doNotSave;
    byte setDeadDead;
    byte destroySelf;
    FSkip(5);
    DestroyNode__InputsType inputs;
} DestroyNode <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int modelNum;
} AGInstanceSetModel__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AGInstanceSetModel__InputsType inputs;
} AGInstanceSetModel <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
} HealthAndDamageNode__Input_Base <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    int health;
    byte overrideHealthStates;
} HealthAndDamageNode__Input_Int <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    ActionGraphIntroID blameInstanceID;
    int damageTypeInstantKill;
    uquad attacker;
    unsigned int hPrimID;
} HealthAndDamageNode__Input_BlameInstance <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    int damage;
    int damageType;
    uquad attacker;
    byte overrideHealthStates;
    byte indirectDamage;
    FSkip(2);
    float damageDir[3];
    int damagedHprimNum;
    float damageThrowEnergy;
    byte useRNodeForDamageRelativeDir;
} HealthAndDamageNode__Input_Damage <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    int damage;
    int damageType;
    uquad attacker;
    unsigned int numTicks;
    float secondsPerTick;
} HealthAndDamageNode__Input_DamageOverTime <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    byte _bool;
} HealthAndDamageNode__Input_Bool <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    float _float;
} HealthAndDamageNode__Input_InvincibilityTime <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    int breath;
} HealthAndDamageNode__Input_Breath <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
    float _float;
} HealthAndDamageNode__Input_Float <optimize=false>;

typedef union
{
    HealthAndDamageNode__Input_Base getHealth;
    HealthAndDamageNode__Input_Base getHealthPct;
    HealthAndDamageNode__Input_Base getMaxHealth;
    HealthAndDamageNode__Input_Int setHealth;
    HealthAndDamageNode__Input_Int setHealthPct;
    HealthAndDamageNode__Input_Int heal;
    HealthAndDamageNode__Input_Int healPct;
    HealthAndDamageNode__Input_BlameInstance instantKill;
    HealthAndDamageNode__Input_Damage applyDamage;
    HealthAndDamageNode__Input_DamageOverTime applyDamageOverTime;
    HealthAndDamageNode__Input_Bool disableHealth;
    HealthAndDamageNode__Input_Base getHealthStatePct;
    HealthAndDamageNode__Input_Int setHealthStatePct;
    HealthAndDamageNode__Input_Bool disableHealthRegen;
    HealthAndDamageNode__Input_Base getHealthState;
    HealthAndDamageNode__Input_Base getMaxHealthState;
    HealthAndDamageNode__Input_Base isAlive;
    HealthAndDamageNode__Input_InvincibilityTime setInvincibility;
    HealthAndDamageNode__Input_Base getBreathPercentage;
    HealthAndDamageNode__Input_Breath setBreathPercentage;
    HealthAndDamageNode__Input_Base getBreathValue;
    HealthAndDamageNode__Input_Float setBreathValue;
} HealthAndDamageNode__InputsType;

typedef struct
{
    PlacementPath attackerDefault;
    PlacementPath placementDefault;
    int type;
    FSkip(4);
    HealthAndDamageNode__InputsType inputs;
    FSkip(3);
    unsigned int damageDisbursement;
    int damageArmorOverride;
    byte doNotAssignBlame;
} HealthAndDamageNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_HealthState__Input_Base <optimize=false>;

typedef union
{
    Instance_HealthState__Input_Base setHealthState;
    Instance_HealthState__Input_Base isHealthState;
    Instance_HealthState__Input_Base enableHealthState;
    Instance_HealthState__Input_Base disableHealthState;
} Instance_HealthState__InputsType;

typedef struct
{
    byte isInjuredStateReference;
    FSkip(3);
    unsigned int groupID;
    unsigned int groupIDInjured;
} HealthStateReferenceUnion__ComponentObjectType <optimize=false>;

typedef struct
{
    byte isInjuredStateReference;
    FSkip(3);
    int groupID;
} HealthStateReferenceUnion__PlayerType <optimize=false>;

typedef union
{
    HealthStateReferenceUnion__ComponentObjectType componentObject;
    HealthStateReferenceUnion__PlayerType player;
} HealthStateReferenceUnion;

typedef struct
{
    int objectType;
    HealthStateReferenceUnion healthStateRef;
} HealthStateReference <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int type;
    FSkip(4);
    Instance_HealthState__InputsType inputs;
    HealthStateReference healthStateReference;
} Instance_HealthState <optimize=false>;

typedef struct
{
    uquad placementID;
    ushort unitID;
} AGInstanceGiveBirth__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    AGInstanceGiveBirth__InputsType inputs;
} AGInstanceGiveBirth <optimize=false>;

typedef struct
{
    uquad placementID;
    byte show;
} AGInstanceHideUnhide__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementDefaultID;
    FSkip(4);
    AGInstanceHideUnhide__InputsType inputs;
    byte bAffectProcessing;
    byte bAffectCollision;
    byte bAffectChildrenOnly;
    int affectChildrenType;
} AGInstanceHideUnhide <optimize=false>;

typedef struct
{
    uquad placementID;
} AGInstancePaperdoll__InputsType <optimize=false>;

typedef struct
{
    char paperdollCategory;
    FSkip(1);
    ushort unit;
    FSkip(4);
    PlacementPath placementDefaultID;
    FSkip(4);
    AGInstancePaperdoll__InputsType inputs;
} AGInstancePaperdoll <optimize=false>;

typedef struct
{
    uquad instancePlacementID;
} AGInstanceReset__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    AGInstanceReset__InputsType inputs;
} AGInstanceReset <optimize=false>;

typedef struct
{
    uint bit01 : 1;
    uint bit02 : 1;
    uint bit03 : 1;
    uint bit04 : 1;
    uint bit05 : 1;
    uint bit06 : 1;
    uint bit07 : 1;
    uint bit08 : 1;
    uint bit09 : 1;
    uint bit10 : 1;
    uint bit11 : 1;
    uint bit12 : 1;
    uint bit13 : 1;
    uint bit14 : 1;
    uint bit15 : 1;
    uint bit16 : 1;
    uint bit17 : 1;
    uint bit18 : 1;
    uint bit19 : 1;
    uint bit20 : 1;
    uint bit21 : 1;
    uint bit22 : 1;
    uint bit23 : 1;
    uint bit24 : 1;
    uint bit25 : 1;
    uint bit26 : 1;
    uint bit27 : 1;
    uint bit28 : 1;
    uint bit29 : 1;
    uint bit30 : 1;
    uint bit31 : 1;
    uint bit32 : 1;
} ActionGraphBitFlags <optimize=false>;

typedef struct
{
    uint bit01 : 1;
    uint bit02 : 1;
    uint bit03 : 1;
    uint bit04 : 1;
    uint bit05 : 1;
    uint bit06 : 1;
    uint bit07 : 1;
    uint bit08 : 1;
    uint bit09 : 1;
    uint bit10 : 1;
    uint bit11 : 1;
    uint bit12 : 1;
    uint bit13 : 1;
    uint bit14 : 1;
    uint bit15 : 1;
    uint bit16 : 1;
    uint bit17 : 1;
    uint bit18 : 1;
    uint bit19 : 1;
    uint bit20 : 1;
    uint bit21 : 1;
    uint bit22 : 1;
    uint bit23 : 1;
    uint bit24 : 1;
    uint bit25 : 1;
    uint bit26 : 1;
    uint bit27 : 1;
    uint bit28 : 1;
    uint bit29 : 1;
    uint bit30 : 1;
    uint bit31 : 1;
    uint bit32 : 1;
} ActionGraphExtraBitFlags <optimize=false>;

typedef struct
{
    uquad placementID;
    byte show;
    FSkip(3);
    ActionGraphBitFlags drawGroupFlags;
    ActionGraphExtraBitFlags extraDrawGroupFlags;
} AGInstanceDrawGroups__InputsType <optimize=false>;

typedef struct
{
    char caption[100];
    ushort unit;
    FSkip(2);
    PlacementPath placementDefaultID;
    AGInstanceDrawGroups__InputsType inputs;
} AGInstanceDrawGroups <optimize=false>;

typedef struct
{
    uquad placementID;
    int collisionID;
} CollisionIDNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    byte overrideProxy;
    FSkip(3);
    int regularProxyOverride;
    int coverProxyOverride;
    int interactProxyOverride;
    int incapacitatedProxyOverride;
    FSkip(4);
    CollisionIDNode__InputsType inputs;
} CollisionIDNode <optimize=false>;

typedef struct
{
    ActionGraphIntroID placementID;
} CollisionRefNode__InputsType <optimize=false>;

typedef union
{
    unsigned int box;
    unsigned int capsule;
    unsigned int sphere;
    unsigned int geom;
} PrimRef;

typedef struct
{
    int primType;
    PrimRef primRef;
    unsigned int zoneContext;
} CollisionSelect <optimize=false>;

typedef struct
{
    CollisionRefNode__InputsType inputs;
    PlacementPath placementDefault;
    CollisionSelect collisionRef;
} CollisionRefNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(3);
    float scale;
    uquad placementID;
} CollisionScaleNode__InputsType <optimize=false>;

typedef struct
{
    CollisionScaleNode__InputsType inputs;
    PlacementPath placementDefault;
    CollisionSelect collisionRef;
} CollisionScaleNode <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad blamePlacementID;
    int burnMeshConfig;
    byte suppress;
    byte collideWithProbes;
    FSkip(2);
    float heatRate;
    float position[3];
    float radius;
} InstanceFlammableNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    PlacementPath blamePlacementDefault;
    InstanceFlammableNode__InputsType inputs;
    byte sendPosition;
} InstanceFlammableNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InstanceFlammablePropsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceFlammablePropsNode__InputsType inputs;
} InstanceFlammablePropsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float setFuelIn;
    float setFuelDepletionRateIn;
    float setHeatEmittedIn;
    float setHeatResistanceIn;
    float setCoolingRateIn;
    int setFireDamageIn;
    float overrideRadiusIn;
    int sphereIndexIn;
    uquad blameInstanceIn;
} InstanceSetFlammablePropsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceSetFlammablePropsNode__InputsType inputs;
} InstanceSetFlammablePropsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int boneSetID;
    ushort boneSetType;
    FSkip(2);
    float x;
    float y;
    float z;
    float w;
    float weight;
    byte setID;
    byte setType;
    byte useX;
    byte useY;
    byte useZ;
    byte useW;
} InstanceBoneParamNode__InputType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementDefaultID;
    FSkip(4);
    InstanceBoneParamNode__InputType inputs;
} InstanceBoneParamNode <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalOverlayType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalPortableType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalInteractType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalAdvertiseType <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    unsigned int hash;
} AnimGraphGoalHostedStartType <optimize=false>;

typedef union
{
    AnimGraphGoalMovesetType graphGoalMoveset;
    AnimGraphGoalClusterType graphGoalCluster;
    AnimGraphGoalStateType graphGoalState;
    AnimGraphGoalOverlayType graphGoalOverlay;
    AnimGraphGoalPortableType graphGoalMainhand;
    AnimGraphGoalPortableType graphGoalOffhand;
    AnimGraphGoalInteractType graphGoalInteract;
    AnimGraphGoalAdvertiseType graphGoalAdvertise;
    AnimGraphGoalHostedStartType graphGoalHostedStart;
    AnimGraphGoalStateType graphGoalPredictedState;
    AnimGraphGoalMovesetType graphGoalMovesetPrevious;
    AnimGraphGoalClusterType graphGoalClusterPrevious;
    AnimGraphGoalStateType graphGoalStatePrevious;
    AnimGraphGoalOverlayType graphGoalOverlayPrevious;
    AnimGraphGoalPortableType graphGoalMainhandPrevious;
    AnimGraphGoalPortableType graphGoalOffhandPrevious;
    AnimGraphGoalInteractType graphGoalInteractPrevious;
    AnimGraphGoalAdvertiseType graphGoalAdvertisePrevious;
    AnimGraphGoalHostedStartType graphGoalHostedStartPrevious;
    AnimGraphGoalStateType graphGoalPredictedStatePrevious;
} AnimGraphGoalRTEnums;

typedef struct
{
    int animGoal;
    FSkip(4);
    uquad placementID;
} InstanceIsAnimGoal__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int animGoalType;
    FSkip(4);
    AnimGraphGoalRTEnums animGoalCondition;
    InstanceIsAnimGoal__InputsType inputs;
} InstanceIsAnimGoal <optimize=false>;

typedef struct
{
    int animGoal;
    FSkip(4);
    uquad placementID;
    byte disable;
} InstanceAnimGoalChanged__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int animGoalType;
    FSkip(4);
    AnimGraphGoalRTEnums animGoalCondition;
    InstanceAnimGoalChanged__InputsType inputs;
} InstanceAnimGoalChanged <optimize=false>;

typedef struct
{
    uquad a;
} InstanceWaitUntilAlive__Inputs_One <optimize=false>;

typedef struct
{
    uquad a;
    uquad b;
} InstanceWaitUntilAlive__Inputs_Two <optimize=false>;

typedef struct
{
    uquad a;
    uquad b;
    uquad c;
} InstanceWaitUntilAlive__Inputs_Three <optimize=false>;

typedef struct
{
    uquad a;
    uquad b;
    uquad c;
    uquad d;
} InstanceWaitUntilAlive__Inputs_Four <optimize=false>;

typedef union
{
    InstanceWaitUntilAlive__Inputs_One one;
    InstanceWaitUntilAlive__Inputs_Two two;
    InstanceWaitUntilAlive__Inputs_Three three;
    InstanceWaitUntilAlive__Inputs_Four four;
} InstanceWaitUntilAlive__InputsType;

typedef struct
{
    PlacementPath aDefault;
    PlacementPath bDefault;
    PlacementPath cDefault;
    PlacementPath dDefault;
    int numInstances;
    byte pauseGame;
    FSkip(3);
    InstanceWaitUntilAlive__InputsType inputs;
} InstanceWaitUntilAlive <optimize=false>;

typedef union
{
    ushort fragment;
} HostedAnimation__HostedAnimReference__HostedAnimReferenceUnion;

typedef struct
{
    ushort referenceType;
    HostedAnimation__HostedAnimReference__HostedAnimReferenceUnion index;
} HostedAnimation__HostedAnimReference <optimize=false>;

typedef struct
{
    unsigned int object;
    HostedAnimation__HostedAnimReference animReference;
} HostedAnimation <optimize=false>;

typedef struct
{
    uquad placementID;
    float setIntensity;
    unsigned int setColor;
    float setRadius;
    unsigned int setLightGroup;
} InstanceDynamicLightNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceDynamicLightNode__InputsType inputs;
} InstanceDynamicLightNode <optimize=false>;

typedef struct
{
    uquad placementID;
    int paramIndex;
    float color[3];
    float alpha;
} SetMaterialParams__InputsType <optimize=false>;

typedef struct
{
    ushort objectLoadDep;
    FSkip(2);
    unsigned int modelSlotIndex;
} ModelSlotRefByIndex <optimize=false>;

typedef union
{
    unsigned int byType;
    ModelSlotRefByIndex byIndex;
} ModelSlotRefUnion;

typedef struct
{
    int refType;
    ModelSlotRefUnion refData;
} ModelSlotRef <optimize=false>;

typedef struct
{
    byte saturate;
    FSkip(1);
    ushort unit;
    PlacementPath placementDefaultID;
    FSkip(4);
    SetMaterialParams__InputsType inputs;
    byte writeX;
    byte writeY;
    byte writeZ;
    byte writeW;
    byte restrictToSlot;
    FSkip(3);
    ModelSlotRef slotRef;
} SetMaterialParams <optimize=false>;

typedef struct
{
    uquad placementID;
    int paramIndex;
} SetMaterialTextureParam__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementDefaultID;
    byte restrictToSlot;
    FSkip(3);
    ModelSlotRef slotRef;
    FSkip(4);
    SetMaterialTextureParam__InputsType inputs;
    FSkip(4);
    Ref textureRef;
} SetMaterialTextureParam <optimize=false>;

typedef struct
{
    float firstFrame;
    float lastFrame;
    float frameOffset;
    float speed;
    float scale;
} SetVCacheParams__InputsType <optimize=false>;

typedef struct
{
    int attachType;
    PlacementPath placementPath;
} SetVCacheParams__VCacheAttachment <optimize=false>;

typedef union
{
    CollisionSelect collisionPrimitive;
    SetVCacheParams__VCacheAttachment attachment;
} SetVCacheParams__VCacheMappedItemTypeUnion;

typedef struct
{
    int vCacheItemType;
    SetVCacheParams__VCacheMappedItemTypeUnion vCacheMappedItem;
    unsigned int vCacheBodyIndex;
} SetVCacheParams__VCacheMappedItem <optimize=false>;

typedef struct
{
    unsigned int numberOfBodies;
    unsigned int numberOfPositions;
    unsigned int data[1];
} SetVCacheParams__VCacheMaterial <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    SetVCacheParams__InputsType inputs;
    FSkip(4);
    Ref mappedItemListRef;
    ubyte mappedItemListCount;
    if (CanSeekTo(mappedItemListRef))
    {
        SeekToRef(mappedItemListRef);
        SetVCacheParams__VCacheMappedItem mappedItemList[mappedItemListCount];
        ReturnFromRef();
    }
    FSkip(3);
    SetVCacheParams__VCacheMaterial vcacheMaterial;
} SetVCacheParams <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float targetPosition[3];
    byte getOffScreenMarkerPos;
    FSkip(3);
    float offScrPosLeftOffset;
    float offScrPosRightOffset;
    float offScrPosTopOffset;
    float offScrPosBottomOffset;
    byte getScaleformCoords;
} GetTargetScreenPos__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerPlacementDefaultID;
    GetTargetScreenPos__InputsType inputs;
} GetTargetScreenPos <optimize=false>;

typedef struct
{
    uquad placementID;
    float setScale;
} AGInstanceAnimTimeScale__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AGInstanceAnimTimeScale__InputsType inputs;
} AGInstanceAnimTimeScale <optimize=false>;

typedef struct
{
    unsigned int materialSwapIndex;
} Instance_MaterialSwap__MaterialSwapDataType <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_MaterialSwap__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_MaterialSwap__MaterialSwapDataType materialSwapData;
    FSkip(4);
    Instance_MaterialSwap__InputsType inputs;
} Instance_MaterialSwap <optimize=false>;

typedef struct
{
    unsigned int materialSwapIndex;
} Instance_MaterialSwapCO__MaterialSwapDataType <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_MaterialSwapCO__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_MaterialSwapCO__MaterialSwapDataType materialSwapData;
    byte swapExisting;
    FSkip(3);
    Instance_MaterialSwapCO__InputsType inputs;
} Instance_MaterialSwapCO <optimize=false>;

typedef struct
{
    Ref sourceMaterialRef;
    Ref newMaterialRef;
} Instance_SwapMaterial__MaterialSwapData <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_SwapMaterial__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementDefaultID;
    FSkip(4);
    Instance_SwapMaterial__MaterialSwapData materialSwapData;
    Instance_SwapMaterial__InputsType inputs;
} Instance_SwapMaterial <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_EnableAdrenaline__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_EnableAdrenaline__InputsType inputs;
} Instance_EnableAdrenaline <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_DisableAdrenaline__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_DisableAdrenaline__InputsType inputs;
} Instance_DisableAdrenaline <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
} Instance_ForceProjectileCelebration__InputsType_Victim <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
} Instance_ForceProjectileCelebration__InputsType_Attacker <optimize=false>;

typedef union
{
    Instance_ForceProjectileCelebration__InputsType_Victim celebrationIfVictimDead;
    Instance_ForceProjectileCelebration__InputsType_Victim celebrationIfVictimHit;
    Instance_ForceProjectileCelebration__InputsType_Victim celebrationIfVictimArmorBroken;
    Instance_ForceProjectileCelebration__InputsType_Victim resetVictimCelebrationOverride;
    Instance_ForceProjectileCelebration__InputsType_Victim disableVictimCelebration;
    Instance_ForceProjectileCelebration__InputsType_Attacker celebrationIfAttackerAnyShot;
    Instance_ForceProjectileCelebration__InputsType_Attacker celebrationIfAttackerHitsTerrain;
    Instance_ForceProjectileCelebration__InputsType_Attacker celebrationIfAttackerHitsObject;
    Instance_ForceProjectileCelebration__InputsType_Attacker celebrationIfAttackerKillsObject;
    Instance_ForceProjectileCelebration__InputsType_Attacker celebrationIfAttackerBreaksObjectArmor;
    Instance_ForceProjectileCelebration__InputsType_Attacker resetAttackerCelebrationOverride;
    Instance_ForceProjectileCelebration__InputsType_Attacker disableAttackerCausingCelebration;
} Instance_ForceProjectileCelebration__InputsType;

typedef union
{
    byte b;
    byte celebrationIfVictimHit;
    byte celebrationIfVictimArmorBroken;
    byte celebrationIfAttackerAnyShot;
    byte celebrationIfAttackerHitsObject;
    byte celebrationIfAttackerKillsObject;
    byte celebrationIfAttackerBreaksObjectArmor;
} Instance_ForceProjectileCelebration__BooleanHideHack;

typedef struct
{
    PlacementPath placementDefaultID;
    int type;
    Instance_ForceProjectileCelebration__InputsType inputs;
    Instance_ForceProjectileCelebration__BooleanHideHack bIgnoreVictimPreconditon;
} Instance_ForceProjectileCelebration <optimize=false>;

typedef struct
{
    uquad sensedPlacement;
    uquad sensingPlacement;
    float setRadius;
    float setPriority;
    float setLockTime;
} AGInstanceSensibleNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath sensedPlacementDefault;
    PlacementPath sensingPlacementDefault;
    AGInstanceSensibleNode__InputsType inputs;
} AGInstanceSensibleNode <optimize=false>;

typedef struct
{
    uquad add;
    uquad remove;
    uquad checkIfIn;
    unsigned int getIndex;
} InstanceContainerNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath addDefault;
    PlacementPath removeDefault;
    PlacementPath checkIfInDefault;
    InstanceContainerNode__InputsType inputs;
    unsigned int startInstanceCount;
    PlacementPath startInstances[startInstanceCount];
} InstanceContainerNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_IsObjectID__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_IsObjectID__InputsType inputs;
    ushort objectID;
    byte checkParent;
    byte checkIntroOnFail;
} Instance_IsObjectID <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_IsPlayerID__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_IsPlayerID__InputsType inputs;
} Instance_IsPlayerID <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_IsDynamicMarkupUsed__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_IsDynamicMarkupUsed__InputsType inputs;
} Instance_IsDynamicMarkupUsed <optimize=false>;

typedef struct
{
    uquad damagedPlacementID;
    uquad queryAttackerID;
    uquad queryAttackerOwnerID;
    int queryDamageAmount;
} Instance_DamageData__InputType <optimize=false>;

typedef struct
{
    PlacementPath damagedPlacementDefaultID;
    PlacementPath queryAttackerIDDefault;
    PlacementPath queryAttackerOwnerIDDefault;
    Instance_DamageData__InputType inputs;
    int queryDamageType;
    byte treatDamageTypeNoneAsAType;
    FSkip(3);
    int queryHitReactType;
    byte treatHitReactTypeNoneAsAType;
} Instance_DamageData <optimize=false>;

typedef struct
{
    uquad projectilePlacementID;
} Projectile_GetInfo__InputType <optimize=false>;

typedef struct
{
    PlacementPath projectilePlacementDefaultID;
    Projectile_GetInfo__InputType inputs;
} Projectile_GetInfo <optimize=false>;

typedef struct
{
    int trigger;
    FSkip(4);
    uquad sourcePlacement;
    uquad targetPlacement;
    float maxDistance;
    float maxAngle;
    byte requireLineOfSight;
} AGInstanceCheckProximityToOtherInstanceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath sourcePlacementDefault;
    PlacementPath targetPlacementDefault;
    AGInstanceCheckProximityToOtherInstanceNode__InputsType inputs;
} AGInstanceCheckProximityToOtherInstanceNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float position[3];
} InstanceGetClosestBoneNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    InstanceGetClosestBoneNode__InputType inputs;
} InstanceGetClosestBoneNode <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestUnrestricted <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNumeric <optimize=false>;

typedef struct
{
    int miProperty;
    ushort miComparison;
    short pad;
    byte miNot : 1;
    byte _Bitfieldpadding3 : 7;
} SCConditionTestNumericHosted <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPhysics <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPushPull <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPortable <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPortableAnimType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPortableUsageType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestJumpMode <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInternal <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEngagement <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEngagementStatus <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEngagementObject <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInteract <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInteractRequestRequirement <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInteractEndsInstantly <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInteractMode <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInteractedType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInvestigateTargetType <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestAction <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestAnimation <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestAnimationFrames <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMovement <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestGymnasticsMove <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEdgeDropType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEdgeDropRule <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEdgeStepRule <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEdgeDeflection <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestEdgeDeflectionNumeric <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestFooting <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestStatus <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkup <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupMod <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupAngle <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupDistance <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupLookahead <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupClearance <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupAttach <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupMultiOut <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupHpoleRot <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupMovement <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupConcealmentType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestHurdleOutcome <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMarkupTargetingTag <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestGrapple <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestParaglide <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestWater <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNpc <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNpcProcess <optimize=false>;

typedef struct
{
    int miProperty;
    EnumThreatMood miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNpcThreatMood <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestUseObjectState <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
    FSkip(1);
    short miSource;
} SCConditionTestUseObjectReaction <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNpcFearLevel <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSpatialProbe <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSpatialProbeHitType <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestTunedata <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestCombat <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestAwareness <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestCombatNumeric <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestCover <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestCombatStatus <optimize=false>;

typedef struct
{
    int miProperty;
    EnumAmmoType miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestAmmo <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInventory <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestInventoryRequirement <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestWeaponLoadoutType <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int category;
    unsigned int categoryHash;
    byte miNot : 1;
    byte _Bitfieldpadding3 : 7;
} SCConditionTestCameraCategoryEnabled <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestVehicle <optimize=false>;

typedef struct
{
    int miProperty;
    EnumPlayNotification miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPlayNotificationType <optimize=false>;

typedef struct
{
    unsigned int hash;
} EnumCharacterStance <optimize=false>;

typedef struct
{
    int miProperty;
    EnumCharacterStance miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestStance <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestDamageType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestHitReactType <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestHitShapeType <optimize=false>;

typedef struct
{
    ushort mSymbolID;
    FSkip(2);
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding3 : 7;
} SCConditionTestNamedValueBool <optimize=false>;

typedef struct
{
    ushort mSymbolID;
    FSkip(2);
    float miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding3 : 7;
} SCConditionTestNamedValueScalar <optimize=false>;

typedef struct
{
    ushort mSymbolID;
    ushort mSymbolID2;
    byte miNot : 1;
    byte _Bitfieldpadding4 : 7;
} SCConditionTestNamedVlaueSymbolComp <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestObject <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestDetection <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMultiplayer <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestGameMode <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestProcess <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestProcessNumeric <optimize=false>;

typedef struct
{
    int miProperty;
    EventEnum miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestProcessAnimGraphTrigger <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestProcessInventory <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPrototype <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestPlayerTrait <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSeizeAttack <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMeleeMove <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestWeather <optimize=false>;

typedef struct
{
    unsigned int hash;
    FSkip(4);
    Ref enumFileNameRef;
    if (CanSeekTo(enumFileNameRef))
    {
        SeekToRef(enumFileNameRef);
        string enumFileName;
        ReturnFromRef();
    }
} MovesetProfile_MoveTypeEnum <optimize=false>;

typedef struct
{
    int miProperty;
    MovesetProfile_MoveTypeEnum miMoveEnum;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestMovesetProfile <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestStateTag <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int hash;
    byte miNot : 1;
    byte _Bitfieldpadding3 : 7;
} SCConditionTestAnimCompleteID <optimize=false>;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestCraftingRecipe <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSCPropertyBool <optimize=false>;

typedef struct
{
    int miProperty;
    float miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSCPropertyNumeric <optimize=false>;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestSCPropertyConditionNumeric <optimize=false>;

typedef struct
{
    int miPlatform;
    byte miNot : 1;
    byte _Bitfieldpadding1 : 7;
} SCConditionTestPlatform <optimize=false>;

typedef struct
{
    int miVrMode;
    byte miNot : 1;
    byte _Bitfieldpadding1 : 7;
} SCConditionTestVrMode <optimize=false>;

typedef struct
{
    int miProperty;
} SCConditionTestDebug <optimize=false>;

typedef struct
{
    int miProperty;
    float miComparison;
    byte miNot : 1;
    byte _Bitfieldpadding2 : 7;
} SCConditionTestNumericScalar <optimize=false>;

typedef union
{
    SCConditionTestUnrestricted unknown;
    SCConditionTestNumeric numeric;
    SCConditionTestNumericHosted numericHosted;
    SCConditionTestPhysics physics;
    SCConditionTestPushPull pushPull;
    SCConditionTestPortable portable;
    SCConditionTestPortableAnimType portableAnimType;
    SCConditionTestPortableUsageType portableUsageType;
    SCConditionTestJumpMode jumpMode;
    SCConditionTestInternal internal;
    SCConditionTestEngagement engagement;
    SCConditionTestEngagementStatus engagementStatus;
    SCConditionTestEngagementObject engagementObject;
    SCConditionTestInteract interact;
    SCConditionTestInteractRequestRequirement interactSkipsRequest;
    SCConditionTestInteractEndsInstantly interactEndsInstantly;
    SCConditionTestInteractMode interactMode;
    SCConditionTestInteractedType interactedType;
    SCConditionTestInvestigateTargetType investigateTargetType;
    SCConditionTestAction action;
    SCConditionTestAnimation animation;
    SCConditionTestAnimationFrames animationFrames;
    SCConditionTestMovement movement;
    SCConditionTestGymnasticsMove gymnasticsMoves;
    SCConditionTestEdgeDropType edgeDetDropType;
    SCConditionTestEdgeDropRule edgeDetDropRule;
    SCConditionTestEdgeStepRule edgeDetStepRule;
    SCConditionTestEdgeDeflection edgeDeflection;
    SCConditionTestEdgeDeflectionNumeric edgeDeflectionNumeric;
    SCConditionTestFooting footing;
    SCConditionTestStatus status;
    SCConditionTestMarkup markup;
    SCConditionTestMarkupType markupType;
    SCConditionTestMarkupMod markupMod;
    SCConditionTestMarkupAngle markupAngle;
    SCConditionTestMarkupDistance markupDistance;
    SCConditionTestMarkupLookahead markupLookahead;
    SCConditionTestMarkupClearance markupClearance;
    SCConditionTestMarkupAttach markupAttach;
    SCConditionTestMarkupMultiOut markupMultiOut;
    SCConditionTestMarkupHpoleRot markupAngleRange;
    SCConditionTestMarkupMovement markupMovement;
    SCConditionTestMarkupConcealmentType markupConcealmentType;
    SCConditionTestHurdleOutcome hurdleOutcome;
    SCConditionTestMarkupTargetingTag markupTag;
    SCConditionTestGrapple grapple;
    SCConditionTestParaglide paraglide;
    SCConditionTestWater water;
    SCConditionTestNpc npc;
    SCConditionTestNpcProcess npcProcess;
    SCConditionTestNpcThreatMood npcThreatMood;
    SCConditionTestUseObjectState useObjectState;
    SCConditionTestUseObjectReaction useObjectReaction;
    SCConditionTestNpcFearLevel npcFearLevel;
    SCConditionTestSpatialProbe spatialProbe;
    SCConditionTestSpatialProbeHitType spatialProbeHitType;
    SCConditionTestTunedata tunedata;
    SCConditionTestCombat combat;
    SCConditionTestAwareness awareness;
    SCConditionTestCombatNumeric combatNumeric;
    SCConditionTestCover cover;
    SCConditionTestCombatStatus combatStatus;
    SCConditionTestAmmo ammo;
    SCConditionTestInventory inventory;
    SCConditionTestInventoryRequirement inventoryRequirement;
    SCConditionTestWeaponLoadoutType weapon;
    SCConditionTestCameraCategoryEnabled cameraCategory;
    SCConditionTestVehicle vehicle;
    SCConditionTestPlayNotificationType playNotification;
    SCConditionTestStance stance;
    SCConditionTestDamageType damageType;
    SCConditionTestHitReactType hitReactType;
    SCConditionTestHitShapeType hitShapeType;
    SCConditionTestNamedValueBool namedValueBoolean;
    SCConditionTestNamedValueScalar namedValueScalarEQ;
    SCConditionTestNamedValueScalar namedValueScalarGT;
    SCConditionTestNamedValueScalar namedValueScalarGTE;
    SCConditionTestNamedVlaueSymbolComp namedValueSymbolComp;
    SCConditionTestObject object;
    SCConditionTestDetection detection;
    SCConditionTestMultiplayer multiplayer;
    SCConditionTestGameMode gameMode;
    SCConditionTestProcess process;
    SCConditionTestProcessNumeric processNumeric;
    SCConditionTestProcessAnimGraphTrigger processAnimGraphTrigger;
    SCConditionTestProcessInventory processInventory;
    SCConditionTestPrototype prototype;
    SCConditionTestPlayerTrait experience;
    SCConditionTestSeizeAttack seizeAttack;
    SCConditionTestMeleeMove meleeMove;
    SCConditionTestWeather weather;
    SCConditionTestMovesetProfile movesetProfile;
    SCConditionTestStateTag stateTag;
    SCConditionTestAnimCompleteID animCompleteID;
    SCConditionTestCraftingRecipe craftingRecipe;
    SCConditionTestSCPropertyBool sCPropertyBool;
    SCConditionTestSCPropertyNumeric sCPropertyNumeric;
    SCConditionTestSCPropertyConditionNumeric sCPropertyConditionNumeric;
    SCConditionTestPlatform platform;
    SCConditionTestVrMode vrMode;
    SCConditionTestDebug debug;
    SCConditionTestNumericScalar numericScalar;
} SCCondTest;

enum <int> EnumSCCondContext
{
    EnumSCCondContext_Unknown = 0x0,
    EnumSCCondContext_JumpMode = 0x1,
    EnumSCCondContext_Numeric = 0x2,
    EnumSCCondContext_NumericHosted = 0x3,
    EnumSCCondContext_Internal = 0x4,
    EnumSCCondContext_Action = 0x5,
    EnumSCCondContext_Animation = 0x6,
    EnumSCCondContext_AnimationFrames = 0x7,
    EnumSCCondContext_AnimCompleteID = 0x8,
    EnumSCCondContext_CraftingRecipe = 0x9,
    EnumSCCondContext_Direction = 0xA,
    EnumSCCondContext_Debug = 0xB,
    EnumSCCondContext_Misc = 0xC,
    EnumSCCondContext_Footing = 0xD,
    EnumSCCondContext_Movement = 0xE,
    EnumSCCondContext_HurdleOutcome = 0xF,
    EnumSCCondContext_GymnasticsMoves = 0x10,
    EnumSCCondContext_EdgeDetDropType = 0x11,
    EnumSCCondContext_EdgeDetDropRule = 0x12,
    EnumSCCondContext_EdgeDetStepRule = 0x13,
    EnumSCCondContext_EdgeDeflection = 0x14,
    EnumSCCondContext_EdgeDeflectionNumeric = 0x15,
    EnumSCCondContext_Status = 0x16,
    EnumSCCondContext_Markup = 0x17,
    EnumSCCondContext_MarkupType = 0x18,
    EnumSCCondContext_MarkupMod = 0x19,
    EnumSCCondContext_MarkupAngle = 0x1A,
    EnumSCCondContext_MarkupDistance = 0x1B,
    EnumSCCondContext_MarkupLookahead = 0x1C,
    EnumSCCondContext_MarkupClearance = 0x1D,
    EnumSCCondContext_MarkupConcealmentType = 0x1E,
    EnumSCCondContext_MarkupAttach = 0x1F,
    EnumSCCondContext_MarkupMultiOut = 0x20,
    EnumSCCondContext_MarkupAngleRange = 0x21,
    EnumSCCondContext_MarkupMovement = 0x22,
    EnumSCCondContext_MarkupBoneAttachTarget = 0x23,
    EnumSCCondContext_MarkupTag = 0x24,
    EnumSCCondContext_Paraglide = 0x25,
    EnumSCCondContext_Grapple = 0x26,
    EnumSCCondContext_Water = 0x27,
    EnumSCCondContext_Npc = 0x28,
    EnumSCCondContext_NpcProcess = 0x29,
    EnumSCCondContext_NpcThreatMood = 0x2A,
    EnumSCCondContext_NpcFearLevel = 0x2B,
    EnumSCCondContext_Tunedata = 0x2C,
    EnumSCCondContext_Physics = 0x2D,
    EnumSCCondContext_Engagement = 0x2E,
    EnumSCCondContext_EngagementStatus = 0x2F,
    EnumSCCondContext_EngagementObject = 0x30,
    EnumSCCondContext_Interact = 0x31,
    EnumSCCondContext_InteractMode = 0x32,
    EnumSCCondContext_Interacted_Type = 0x33,
    EnumSCCondContext_InvestigateTargetType = 0x34,
    EnumSCCondContext_UseObjectState = 0x35,
    EnumSCCondContext_UseObjectReaction = 0x36,
    EnumSCCondContext_PushPull = 0x37,
    EnumSCCondContext_Portable = 0x38,
    EnumSCCondContext_Portable_AnimType = 0x39,
    EnumSCCondContext_Portable_UsageType = 0x3A,
    EnumSCCondContext_SpatialProbe = 0x3B,
    EnumSCCondContext_SpatialProbeHitType = 0x3C,
    EnumSCCondContext_Combat = 0x3D,
    EnumSCCondContext_CombatNumeric = 0x3E,
    EnumSCCondContext_CombatStatus = 0x3F,
    EnumSCCondContext_Ammo = 0x40,
    EnumSCCondContext_Cover = 0x41,
    EnumSCCondContext_Inventory = 0x42,
    EnumSCCondContext_Weapon = 0x43,
    EnumSCCondContext_InventoryRequirement = 0x44,
    EnumSCCondContext_CameraCategory = 0x45,
    EnumSCCondContext_Vehicle = 0x46,
    EnumSCCondContext_DamageType = 0x47,
    EnumSCCondContext_NamedValue_Boolean = 0x48,
    EnumSCCondContext_NamedValue_Scalar_EQ = 0x49,
    EnumSCCondContext_NamedValue_Scalar_GT = 0x4A,
    EnumSCCondContext_NamedValue_Scalar_GTE = 0x4B,
    EnumSCCondContext_NamedValue_Symbol_Comp = 0x4C,
    EnumSCCondContext_Object = 0x4D,
    EnumSCCondContext_HitReactType = 0x4E,
    EnumSCCondContext_PlayNotification = 0x4F,
    EnumSCCondContext_Stance = 0x50,
    EnumSCCondContext_Experience = 0x51,
    EnumSCCondContext_SeizeAttack = 0x52,
    EnumSCCondContext_MeleeMove = 0x53,
    EnumSCCondContext_HitShapeType = 0x54,
    EnumSCCondContext_Detection = 0x55,
    EnumSCCondContext_Multiplayer = 0x56,
    EnumSCCondContext_GameMode = 0x57,
    EnumSCCondContext_Process = 0x58,
    EnumSCCondContext_ProcessNumeric = 0x59,
    EnumSCCondContext_ProcessAnimGraphTrigger = 0x5A,
    EnumSCCondContext_ProcessInventory = 0x5B,
    EnumSCCondContext_Prototype = 0x5C,
    EnumSCCondContext_Weather = 0x5D,
    EnumSCCondContext_MovesetProfile = 0x5E,
    EnumSCCondContext_SCPropertyBool = 0x5F,
    EnumSCCondContext_SCPropertyNumeric = 0x60,
    EnumSCCondContext_SCPropertyConditionNumeric = 0x61,
    EnumSCCondContext_StateTag = 0x62,
    EnumSCCondContext_Platform = 0x63,
    EnumSCCondContext_VrMode = 0x64,
    EnumSCCondContext_Awareness = 0x65,
    EnumSCCondContext_NumericScalar = 0x66,
};

typedef struct
{
    EnumSCCondContext context;
    FSkip(4);
    SCCondTest test;
    FSkip(0xB);
    byte enabled;
} SCConditionData <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_StateControlCondition__Inputs <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int scAgentIndex;
    FSkip(4);
    SCConditionData scConditionData;
    FSkip(7);
    Instance_StateControlCondition__Inputs inputs;
} Instance_StateControlCondition <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_StateControlProperty__Inputs <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int scAgentIndex;
    int scStateProperty;
    Instance_StateControlProperty__Inputs inputs;
} Instance_StateControlProperty <optimize=false>;

typedef struct
{
    ActionGraphIntroID placementID;
    byte useOverrideSpeed;
    FSkip(3);
    float speed;
    FSkip(4);
    uquad overrideTarget;
    byte useVolumeCenter;
} FireWeaponNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    FireWeaponNode__InputsType inputs;
    FSkip(3);
    int fireDir;
} FireWeaponNode <optimize=false>;

typedef struct
{
    uquad placementA;
    uquad placementB;
} AGInstanceIsFacing__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultA;
    PlacementPath placementDefaultB;
    AGInstanceIsFacing__InputsType inputs;
    byte useRNodeForFacing;
    FSkip(3);
    int angleTestDimension;
} AGInstanceIsFacing <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad playerPlacement;
} InstanceMarkerPos__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath playerPlacementDefault;
    InstanceMarkerPos__InputsType inputs;
    ModelBoneOrMarkerReferenceWithContext boneMarker;
} InstanceMarkerPos <optimize=false>;

typedef struct
{
    uquad projectileOwnerID;
    byte enable;
    byte disable;
} Instance_ProjectileOwnerNotify__InputsType <optimize=false>;

typedef struct
{
    PlacementPath projectileOwnerIDDefault;
    Instance_ProjectileOwnerNotify__InputsType inputs;
} Instance_ProjectileOwnerNotify <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad targetInstanceID;
    float endPosition[3];
} Instance_DynamicMarkupComponentNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_DynamicMarkupComponentNode__InputsType inputs;
} Instance_DynamicMarkupComponentNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_DynamicMarkupOverrideNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_DynamicMarkupOverrideNode__InputsType inputs;
} Instance_DynamicMarkupOverrideNode <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad playerID;
} AGInstanceIsVisible__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath playerIDDefault;
    int probeType;
    FSkip(4);
    AGInstanceIsVisible__InputsType inputs;
} AGInstanceIsVisible <optimize=false>;

typedef struct
{
    uquad targetPlacement;
} Instance_ActivateReticule__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetPlacementDefault;
    Instance_ActivateReticule__InputsType inputs;
    byte forceActivate;
} Instance_ActivateReticule <optimize=false>;

typedef struct
{
    uquad placementID;
} AG_Instance_IsValid__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AG_Instance_IsValid__InputsType inputs;
} AG_Instance_IsValid <optimize=false>;

typedef struct
{
    ushort objectZoneID;
    FSkip(2);
    int profileID;
    int profilePriority;
    float setTime;
    float clearTime;
    byte clearSetProfileIfNodeGetsDestroyed;
} Instance_MovesetProfile__Params_SetClear <optimize=false>;

typedef struct
{
    ushort objectZoneID;
    FSkip(2);
    int profileID;
    int profilePriority;
} Instance_MovesetProfile__Params_CheckProfile <optimize=false>;

typedef struct
{
    ushort objectZoneID;
    FSkip(2);
    unsigned int moveActionID;
} Instance_MovesetProfile__Params_CheckMoveValue <optimize=false>;

typedef struct
{
    uquad placementID;
    float setTime;
    float clearTime;
} Instance_MovesetProfile__Inputs_SetClear <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_MovesetProfile__Inputs_Check <optimize=false>;

enum <int> Instance_MovesetProfile_Type
{
    Instance_MovesetProfile_Type_SetOrClearProfile = 0x0,
    Instance_MovesetProfile_Type_CheckProfile = 0x1,
    Instance_MovesetProfile_Type_CheckMovesetValue = 0x2
};

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_MovesetProfile_Type nodeType;
    local int endPos = FTell() + 0x1C;
    switch (nodeType)
    {
        case Instance_MovesetProfile_Type_SetOrClearProfile:
            Instance_MovesetProfile__Params_SetClear params;
            break;
        case Instance_MovesetProfile_Type_CheckProfile:
            Instance_MovesetProfile__Params_CheckProfile params;
            break;
        case Instance_MovesetProfile_Type_CheckMovesetValue:
            Instance_MovesetProfile__Params_CheckMoveValue params;
            break;
    }
    FSeek(endPos);
    
    endPos = FTell() + 0x10;
    switch (nodeType)
    {
        case Instance_MovesetProfile_Type_SetOrClearProfile:
            Instance_MovesetProfile__Inputs_SetClear inputs;
            break;
        case Instance_MovesetProfile_Type_CheckProfile:
        case Instance_MovesetProfile_Type_CheckMovesetValue:
            Instance_MovesetProfile__Inputs_Check inputs;
            break;
    }
    FSeek(endPos);
} Instance_MovesetProfile <optimize=false>;

typedef struct
{
    byte query;
    FSkip(7);
    uquad instance;
} QueryLookAtTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    QueryLookAtTargetNode__InputsType inputs;
} QueryLookAtTargetNode <optimize=false>;

typedef struct
{
    byte checkIsOnTeam;
    FSkip(7);
    uquad placementID;
    char team;
} InstanceTeamCheck__InputsType <optimize=false>;

typedef struct
{
    PlacementPath instanceIDDefault;
    InstanceTeamCheck__InputsType inputs;
} InstanceTeamCheck <optimize=false>;

typedef struct
{
} InstanceTrackTargetNode__InstantMovementData <optimize=false>;

typedef struct
{
    float speed;
} InstanceTrackTargetNode__ConstantSpeedMovementData <optimize=false>;

typedef union
{
    InstanceTrackTargetNode__InstantMovementData instant;
    InstanceTrackTargetNode__ConstantSpeedMovementData constantSpeed;
} InstanceTrackTargetNode__MovementData;

typedef struct
{
    int enable;
    int disable;
    uquad instanceID;
    uquad targetID;
    float targetOffset[3];
    FSkip(4);
    uquad referenceID;
} InstanceTrackTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath defaultInstance;
    PlacementPath defaultTarget;
    PlacementPath defaultReference;
    int movementType;
    InstanceTrackTargetNode__MovementData movementData;
    byte bReturnToReferenceWhenDisabled;
    FSkip(3);
    float returnAngularSpeed;
    byte bPredictPosition;
    FSkip(3);
    float predictionDamping;
    float predictionFactor;
    byte bLimitOrientation;
    FSkip(3);
    float horizontalLimit;
    float verticalLimit;
    byte noTransformRebuild;
    byte bDebugDraw;
    FSkip(2);
    InstanceTrackTargetNode__InputsType inputs;
} InstanceTrackTargetNode <optimize=false>;

typedef struct
{
    uquad player;
} PowerMeterEvents__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    byte bActivateOnInit;
    FSkip(7);
    PowerMeterEvents__InputsType inputs;
} PowerMeterEvents <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_PhysicsAttachComponentNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_PhysicsAttachComponentNode__InputsType inputs;
} Instance_PhysicsAttachComponentNode <optimize=false>;

typedef struct
{
    PlacementPath defaultInstance;
    int onScreenDeactivationDistance;
    int offScreenDeactivationDistance;
} InstanceSetDeactivationDistancesNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Instance_KeepAlive__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Instance_KeepAlive__InputsType inputs;
} Instance_KeepAlive <optimize=false>;

typedef struct
{
    float startValue[3];
    float stopValue[3];
    float time;
    float evaluateTime;
    unsigned int curveResourceID;
} InterpVectorNode__InputsType <optimize=false>;

typedef struct
{
    float curve[32];
    byte useCurve;
    byte loop;
    byte interpolateAsRotation;
    byte obeyWorldSpeed;
    byte outputOnInit;
    byte outputOnStart;
    FSkip(2);
    InterpVectorNode__InputsType inputs;
} InterpVectorNode <optimize=false>;

typedef struct
{
    float startValue;
    float stopValue;
    float time;
    float evaluateTime;
    unsigned int curveResourceID;
} InterpFloatNode__InputsType <optimize=false>;

typedef struct
{
    float curve[32];
    byte useCurve;
    byte loop;
    byte obeyWorldSpeed;
    byte outputOnInit;
    byte outputOnStart;
    FSkip(3);
    InterpFloatNode__InputsType inputs;
} InterpFloatNode <optimize=false>;

typedef struct
{
    int startValue;
    int stopValue;
    float time;
    float evaluateTime;
    unsigned int curveResourceID;
} InterpIntNode__InputsType <optimize=false>;

typedef struct
{
    float curve[32];
    byte useCurve;
    byte loop;
    byte outputOnInit;
    byte outputOnStart;
    byte obeyWorldSpeed;
    FSkip(3);
    InterpIntNode__InputsType inputs;
} InterpIntNode <optimize=false>;

typedef struct
{
    unsigned int startValue;
    unsigned int stopValue;
    float time;
    float evaluateTime;
    unsigned int curveResourceID;
} InterpColorNode__InputsType <optimize=false>;

typedef struct
{
    float curve[32];
    byte useCurve;
    byte loop;
    byte obeyWorldSpeed;
    byte outputOnInit;
    byte outputOnStart;
    FSkip(3);
    InterpColorNode__InputsType inputs;
} InterpColorNode <optimize=false>;

typedef struct
{
    unsigned int curveID;
    byte outputOnInit;
} Interp_CurveResourceID <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} PlayerInventoryNode__Input_Base <optimize=false>;

typedef struct
{
    byte trigger;
} PlayerInventoryNode__Input_TriggerOnly <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
    uquad objectID;
} PlayerInventoryNode__Input_Item <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
    unsigned int inventoryState;
} PlayerInventoryNode__Input_SetInventoryState <optimize=false>;

typedef struct
{
    byte equip;
    FSkip(7);
    uquad playerID;
    byte release;
} PlayerInventoryNode__Input_Group <optimize=false>;

typedef union
{
    PlayerInventoryNode__Input_Base getEquippedItem;
    PlayerInventoryNode__Input_Base getEquippedProjectile;
    PlayerInventoryNode__Input_Base getLastSelectedProjectileByType;
    PlayerInventoryNode__Input_Base getSelectedProjectileDamageGroup;
    PlayerInventoryNode__Input_Base getHeldPortable;
    PlayerInventoryNode__Input_Base getHeldOffhandPortable;
    PlayerInventoryNode__Input_Base getInstance;
    PlayerInventoryNode__Input_Base unequipItem;
    PlayerInventoryNode__Input_Base activateInventoryType;
    PlayerInventoryNode__Input_Base giveItem;
    PlayerInventoryNode__Input_TriggerOnly giveItemToAllPlayers;
    PlayerInventoryNode__Input_Item givePortable;
    PlayerInventoryNode__Input_Base dropItem;
    PlayerInventoryNode__Input_Base setUIChosenWeapon;
    PlayerInventoryNode__Input_Base instantReload;
    PlayerInventoryNode__Input_Base hideReticle;
    PlayerInventoryNode__Input_Base unhideReticle;
    PlayerInventoryNode__Input_Base selectAltProjectile;
    PlayerInventoryNode__Input_SetInventoryState setInventoryState;
    PlayerInventoryNode__Input_Base getInventoryState;
    PlayerInventoryNode__Input_Base bookmarkInventoryState;
    PlayerInventoryNode__Input_Base bookmarkRestoreInventoryState;
    PlayerInventoryNode__Input_Base getItemIfEquipped;
    PlayerInventoryNode__Input_Base getItemIfUIChosenWeapon;
    PlayerInventoryNode__Input_Base getUIChosenWeapon;
    PlayerInventoryNode__Input_Base instantReloadAllWeapons;
    PlayerInventoryNode__Input_Base lockInventoryItem;
    PlayerInventoryNode__Input_Base unlockInventoryItem;
    PlayerInventoryNode__Input_Group groupEquipAndRelease;
} PlayerInventoryNode__InputsType;

enum <int> PlayerInventoryNodeType
{
    PlayerInventoryNodeType_GetEquippedItem = 0x0,
    PlayerInventoryNodeType_GetEquippedProjectile = 0x1,
    PlayerInventoryNodeType_GetLastSelectedProjectileByType = 0x2,
    PlayerInventoryNodeType_GetSelectedProjectileDamageGroup = 0x3,
    PlayerInventoryNodeType_GetHeldPortable = 0x4,
    PlayerInventoryNodeType_GetHeldOffhandPortable = 0x5,
    PlayerInventoryNodeType_GetInstance = 0x6,
    PlayerInventoryNodeType_UnequipItem = 0x7,
    PlayerInventoryNodeType_ActivateInventoryType = 0x8,
    PlayerInventoryNodeType_GiveItem = 0x9,
    PlayerInventoryNodeType_GiveItemToAllPlayers = 0xA,
    PlayerInventoryNodeType_GivePortable = 0xB,
    PlayerInventoryNodeType_DropItem = 0xC,
    PlayerInventoryNodeType_SetUIChosenWeapon = 0xD,
    PlayerInventoryNodeType_GetItemIfUIChosenWeapon = 0xE,
    PlayerInventoryNodeType_GetUIChosenWeapon = 0xF,
    PlayerInventoryNodeType_InstantReload = 0x10,
    PlayerInventoryNodeType_SelectAltProjectile = 0x11,
    PlayerInventoryNodeType_HideReticle = 0x12,
    PlayerInventoryNodeType_UnhideReticle = 0x13,
    PlayerInventoryNodeType_SetInventoryState = 0x14,
    PlayerInventoryNodeType_GetInventoryState = 0x15,
    PlayerInventoryNodeType_BookmarkInventoryState = 0x16,
    PlayerInventoryNodeType_BookmarkRestoreInventoryState = 0x17,
    PlayerInventoryNodeType_GetItemIfEquipped = 0x18,
    PlayerInventoryNodeType_InstantReloadAllWeapons = 0x19,
    PlayerInventoryNodeType_LockInventoryItem = 0x1A,
    PlayerInventoryNodeType_UnlockInventoryItem = 0x1B,
    PlayerInventoryNodeType_GroupEquipAndRelease = 0x1C
};

enum <int> InventoryType
{
    InventoryType_Gun = 0x0,
    InventoryType_Machinegun = 0x1,
    InventoryType_Pistol = 0x2,
    InventoryType_MeleeWeapon = 0x3,
    InventoryType_MeleeWeaponAlt = 0x4,
    InventoryType_MeleeWeaponAltRight = 0x5,
    InventoryType_MeleeWeaponAltGrapple = 0x6,
    InventoryType_ThrownWeapon = 0x7,
    InventoryType_RangedWeapon = 0x8,
    InventoryType_Grapple = 0x9,
    InventoryType_GrappleGun = 0xA,
    InventoryType_ZiplineGun = 0xB,
    InventoryType_StunGun = 0xC,
    InventoryType_HackTool = 0xD,
    InventoryType_CloakTool = 0xE,
    InventoryType_ShieldTool = 0xF,
    InventoryType_DroneLauncher = 0x10,
    InventoryType_IncapFoam = 0x11,
    InventoryType_Lighter = 0x12,
    InventoryType_Firestarter = 0x13,
    InventoryType_Torch = 0x14,
    InventoryType_AudioControl = 0x15,
    InventoryType_CameraBoneRig = 0x16,
    InventoryType_PrototypePendingCode = 0x17,
    InventoryType_Rope = 0x18,
    InventoryType_Ascender = 0x19,
    InventoryType_Bow = 0x1A,
    InventoryType_Food = 0x1B,
    InventoryType_OilCanteen = 0x1C,
    InventoryType_ClimbingGlove = 0x1D,
    InventoryType_GrenadeLauncher = 0x1E,
    InventoryType_Radio = 0x1F,
    InventoryType_Recorder = 0x20,
    InventoryType_TurretGun = 0x21,
    InventoryType_RestoreSaved = 0x22,
    InventoryType_MultiplayerSpecial = 0x23,
    InventoryType_MultiplayerPowerWeapon = 0x24,
    InventoryType_Crampons = 0x25,
    InventoryType_Knife = 0x26,
    InventoryType_KnifeSheath = 0x27,
    InventoryType_CombatProxy = 0x28,
    InventoryType_CombatProxySocial = 0x29,
    InventoryType_WeaponProxy = 0x2A,
    InventoryType_MaterialContainer = 0x2B,
    InventoryType_BackAttachment = 0x2C,
    InventoryType_Quiver = 0x2D,
    InventoryType_MagazineContainer = 0x2E,
    InventoryType_ResourceContainer = 0x2F,
    InventoryType_Outfit = 0x30,
    InventoryType_AmmoContainer = 0x31,
    InventoryType_PistolAmmoContainer = 0x32,
    InventoryType_RifleAmmoContainer = 0x33,
    InventoryType_ShotgunAmmoContainer = 0x34,
    InventoryType_Rebreather = 0x35,
    InventoryType_Lockpick = 0x36,
    InventoryType_Broadheadarrowheads = 0x37,
    InventoryType_Carabiner = 0x38,
    InventoryType_CraftingTool = 0x39,
    InventoryType_ExplosveArrowheads = 0x3A,
    InventoryType_WeaponAttachment = 0x3B,
    InventoryType_Wirespool = 0x3C,
    InventoryType_ArmorPiercingArrowheads = 0x3D,
    InventoryType_ReinforcedArrowShafts = 0x3E,
    InventoryType_DroppableRightHand = 0x3F,
    InventoryType_DroppableLeftHand = 0x40,
    InventoryType_DroppableTwoHand = 0x41,
    InventoryType_HandsUpAwfulHack = 0x42,
    InventoryType_Staff = 0x43,
    InventoryType_Clip = 0x44,
    InventoryType_Shield = 0x45,
    InventoryType_Flashlight = 0x46,
    InventoryType_Flare = 0x47,
    InventoryType_Glowstick = 0x48,
    InventoryType_GlowstickSpawner = 0x49,
    InventoryType_InteractTool = 0x4A,
    InventoryType_UIEquipment = 0x4B,
    InventoryType_FathersLedger = 0x4C,
    InventoryType_MasterKey = 0x4D,
    InventoryType_Parachute = 0x4E,
    InventoryType_IncanKey = 0x4F,
    InventoryType_Max = 0x50,
    InventoryType_None = -0x1,
};

typedef struct
{
    ushort object;
    FSkip(2);
    PlayerInventoryNodeType type;
    PlayerInventoryNode__InputsType inputs;
    int loadoutType;
    int projectileAltType;
    byte bprojectileCurrentWeaponOnly;
    FSkip(3);
    InventoryType inventoryType;
    InventoryState inventoryState;
    byte bookMarkPriorToStateChange;
    byte restoreBookMarkAfterStateChange;
    FSkip(2);
    int inventoryEquipRequirement;
    int giveItemStartState;
    byte uiNotification;
    FSkip(7);
    uquad localizedUICategoryUnlocked;
    uquad localizedUIItemName;
    Ref flashIconRef;
    if (CanSeekTo(flashIconRef))
    {
        SeekToRef(flashIconRef);
        string flashIcon;
        ReturnFromRef();
    }
    unsigned int acquiredAudio;
    byte saveStateAtCheckpoints;
    byte eventSendDisabled;
    byte showWeaponSelectUI;
    byte resetAllItemsToDefaultBeforeApplyingState;
    byte keepStateUponItemDrop;
    FSkip(3);
    int inventoryGroup;
    byte groupReleaseImmediate;
    byte immediateItemsAttachementUpdate;
    FSkip(2);
    int groupPriority;
    int groupUrgency;
    byte retroSave;
} PlayerInventoryNode <optimize=false>;

typedef struct
{
    uquad placementID;
} InventoryGetOwnerNode__Input_Base <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    InventoryGetOwnerNode__Input_Base inputs;
} InventoryGetOwnerNode <optimize=false>;

typedef struct
{
    ushort unit;
    ushort unitLightGroupIdx;
} UnitLightGroup <optimize=false>;

typedef union
{
    ushort global;
    UnitLightGroup unitSpecific;
} Lighting_LightGroups__LightGroupTypeUnion;

typedef struct
{
    byte enable;
    FSkip(3);
    float changeEnableTime;
    byte disable;
    FSkip(3);
    float disableEnableTime;
    float setIntensity;
    float setRangeScale;
    byte reset;
    byte resetAll;
    byte blockOtherLightGroups;
    byte unblockOtherLightGroups;
} Lighting_LightGroups__InputsType <optimize=false>;

typedef struct
{
    ubyte lightGroupType;
    FSkip(1);
    Lighting_LightGroups__LightGroupTypeUnion lightGroupTypeUnion;
    Lighting_LightGroups__InputsType inputs;
    FSkip(2);
    float timeEnable;
    float timeDisable;
    float timeSetIntensity;
    float timeSetRange;
    float timeReset;
    byte exclusiveLightGroup;
} Lighting_LightGroups <optimize=false>;

typedef struct
{
    byte enable;
    byte disable;
    FSkip(2);
    float setIntensity;
    float setIntensityDistance;
    unsigned int setColor;
    float setLightTemperature;
    float setRangeScale;
    float setRotation[3];
    float setVolumetricLightIntensity;
    byte reset;
} LightingLightInstanceNode__InputsType <optimize=false>;

typedef struct
{
    LightingLightInstanceNode__InputsType inputs;
    FSkip(3);
    PlacementPath lightPlacement;
    byte outOnInit;
} LightingLightInstanceNode <optimize=false>;

typedef struct
{
    uquad projectilePlacement;
    uquad player;
} Loadout_HasWeaponForItemInLoadout__InputsType <optimize=false>;

typedef struct
{
    PlacementPath projectilePlacementDefaultID;
    Loadout_HasWeaponForItemInLoadout__InputsType inputs;
} Loadout_HasWeaponForItemInLoadout <optimize=false>;

typedef struct
{
    int buffered;
    int arraySize;
} LogicAnyNode <optimize=false>;

typedef struct
{
    byte resetToStart;
} LogicOnceNode <optimize=false>;

typedef struct
{
    byte condition;
} LogicConditionNode__InputsType <optimize=false>;

typedef struct
{
    LogicConditionNode__InputsType inputs;
} LogicConditionNode <optimize=false>;

typedef struct
{
    byte condition;
} LogicConditionalRouteNode__InputsType <optimize=false>;

typedef struct
{
    LogicConditionalRouteNode__InputsType inputs;
} LogicConditionalRouteNode <optimize=false>;

typedef struct
{
} LogicRouteNode__InputsType <optimize=false>;

typedef struct
{
    LogicRouteNode__InputsType inputs;
} LogicRouteNode <optimize=false>;

typedef struct
{
    byte block;
} LogicBlockerNode__InputsType <optimize=false>;

typedef struct
{
    LogicBlockerNode__InputsType inputs;
    byte invertBlock;
} LogicBlockerNode <optimize=false>;

typedef struct
{
    byte in;
} LogicOnChangeNode__InputsType <optimize=false>;

typedef struct
{
    LogicOnChangeNode__InputsType inputs;
} LogicOnChangeNode <optimize=false>;

typedef struct
{
    ubyte frames;
    ubyte postProcessRequeues;
} LogicOnStartedOnStoppedNode <optimize=false>;

typedef struct
{
    byte in;
} LogicNOTNode__InputsType <optimize=false>;

typedef struct
{
    LogicNOTNode__InputsType inputs;
} LogicNOTNode <optimize=false>;

typedef struct
{
    byte inA;
    byte inB;
} LogicBooleanOpNode__InputsType <optimize=false>;

typedef struct
{
    LogicBooleanOpNode__InputsType inputs;
    char booleanOpType;
    byte outputOnInit;
} LogicBooleanOpNode <optimize=false>;

typedef struct
{
    byte inA;
    byte inB;
    byte inC;
    byte inD;
    byte inE;
    byte inF;
    byte inG;
    byte inH;
} LogicBooleanOpMultiNode__InputsType <optimize=false>;

typedef struct
{
    LogicBooleanOpMultiNode__InputsType inputs;
    char booleanOpType;
    byte outputOnInit;
    byte holdUntilPostProcess;
} LogicBooleanOpMultiNode <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
} LogicBooleanOpWithTriggerNode__Inputs_Two <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
} LogicBooleanOpWithTriggerNode__Inputs_Three <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
} LogicBooleanOpWithTriggerNode__Inputs_Four <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
} LogicBooleanOpWithTriggerNode__Inputs_Five <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
} LogicBooleanOpWithTriggerNode__Inputs_Six <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
} LogicBooleanOpWithTriggerNode__Inputs_Seven <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
    byte in8;
} LogicBooleanOpWithTriggerNode__Inputs_Eight <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
    byte in8;
    byte in9;
} LogicBooleanOpWithTriggerNode__Inputs_Nine <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
    byte in8;
    byte in9;
    byte in10;
} LogicBooleanOpWithTriggerNode__Inputs_Ten <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
    byte in8;
    byte in9;
    byte in10;
    byte in11;
    byte in12;
    byte in13;
    byte in14;
    byte in15;
} LogicBooleanOpWithTriggerNode__Inputs_Fifteen <optimize=false>;

typedef struct
{
    byte in1;
    byte in2;
    byte in3;
    byte in4;
    byte in5;
    byte in6;
    byte in7;
    byte in8;
    byte in9;
    byte in10;
    byte in11;
    byte in12;
    byte in13;
    byte in14;
    byte in15;
    byte in16;
    byte in17;
    byte in18;
    byte in19;
    byte in20;
} LogicBooleanOpWithTriggerNode__Inputs_Twenty <optimize=false>;

typedef union
{
    LogicBooleanOpWithTriggerNode__Inputs_Two two;
    LogicBooleanOpWithTriggerNode__Inputs_Three three;
    LogicBooleanOpWithTriggerNode__Inputs_Four four;
    LogicBooleanOpWithTriggerNode__Inputs_Five five;
    LogicBooleanOpWithTriggerNode__Inputs_Six six;
    LogicBooleanOpWithTriggerNode__Inputs_Seven seven;
    LogicBooleanOpWithTriggerNode__Inputs_Eight eight;
    LogicBooleanOpWithTriggerNode__Inputs_Nine nine;
    LogicBooleanOpWithTriggerNode__Inputs_Ten ten;
    LogicBooleanOpWithTriggerNode__Inputs_Fifteen fifteen;
    LogicBooleanOpWithTriggerNode__Inputs_Twenty twenty;
} LogicBooleanOpWithTriggerNode__InputsType;

typedef struct
{
    int arraySize;
    LogicBooleanOpWithTriggerNode__InputsType inputs;
    char booleanOpType;
} LogicBooleanOpWithTriggerNode <optimize=false>;

typedef struct
{
} Logic_PassThrough__InputsType <optimize=false>;

typedef struct
{
    Logic_PassThrough__InputsType inputs;
} Logic_PassThrough <optimize=false>;

typedef struct
{
    int in1;
    int in2;
} LogicHoldUntilAllInputsNode__Inputs_Two <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
} LogicHoldUntilAllInputsNode__Inputs_Three <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
} LogicHoldUntilAllInputsNode__Inputs_Four <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
} LogicHoldUntilAllInputsNode__Inputs_Five <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
    int in6;
} LogicHoldUntilAllInputsNode__Inputs_Six <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
    int in6;
    int in7;
} LogicHoldUntilAllInputsNode__Inputs_Seven <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
    int in6;
    int in7;
    int in8;
} LogicHoldUntilAllInputsNode__Inputs_Eight <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
    int in6;
    int in7;
    int in8;
    int in9;
} LogicHoldUntilAllInputsNode__Inputs_Nine <optimize=false>;

typedef struct
{
    int in1;
    int in2;
    int in3;
    int in4;
    int in5;
    int in6;
    int in7;
    int in8;
    int in9;
    int in10;
} LogicHoldUntilAllInputsNode__Inputs_Ten <optimize=false>;

typedef union
{
    LogicHoldUntilAllInputsNode__Inputs_Two two;
    LogicHoldUntilAllInputsNode__Inputs_Three three;
    LogicHoldUntilAllInputsNode__Inputs_Four four;
    LogicHoldUntilAllInputsNode__Inputs_Five five;
    LogicHoldUntilAllInputsNode__Inputs_Six six;
    LogicHoldUntilAllInputsNode__Inputs_Seven seven;
    LogicHoldUntilAllInputsNode__Inputs_Eight eight;
    LogicHoldUntilAllInputsNode__Inputs_Nine nine;
    LogicHoldUntilAllInputsNode__Inputs_Ten ten;
} LogicHoldUntilAllInputsNode__InputsType;

typedef struct
{
    int tableSize;
    LogicHoldUntilAllInputsNode__InputsType inputs;
    byte clearEveryFrame;
} LogicHoldUntilAllInputsNode <optimize=false>;

typedef struct
{
    int input;
} AGSwitchSelect__InputsType <optimize=false>;

typedef struct
{
    AGSwitchSelect__InputsType inputs;
} AGSwitchSelect <optimize=false>;

typedef struct
{
    uquad markupPlacementID;
} UnitMarkupNode__InputsType <optimize=false>;

typedef struct
{
    UnitMarkupNode__InputsType inputs;
    PlacementPath unitMarkup;
    byte affectRopeEntity;
} UnitMarkupNode <optimize=false>;

typedef union
{
    int oneInputsVsInt;
    float oneInputsVsFloat;
} Math_ComparisonNodeVer2__ParametersType;

typedef union
{
    char twoInputs;
    char twoInputsInts;
    char oneInputsVsInt;
    char oneInputsVsFloat;
} Math_ComparisonNodeVer2__CompareType;

typedef struct
{
    int dataType;
    Math_ComparisonNodeVer2__ParametersType params;
    Math_ComparisonNodeVer2__CompareType compareType;
} Math_ComparisonNodeVer2 <optimize=false>;

typedef struct
{
    byte staticSeed;
    FSkip(3);
    int groupSize;
    unsigned int selectSize;
} Math_RandomSelect <optimize=false>;

typedef struct
{
    byte staticSeed;
    byte automaticLoop;
    FSkip(2);
    int groupSize;
} Math_RandomSequence <optimize=false>;

typedef union
{
    int oneInputsWithInt;
    float oneInputsWithFloat;
} Math_ArithmeticNodeVer2__ParametersType;

typedef struct
{
    int dataType;
    Math_ArithmeticNodeVer2__ParametersType params;
    char arithType;
} Math_ArithmeticNodeVer2 <optimize=false>;

typedef struct
{
    ActionGraphBitFlags flags;
} AGMathSetBitFlags__InputsType <optimize=false>;

typedef struct
{
    AGMathSetBitFlags__InputsType inputs;
} AGMathSetBitFlags <optimize=false>;

typedef struct
{
    ActionGraphBitFlags bitField1;
} AGMathBitOperation__InputsType_OneBitField <optimize=false>;

typedef struct
{
    ActionGraphBitFlags bitField1;
    ActionGraphBitFlags bitField2;
} AGMathBitOperation__InputsType_TwoBitFields <optimize=false>;

typedef struct
{
    ActionGraphBitFlags bitField1;
    unsigned int _int;
} AGMathBitOperation__InputsType_BitFieldAndInt <optimize=false>;

typedef union
{
    AGMathBitOperation__InputsType_OneBitField oneBitField;
    AGMathBitOperation__InputsType_TwoBitFields twoBitFields;
    AGMathBitOperation__InputsType_BitFieldAndInt bitFieldAndInt;
} AGMathBitOperation__InputType;

typedef struct
{
    int operationType;
    int inputType;
    AGMathBitOperation__InputType inputs;
} AGMathBitOperation <optimize=false>;

typedef struct
{
    float magnitudeOverride;
} Math_RandomStickPos__InputsType <optimize=false>;

typedef struct
{
    byte useRandomMagnitude;
    FSkip(3);
    Math_RandomStickPos__InputsType inputs;
} Math_RandomStickPos <optimize=false>;

typedef struct
{
    float springFreq;
    float springDamp;
} SpringMassDamperNode__InputsType <optimize=false>;

typedef struct
{
    SpringMassDamperNode__InputsType inputs;
    byte startEnabled;
} SpringMassDamperNode <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
} AGRandomChanceNode__Inputs_One <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
} AGRandomChanceNode__Inputs_Two <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
} AGRandomChanceNode__Inputs_Three <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
} AGRandomChanceNode__Inputs_Four <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
} AGRandomChanceNode__Inputs_Five <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
    float chance6;
} AGRandomChanceNode__Inputs_Six <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
    float chance6;
    float chance7;
} AGRandomChanceNode__Inputs_Seven <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
    float chance6;
    float chance7;
    float chance8;
} AGRandomChanceNode__Inputs_Eight <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
    float chance6;
    float chance7;
    float chance8;
    float chance9;
} AGRandomChanceNode__Inputs_Nine <optimize=false>;

typedef struct
{
    int trigger;
    byte nonConsecutive;
    FSkip(3);
    float chance1;
    float chance2;
    float chance3;
    float chance4;
    float chance5;
    float chance6;
    float chance7;
    float chance8;
    float chance9;
    float chance10;
} AGRandomChanceNode__Inputs_Ten <optimize=false>;

typedef union
{
    AGRandomChanceNode__Inputs_One one;
    AGRandomChanceNode__Inputs_Two two;
    AGRandomChanceNode__Inputs_Three three;
    AGRandomChanceNode__Inputs_Four four;
    AGRandomChanceNode__Inputs_Five five;
    AGRandomChanceNode__Inputs_Six six;
    AGRandomChanceNode__Inputs_Seven seven;
    AGRandomChanceNode__Inputs_Eight eight;
    AGRandomChanceNode__Inputs_Nine nine;
    AGRandomChanceNode__Inputs_Ten ten;
} AGRandomChanceNode__InputsType;

typedef struct
{
    int arraySize;
    AGRandomChanceNode__InputsType inputs;
} AGRandomChanceNode <optimize=false>;

typedef struct
{
    int trigger;
    int numberOfWinners;
} AGRandomTriggerNode__InputsType <optimize=false>;

typedef struct
{
    int numberOfCandidates;
    AGRandomTriggerNode__InputsType inputs;
} AGRandomTriggerNode <optimize=false>;

typedef struct
{
    int start;
    int stop;
    float pos[3];
    float vel[3];
    float accel[3];
    float right[3];
} DrawParabolaNode__InputsType <optimize=false>;

typedef struct
{
    DrawParabolaNode__InputsType inputs;
    unsigned int colorValue;
    float t0;
    float t1;
    int segments;
    float lineDist;
} DrawParabolaNode <optimize=false>;

typedef struct
{
    float floatIn;
    float floatMin;
    float floatMax;
} MathClampNode__Input_Float <optimize=false>;

typedef struct
{
    int intIn;
    int intMin;
    int intMax;
} MathClampNode__Input_Int <optimize=false>;

typedef union
{
    MathClampNode__Input_Float _float;
    MathClampNode__Input_Int integer;
} MathClampNode__InputsType;

typedef struct
{
    int type;
    MathClampNode__InputsType inputs;
} MathClampNode <optimize=false>;

typedef struct
{
    float floatIn;
    byte reset;
} Math_AverageWithPrevValues__Input_Float <optimize=false>;

typedef struct
{
    int intIn;
    byte reset;
} Math_AverageWithPrevValues__Input_Int <optimize=false>;

typedef union
{
    Math_AverageWithPrevValues__Input_Float _float;
    Math_AverageWithPrevValues__Input_Int integer;
} Math_AverageWithPrevValues__InputsType;

typedef struct
{
    byte clearBufferToDefaultValue;
    FSkip(3);
    float defaultValueFloat;
} Math_AverageWithPrevValues__Params_Float <optimize=false>;

typedef struct
{
    byte clearBufferToDefaultValue;
    FSkip(3);
    int defaultValueInt;
} Math_AverageWithPrevValues__Params_Int <optimize=false>;

typedef union
{
    Math_AverageWithPrevValues__Params_Float _float;
    Math_AverageWithPrevValues__Params_Int integer;
} Math_AverageWithPrevValues__ParamsType;

typedef struct
{
    Math_AverageWithPrevValues__InputsType inputs;
    FSkip(3);
    int type;
    unsigned int numToAverage;
    Math_AverageWithPrevValues__ParamsType params;
} Math_AverageWithPrevValues <optimize=false>;

typedef struct
{
    byte trigger;
    byte reset;
    FSkip(2);
    float input1;
    float input2;
} Math_AverageMinMax__Inputs_Two <optimize=false>;

typedef struct
{
    byte trigger;
    byte reset;
    FSkip(2);
    float input1;
    float input2;
    float input3;
} Math_AverageMinMax__Inputs_Three <optimize=false>;

typedef struct
{
    byte trigger;
    byte reset;
    FSkip(2);
    float input1;
    float input2;
    float input3;
    float input4;
} Math_AverageMinMax__Inputs_Four <optimize=false>;

typedef struct
{
    byte trigger;
    byte reset;
    FSkip(2);
    float input1;
    float input2;
    float input3;
    float input4;
    float input5;
} Math_AverageMinMax__Inputs_Five <optimize=false>;

typedef union
{
    Math_AverageMinMax__Inputs_Two two;
    Math_AverageMinMax__Inputs_Three three;
    Math_AverageMinMax__Inputs_Four four;
    Math_AverageMinMax__Inputs_Five five;
} Math_AverageMinMax__InputsType;

typedef struct
{
    int numToAverage;
    Math_AverageMinMax__InputsType inputs;
} Math_AverageMinMax <optimize=false>;

typedef struct
{
} MeshPlacementNode__InputsType <optimize=false>;

typedef struct
{
    MeshPlacementNode__InputsType inputs;
    ushort unit;
    FSkip(6);
    PlacementPath meshRef;
} MeshPlacementNode <optimize=false>;

typedef struct
{
    uquad placementID;
    byte allSections;
} MessageSendNode__InstanceType <optimize=false>;

typedef struct
{
} MessageSendNode__BroadcastType <optimize=false>;

typedef union
{
    MessageSendNode__InstanceType instance;
    MessageSendNode__BroadcastType broadcast;
} MessageSendNode__InputsType;

typedef struct
{
    char messageType;
    FSkip(7);
    Ref messageNameRef;
    if (CanSeekTo(messageNameRef))
    {
        SeekToRef(messageNameRef);
        EventEnum messageName;
        ReturnFromRef();
    }
    MessageSendNode__InputsType inputs;
    FSkip(3);
    PlacementPath placementDefault;
} MessageSendNode <optimize=false>;

typedef struct
{
    byte bufferMessages;
    FSkip(7);
    uquad placementID;
} MessageReceiveNode__InstanceInputsType <optimize=false>;

typedef struct
{
    byte bufferMessages;
} MessageReceiveNode__BroadcastInputsType <optimize=false>;

typedef union
{
    MessageReceiveNode__InstanceInputsType instance;
    MessageReceiveNode__BroadcastInputsType broadcast;
} MessageReceiveNode__InputsType;

typedef struct
{
    PlacementPath placementDefault;
    MessageReceiveNode__InputsType inputs;
    char messageType;
    FSkip(7);
    Ref messageNameRef;
    if (CanSeekTo(messageNameRef))
    {
        SeekToRef(messageNameRef);
        EventEnum messageName;
        ReturnFromRef();
    }
} MessageReceiveNode <optimize=false>;

typedef struct
{
    uquad placementID;
    byte bufferMessages;
} MessageReceiveCollisionNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    MessageReceiveCollisionNode__InputsType inputs;
    byte bFilterCollisions;
    FSkip(2);
    unsigned int nToleranceFromUpAngleInDeg;
} MessageReceiveCollisionNode <optimize=false>;

typedef struct
{
    uquad placementID;
    byte bufferMessages;
} MessageReceivePushPullNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    MessageReceivePushPullNode__InputsType inputs;
} MessageReceivePushPullNode <optimize=false>;

typedef struct
{
    char playerType;
    FSkip(7);
    Ref messageNameRef;
    if (CanSeekTo(messageNameRef))
    {
        SeekToRef(messageNameRef);
        EventEnum messageName;
        ReturnFromRef();
    }
} MessageReceivePlayerNode <optimize=false>;

typedef struct
{
    uquad damagedPlacementID;
    byte bufferMessages;
    FSkip(7);
    uquad queryAttackerPlacementID;
    uquad queryAttackerOwnerPlacementID;
    unsigned int queryDamageAmount;
} Message_ReceiveDamage__InputType <optimize=false>;

typedef struct
{
    PlacementPath damagedPlacementDefaultID;
    PlacementPath queryAttackerIDDefault;
    PlacementPath queryAttackerOwnerIDDefault;
    PlacementPath damagedPlacementDefault;
    PlacementPath queryAttackerDefault;
    PlacementPath queryAttackerOwnerDefault;
    Message_ReceiveDamage__InputType inputs;
    int queryDamageType;
    int queryHitReactType;
} Message_ReceiveDamage <optimize=false>;

typedef struct
{
    DLCFeatureRef dlcRef;
    int licenseCheckType;
} DLC_LicenseCheck <optimize=false>;

typedef struct
{
    byte outputOnInit;
} DLC_LicenseToggle <optimize=false>;

typedef struct
{
    byte useActualTime;
} TimeMult <optimize=false>;

typedef struct
{
} GetAspectRatio__InputsType <optimize=false>;

typedef struct
{
    GetAspectRatio__InputsType inputs;
} GetAspectRatio <optimize=false>;

typedef struct
{
} GenerateUniqueIDNode__InputsType <optimize=false>;

typedef struct
{
    GenerateUniqueIDNode__InputsType inputs;
    int idType;
} GenerateUniqueIDNode <optimize=false>;

typedef struct
{
    byte enable;
    byte firstTimeEntered;
} SendMetrics__Challenge_Tomb_Entered <optimize=false>;

typedef struct
{
    byte enable;
    byte isDLCtomb;
} SendMetrics__Challenge_Tomb_Completed <optimize=false>;

typedef struct
{
    byte enable;
    byte didWeaponSwitch;
    FSkip(6);
    uquad playerPlacementID;
} SendMetrics__Out_of_Ammo <optimize=false>;

typedef struct
{
    byte enable;
} SendMetrics__Game_Completed <optimize=false>;

typedef struct
{
    byte enable;
    byte firstTimeEntered;
} SendMetrics__Crypt_Entered <optimize=false>;

typedef struct
{
    byte enable;
} SendMetrics__Crypt_Completed <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(7);
    uquad playerPlacementID;
    uquad itemPlacementID;
    unsigned int amount;
    unsigned int spentCoins;
} SendMetrics__Item_Purchased <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(7);
    uquad trapPlacementID;
    uquad playerPlacementID;
    byte playerFailedTrap;
} SendMetrics__Trap_Activated <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(7);
    uquad storytellerPlacementID;
    uquad playerPlacementID;
    byte isInformantStoryteller;
} SendMetrics__Storyteller_Interact <optimize=false>;

typedef union
{
    SendMetrics__Challenge_Tomb_Entered challengeTombEntered;
    SendMetrics__Challenge_Tomb_Completed challengeTombCompleted;
    SendMetrics__Out_of_Ammo outOfAmmo;
    SendMetrics__Game_Completed gameCompleted;
    SendMetrics__Crypt_Entered cryptEntered;
    SendMetrics__Crypt_Completed cryptCompleted;
    SendMetrics__Item_Purchased itemPurchased;
    SendMetrics__Trap_Activated trapActivated;
    SendMetrics__Storyteller_Interact storytellerInteract;
} SendMetrics__InputsType;

typedef struct
{
    int type;
    SendMetrics__InputsType inputs;
} SendMetrics <optimize=false>;

typedef struct
{
    byte enable;
    byte boolValue;
    FSkip(2);
    int intValue;
    float floatValue;
} GenericLive__All_Inputs <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(3);
    int intValue;
} GenericLive__Int_Input <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(3);
    float floatValue;
    uquad playerPlacementID;
} GenericLive__Float_Input <optimize=false>;

typedef struct
{
    byte enable;
    FSkip(3);
    float intensity;
    PlacementPath lightPlacementID;
} GenericLive__VolumetricLightIntensity_Input <optimize=false>;

typedef union
{
    GenericLive__All_Inputs remnantResistanceAction1;
    GenericLive__Int_Input scoreAttackAction1;
    GenericLive__Float_Input enduranceAction1;
    GenericLive__VolumetricLightIntensity_Input volumetricLightIntensityAction1;
} GenericLive__InputsType;

typedef struct
{
    int type;
    GenericLive__InputsType inputs;
} GenericLive <optimize=false>;

typedef struct
{
} Misc_UTSurveyPrompt__InputsType <optimize=false>;

typedef struct
{
    Misc_UTSurveyPrompt__InputsType inputs;
    Ref surveyNameRef;
    if (CanSeekTo(surveyNameRef))
    {
        SeekToRef(surveyNameRef);
        string surveyName;
        ReturnFromRef();
    }
    float inputBlockTime;
} Misc_UTSurveyPrompt <optimize=false>;

typedef struct
{
    byte verboseParse;
    byte verboseParseAction;
    byte verboseParseShape;
    byte actionErrorSuppress;
} ScaleformMovie__DebugLevelFlags <optimize=false>;

typedef struct
{
    unsigned int actionIdx;
    ubyte scaleformKeyId;
} ScaleformInputMap__InputMapping <optimize=false>;

typedef struct
{
    unsigned int inputMapItemCount;
    FSkip(4);
    Ref inputMapRef;
    if (CanSeekTo(inputMapRef))
    {
        SeekToRef(inputMapRef);
        ScaleformInputMap__InputMapping inputMap[inputMapItemCount];
        ReturnFromRef();
    }
} ScaleformInputMap <optimize=false>;

typedef struct
{
    uquad localStrId <format=hex>;
    Ref identifierRef;
    if (CanSeekTo(identifierRef))
    {
        SeekToRef(identifierRef);
        string identifier;
        ReturnFromRef();
    }
} ScaleformMovie__LocalizationMapping <optimize=false>;

typedef struct
{
    Ref urlRef;
    if (CanSeekTo(urlRef))
    {
        SeekToRef(urlRef);
        string url;
        ReturnFromRef();
    }
    unsigned int id;
} ScaleformMovie__DynamicTexture <optimize=false>;

typedef struct
{
    unsigned int imageRes;
    FSkip(4);
    Ref filepathRef;
    if (CanSeekTo(filepathRef))
    {
        SeekToRef(filepathRef);
        string filepath;
        ReturnFromRef();
    }
} ScaleformMovie__ImagePath <optimize=false>;

typedef struct
{
    unsigned int script;
    FSkip(4);
    Ref actionScriptPathRef;
    if (CanSeekTo(actionScriptPathRef))
    {
        SeekToRef(actionScriptPathRef);
        string actionScriptPath;
        ReturnFromRef();
    }
    Ref callbackPrefixRef;
    if (CanSeekTo(callbackPrefixRef))
    {
        SeekToRef(callbackPrefixRef);
        string callbackPrefix;
        ReturnFromRef();
    }
    byte waitForAPI;
} ScaleformMovie__Controller <optimize=false>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    Ref functionNameRef;
    if (CanSeekTo(functionNameRef))
    {
        SeekToRef(functionNameRef);
        string functionName;
        ReturnFromRef();
    }
} ScaleformMovie__asAPI <optimize=false>;

typedef struct
{
    unsigned int movieSWFdataID;
    int uiLayer;
    byte ignoreLayerDisable;
    byte renderAfterPostProcess;
    FSkip(2);
    float position[2];
    float size[3];
    byte is3D;
    byte is3DAndRendersOverAllButPlayer;
    byte is3DAndRendersOverAll;
    FSkip(1);
    float showTime;
    float preHideTime;
    byte disableRenderingOnPause;
    byte vrOverride;
    FSkip(2);
    float vrScale[2];
    byte isOrientedToHmd;
    byte isOrientedToHmdRoot;
    byte isOrientedToHmdChild;
    FSkip(1);
    float hmdYawAngle;
    float hmdPitchAngle;
    float hmdDepthOffset;
    byte isAttaching;
    byte isAttachingIn2D;
    byte isAttachingToLocalSpace;
    ModelBoneOrMarkerReference boneMarker;
    ModelBoneOrMarkerReference boneMarker2;
    FSkip(1);
    ushort unitID;
    FSkip(2);
    PlacementPath markerID;
    byte doMatchMarkerRotation;
    FSkip(3);
    float localRotation[3];
    float localOffset[3];
    byte useWorldSpaceAxis;
    FSkip(3);
    float worldOffset[3];
    float worldRotation[3];
    float additional43LocalOffset[3];
    byte do43WorldFix;
    byte isEndCreditsMovie;
    byte isAttachingToWorldPos;
    FSkip(1);
    float worldPosition[3];
    float worldPositionRotation[3];
    byte isAttachingHmd;
    FSkip(3);
    float hmdAttachingOffset[3];
    byte isAttachingCamera;
    FSkip(3);
    float cameraAttachingOffset[3];
    float cameraAttachAdditional43Offset[3];
    byte facingCamera;
    byte facingCameraHmdVr;
    byte facingCameraOnAttach;
    byte facingCameraAllAxes;
    float facingOffset[3];
    float facingRotation[3];
    FSkip(0x18);
    byte useCameraScaling;
    FSkip(3);
    float cameraScaleMin;
    float cameraScaleMax;
    float cameraScaleMinDistance;
    float cameraScaleMaxDistance;
    byte useCameraDistanceFade;
    FSkip(3);
    float cameraFadeDistanceMin;
    float cameraFadeDistanceMax;
    float cameraFadeScaleMin;
    float cameraFadeScaleMax;
    byte useDampingFilter;
    FSkip(3);
    float frequency;
    float ratio;
    byte renderToTexture;
    FSkip(3);
    int targetWidth;
    int targetHeight;
    ScaleformMovie__DebugLevelFlags debugLevelFlags;
    byte useGlobalInputMap;
    byte useLeftStickAsMouse;
    byte useLeftStickAsZone;
    byte useRightStick;
    Ref inputMapRef;
    if (CanSeekTo(inputMapRef))
    {
        SeekToRef(inputMapRef);
        ScaleformInputMap inputMap;
        ReturnFromRef();
    }
    float inputDelayOnPress;
    float inputDelayOnHold;
    Ref localizationMapRef;
    if (CanSeekTo(localizationMapRef))
    {
        SeekToRef(localizationMapRef);
        ScaleformMovie__LocalizationMapping localizationMap;
        ReturnFromRef();
    }
    unsigned int localizationMapItemCount;
    FSkip(4);
    Ref movieRootRef;
    if (CanSeekTo(movieRootRef))
    {
        SeekToRef(movieRootRef);
        string movieRoot;
        ReturnFromRef();
    }
    byte respectPause;
    byte closeWhenDone;
    ushort menuEnvironment;
    int optimization;
    int scaleMode;
    int alignType;
    byte loadAsChild;
    byte sharedRenderTarget;
    FSkip(2);
    unsigned int backGroundColor;
    short drawPriority;
    byte alwaysRender;
    FSkip(1);
    unsigned int subtype;
    int priority;
    unsigned int dynamicTextureListCount;
    Ref dynamicTextureListRef;
    if (CanSeekTo(dynamicTextureListRef))
    {
        SeekToRef(dynamicTextureListRef);
        ScaleformMovie__DynamicTexture dynamicTextureList[dynamicTextureListCount];
        ReturnFromRef();
    }
    unsigned int streamingImagesResCount;
    FSkip(4);
    Ref streamingImageResRef;
    if (CanSeekTo(streamingImageResRef))
    {
        SeekToRef(streamingImageResRef);
        ScaleformMovie__ImagePath streamingImageRes[streamingImagesResCount];
        ReturnFromRef();
    }
    unsigned int controllerListCount;
    FSkip(4);
    Ref controllerListRef;
    if (CanSeekTo(controllerListRef))
    {
        SeekToRef(controllerListRef);
        ScaleformMovie__Controller controllerList[controllerListCount];
        ReturnFromRef();
    }
    unsigned int functionListCount;
    FSkip(4);
    Ref functionListRef;
    if (CanSeekTo(functionListRef))
    {
        SeekToRef(functionListRef);
        ScaleformMovie__asAPI functionList[functionListCount];
        ReturnFromRef();
    }
    Ref scaleformMaterialTableRef;
    if (CanSeekTo(scaleformMaterialTableRef))
    {
        SeekToRef(scaleformMaterialTableRef);
        byte scaleformMaterialTable;
        ReturnFromRef();
    }
    Ref movieNameRef;
    if (CanSeekTo(movieNameRef))
    {
        SeekToRef(movieNameRef);
        string movieName;
        ReturnFromRef();
    }
} ScaleformMovie <optimize=false>;

typedef struct
{
    uquad instanceID;
} Movie_PlayScaleformMovie__InputsType <optimize=false>;

typedef struct
{
    byte precache;
    FSkip(3);
    ScaleformMovie movieData;
    FSkip(4);
    Movie_PlayScaleformMovie__InputsType inputs;
} Movie_PlayScaleformMovie <optimize=false>;

typedef struct
{
    Ref movieNameRef;
    if (CanSeekTo(movieNameRef))
    {
        SeekToRef(movieNameRef);
        string movieName;
        ReturnFromRef();
    }
    byte hasAlpha;
} BinkMovie <optimize=false>;

typedef struct
{
    uquad instanceID;
} Movie_PlayBinkMovie__InputsType <optimize=false>;

typedef struct
{
    BinkMovie movieData;
    FSkip(7);
    Movie_PlayBinkMovie__InputsType inputs;
} Movie_PlayBinkMovie <optimize=false>;

typedef struct
{
    uquad instanceID;
} Movie_StopMovie__InputsType <optimize=false>;

typedef struct
{
    Movie_StopMovie__InputsType inputs;
} Movie_StopMovie <optimize=false>;

typedef struct
{
    uquad masterInstanceID;
    uquad slaveInstanceID;
} Movie_SlaveMovie__InputsType <optimize=false>;

typedef struct
{
    Movie_SlaveMovie__InputsType inputs;
} Movie_SlaveMovie <optimize=false>;

typedef struct
{
    uquad slaveInstanceID;
} Movie_UnSlaveMovie__InputsType <optimize=false>;

typedef struct
{
    Movie_UnSlaveMovie__InputsType inputs;
} Movie_UnSlaveMovie <optimize=false>;

typedef struct
{
    uquad npcPlacementID;
    float damageThreshold;
} NPCStatusNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCStatusNode__InputsType inputs;
} NPCStatusNode <optimize=false>;

typedef struct
{
    int set;
    int forceTargetAwareness;
    uquad nPCPlacementID;
    uquad targetPlacementID;
    byte forcedAwarenessEnabled;
    byte lostTargetAwareness;
    byte lostTargetAwarenessUseTargetPositionForSearch;
    byte treatAsForced;
    float lostTargetTime;
    byte clearAwarenessZone;
    byte useAwarenessZone;
} NPCAwarenessNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath targetPlacementDefaultID;
    NPCAwarenessNode__InputsType inputs;
    byte alwaysUpdateLastKnownPosition;
    byte disableAutomaticSuppression;
    PlacementPath awarenessZonePath;
} NPCAwarenessNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    byte forceRun;
    byte allowToResumeToTheClosestWaypoint;
    FSkip(2);
    int startNodeIndex;
    int stopUsing;
} NPCSetWaypointSetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetWaypointSetNode__InputsType inputs;
    PlacementPath waypointSetPath;
    int movementType;
    PathFollowSpec pathfollowSpec;
} NPCSetWaypointSetNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
} NPCSetGoapSettingsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetGoapSettingsNode__InputsType inputs;
    Ref goapSettingsRef;
    if (CanSeekTo(goapSettingsRef))
    {
        SeekToRef(goapSettingsRef);
        byte goapSettings;
        ReturnFromRef();
    }
    byte forceImmediateReplan : 1;
    byte _Bitfieldpadding7 : 7;
} NPCSetGoapSettingsNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    byte enable;
    byte forceReplan;
} NPCEnableGoalNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCEnableGoalNode__InputsType inputs;
    FSkip(2);
    ActionGraphGoapGoalID goal;
} NPCEnableGoalNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    byte enable;
    byte forceReplan;
    byte resetCooldown;
} NPCEnableActionNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCEnableActionNode__InputsType inputs;
    FSkip(1);
    ActionGraphGoapActionID action;
} NPCEnableActionNode <optimize=false>;

typedef struct
{
    int enable;
    int disable;
    int useDefault;
    FSkip(4);
    uquad placementID;
} NPCEnableAltRangedAttacksNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCEnableAltRangedAttacksNode__InputsType inputs;
} NPCEnableAltRangedAttacksNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    byte enable;
} NPCEnableMeleeAttackNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int attackIndex;
} NPCEnableMeleeAttackNode__NpcMeleeAttackRef <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCEnableMeleeAttackNode__InputsType inputs;
    FSkip(3);
    NPCEnableMeleeAttackNode__NpcMeleeAttackRef meleeAttackRef;
} NPCEnableMeleeAttackNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad combatTargetPlacementID;
    byte useCoverOnTheWay;
    byte stopAttacking;
} NPCSetForcedCombatTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath combatTargetPlacementDefaultID;
    NPCSetForcedCombatTargetNode__InputsType inputs;
    byte stopActionPlanIfChangingTargets;
} NPCSetForcedCombatTargetNode <optimize=false>;

typedef struct
{
    float distanceFromTargetToStartFollowing;
    float tooFarWait;
    float tooFarResumeLeadRatio;
    float stopDistanceToTarget;
    float minDistanceToTargetForSpeedUP;
    float tooFarSpeedMult;
    float tooCloseSpeedMult;
} FollowDistanceSettings <optimize=false>;

typedef struct
{
    byte sideBySideEnabled;
    FSkip(3);
    int followingType;
    float targetSideOffSet;
    float targetForwardOffSet;
    PlacementPath npcPlacementDefaultID;
    PlacementPath targetPlacementDefaultID;
    PlacementPath followConstraintSpline;
    FollowDistanceSettings followDistanceSettings;
    byte matchTargetSpeed;
    FSkip(3);
    float minTargetSpeedBeforeMatching;
    float splineTargetTolerance;
    byte okToPickSideToFollowOn;
    byte addTargetOrientationOffset;
    FSkip(2);
    float nodeReachedDistance;
    float splineLeadProjectionDistance;
    float navLinksDisableDistance;
} NPCFollowNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad combatTargetPlacementID;
    byte forceAltAttack;
    byte abortCurAction;
} NPCForceTargetForNextAttackNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath combatTargetPlacementDefaultID;
    NPCForceTargetForNextAttackNode__InputsType inputs;
} NPCForceTargetForNextAttackNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad fleeTargetPlacementID;
    byte stopFleeing;
} NPCSetForcedFleeTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath fleeTargetPlacementDefaultID;
    NPCSetForcedFleeTargetNode__InputsType inputs;
} NPCSetForcedFleeTargetNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad lookAtTargetPlacementID;
    int clearLookAtTarget;
} NPCSetLookAtTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath lookAtTargetPlacementDefaultID;
    NPCSetLookAtTargetNode__InputsType inputs;
    byte objUseBoneMarker;
    ModelBoneOrMarkerReferenceWithContext objBoneMarker;
} NPCSetLookAtTargetNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad targetPlacementID;
    byte forcePlayerAwareness;
    byte forcedAwarenessEnabled;
} NPCSetForcedInstanceAwarenessNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath targetPlacementDefaultID;
    NPCSetForcedInstanceAwarenessNode__InputsType inputs;
} NPCSetForcedInstanceAwarenessNode <optimize=false>;

typedef struct
{
    int revert;
    int forceRun;
    int forceJog;
    int forceWalk;
    int forceCustomSpeed;
    int useAltJumpHelperFlags;
    int useDefaultJumpHelperFlags;
    int useAltObstacleBlockageFlags;
    int useDefaultObstacleBlockageFlags;
    FSkip(4);
    uquad placementID;
    byte setSpeedMult;
    FSkip(3);
    float speedMultValue;
    float forcedCustomSpeedValue;
    int enableOrientedMovement;
    int disableOrientedMovement;
} NPCSetForcedMovementStyleNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetForcedMovementStyleNode__InputsType inputs;
    float speedMult;
    float forcedCustomSpeed;
} NPCSetForcedMovementStyleNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
} NPCSetPathSharingPenaltyNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetPathSharingPenaltyNode__InputsType inputs;
    float pathSharingPenalty;
} NPCSetPathSharingPenaltyNode <optimize=false>;

typedef struct
{
    byte set;
    byte disableTargetOffset;
    FSkip(6);
    uquad nPCPlacementID;
    float targetOffset;
    float targetOffsetMax;
    float verticalOffset;
    float reduceOffsetTime;
    float reduceOffsetSpeed;
    byte alwaysMissBehindMovingTargets;
} NPCSetTargetOffsetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    NPCSetTargetOffsetNode__InputsType inputs;
} NPCSetTargetOffsetNode <optimize=false>;

typedef struct
{
    int setRepulsor;
    int restoreRepulsor;
    uquad npcPlacementID;
    float repulsorRadius;
    float repulsorInnerCushion;
    float repulsorOuterCushion;
} NPCSetRepulsorNode__InputsType <optimize=false>;

typedef struct
{
    uint repulsorBit0 : 1;
    uint repulsorBit1 : 1;
    uint repulsorBit2 : 1;
    uint repulsorBit3 : 1;
    uint repulsorBit4 : 1;
    uint repulsorBit5 : 1;
    uint repulsorBit6 : 1;
    uint repulsorBit7 : 1;
    uint repulsorBit8 : 1;
    uint repulsorBit9 : 1;
    uint repulsorBit10 : 1;
    uint repulsorBit11 : 1;
    uint repulsorBit12 : 1;
    uint repulsorBit13 : 1;
    uint repulsorBit14 : 1;
    uint repulsorBit15 : 1;
    int _Bitfieldpadding0 : 16;
} RepulsorFlags <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCSetRepulsorNode__InputsType inputs;
    byte bUseCustomRepulsorFlags;
    FSkip(3);
    RepulsorFlags repulsorBlockageFlags;
    RepulsorFlags repulsorIdentityFlags;
} NPCSetRepulsorNode <optimize=false>;

typedef struct
{
    int setBlockageFlag;
    int resetBlockageFlag;
    uquad npcPlacementID;
} NPCSetMoverFlagsNode__InputsType <optimize=false>;

typedef struct
{
    byte linkUsageBit0;
    byte linkUsageBit1;
    byte linkUsageBit2;
    byte linkUsageBit3;
    byte linkUsageBit4;
    byte linkUsageBit5;
    byte linkUsageBit6;
    byte linkUsageBit7;
    byte linkUsageBit8;
    byte linkUsageBit9;
    byte linkUsageBit10;
    byte linkUsageBit11;
    byte linkUsageBit12;
    byte linkUsageBit13;
    byte linkUsageBit14;
    byte linkUsageBit15;
    byte linkUsageBit16;
} ObstacleUsage <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCSetMoverFlagsNode__InputsType inputs;
    ObstacleUsage obstacleBlockageFlags;
} NPCSetMoverFlagsNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    byte pause;
} NPCPauseNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCPauseNode__InputsType inputs;
} NPCPauseNode <optimize=false>;

typedef struct
{
    int set;
    int get;
    uquad placementID;
} NPCSetAmbushModeNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetAmbushModeNode__InputsType inputs;
    byte enable;
} NPCSetAmbushModeNode <optimize=false>;

typedef struct
{
    byte setTeam;
    byte getTeam;
    FSkip(6);
    uquad placementID;
} NPCSetTeamNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetTeamNode__InputsType inputs;
    char team;
    byte resetAwareness;
} NPCSetTeamNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    int stopGuarding;
    float stopGuardingRadius;
    float stopGuardingAngle;
    float stopGuardingTime;
} NPCSetGuardModeNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetGuardModeNode__InputsType inputs;
    byte enable;
    FSkip(3);
    PlacementPath guardPointPath;
    byte stopGuardingForAnyEnemy;
    byte guardZoneEnable;
    FSkip(2);
    PlacementPath guardZonePath;
} NPCSetGuardModeNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
} NPCSetAssignedLocationNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetAssignedLocationNode__InputsType inputs;
    int locationType;
    PlacementPath coverPointPath;
    PlacementPath zonePath;
} NPCSetAssignedLocationNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
} NPCSetNextCoverPointNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSetNextCoverPointNode__InputsType inputs;
    PlacementPath coverPointPath;
    byte forceReplan;
} NPCSetNextCoverPointNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
    int cancelDespawn;
} NPCDespawnNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCDespawnNode__InputsType inputs;
    PlacementPath spawnPointPath;
    byte ignoreIfNotReadyToDespawnNow;
} NPCDespawnNode <optimize=false>;

typedef struct
{
    int drop;
    int pickUp;
    uquad nPCPlacementID;
    uquad objectPlacementID;
} NPCHeldObjectNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath objectPlacementDefaultID;
    NPCHeldObjectNode__InputsType inputs;
} NPCHeldObjectNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad placementID;
} NPCSelectAltProjectileNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCSelectAltProjectileNode__InputsType inputs;
    int projectileAltType;
} NPCSelectAltProjectileNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad usableObjectPlacementID;
    int iInteractionProfile;
    int maxUses;
    int markerIndex;
    byte useCoverOnTheWay;
    FSkip(3);
    int stopUsing;
    int markAsUsed;
} NPCUseObjectNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath usableObjectPlacementDefaultID;
    NPCUseObjectNode__InputsType inputs;
    byte bStopUsingCurrentObject;
    byte bUseImmediately;
    byte bReplanImmediately;
    byte bAbortWhenAnimFinishes;
    byte bStopUsingCasualExit;
    byte bStopUsingSpecificObject;
    byte bStopAllUsers;
    byte bMonitorAllObjectsUsedBySpecifiedNpc;
    byte bUseAgainIfInterruptedBeforeFinishing;
    byte bFilterOutput;
    FSkip(2);
    int iInteractionProfileFilter;
} NPCUseObjectNode <optimize=false>;

typedef struct
{
    uquad nPCInstance;
    uquad targetInstance;
} NPC_IsAware__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    PlacementPath targetPlacementDefaultID;
    NPC_IsAware__InputsType inputs;
    char sensoryType;
} NPC_IsAware <optimize=false>;

typedef struct
{
    uquad nPCPlacement;
} AGNPC_IsGuarding__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefault;
    AGNPC_IsGuarding__InputsType inputs;
} AGNPC_IsGuarding <optimize=false>;

typedef struct
{
    uquad nPC;
} AGNPCGetCurrentTarget__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCDefault;
    AGNPCGetCurrentTarget__InputsType inputs;
    byte useBestTargetIfNoCurrentTarget;
} AGNPCGetCurrentTarget <optimize=false>;

typedef struct
{
    int set;
    int reset;
    float setHearingRadiusAdjustment;
    float setHearingRadiusModifier;
    float setGlobalVisionDistanceModifier;
    float setGlobalVisionHAngleModifier;
    float setGlobalVisionVAngleModifier;
    byte setAlwaysUpright;
    FSkip(3);
    int resetAlwaysUpright;
    int changeSenseConeAttachment;
    uquad instanceID;
} NPCSetSenseConesNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCSetSenseConesNode__InputsType inputs;
    Ref senseConesRef;
    if (CanSeekTo(senseConesRef))
    {
        SeekToRef(senseConesRef);
        byte senseCones;
        ReturnFromRef();
    }
    char senseConeType;
    byte setSenseMarker;
    byte resetSenseMarker;
    ModelBoneOrMarkerReferenceWithObject senseMarkerRef;
    FSkip(1);
    float senseMarkerVerticalOffset;
} NPCSetSenseConesNode <optimize=false>;

typedef struct
{
    int enable;
    int setSCProperties;
    int disable;
    FSkip(4);
    uquad placementID;
} NPCPuppetModeNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int cameraComponent;
} CameraSCData <optimize=false>;

typedef struct
{
    short min;
    short max;
} CameraMoveStick <optimize=false>;

typedef struct
{
    float min;
    float max;
} DefaultDATCurveWithLimits__YAxisValue <optimize=false>;

typedef struct
{
    float min;
    float max;
} DefaultDATCurveWithLimits__XAxisValue <optimize=false>;

typedef struct
{
    float x;
    float y;
} DATCurvePoint <optimize=false>;

typedef struct
{
    DefaultDATCurveWithLimits__YAxisValue xAxis;
    DefaultDATCurveWithLimits__XAxisValue yAxis;
    unsigned int numPoints;
    FSkip(4);
    Ref pointsRef;
    if (CanSeekTo(pointsRef))
    {
        SeekToRef(pointsRef);
        DATCurvePoint points[numPoints];
        ReturnFromRef();
    }
} DefaultDATCurveWithLimits <optimize=false>;

typedef struct
{
    int threatType;
    int threatAmount;
    float threatRadius;
    float threatDecay;
    byte threatMemory;
    FSkip(3);
    float threatInvestigationRange;
    Ref threatFalloffRef;
    if (CanSeekTo(threatFalloffRef))
    {
        SeekToRef(threatFalloffRef);
        DefaultDATCurveWithLimits threatFalloff;
        ReturnFromRef();
    }
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} ThreatResourceData <optimize=false>;

typedef struct
{
    unsigned int value;
} WeaponCameraTypeEnum <optimize=false>;

typedef struct
{
    unsigned int statusMenuState;
} EnumStatusMenuState <optimize=false>;

typedef union
{
    byte unknown;
    int accuracy;
    unsigned int action;
    int actionType;
    AnimGraphGoalClusterType animGraphGoalCluster;
    AnimGraphGoalMovesetType animGraphGoalMoveset;
    AnimGraphGoalStateType animGraphGoalState;
    AnimGraphGoalOverlayType animGraphGoalOverlay;
    AnimGraphGoalPortableType animGraphGoalMainhand;
    AnimGraphGoalPortableType animGraphGoalOffhand;
    byte animGraphGoalFromInteract;
    char animGraphGoalBBeamOrTightRope;
    EventEnum animGraphTrigger;
    Ref barkRef;
    if (CanSeekTo(barkRef))
    {
        SeekToRef(barkRef);
        VocalRef bark;
        ReturnFromRef();
    }
    byte boolean;
    int calculated;
    unsigned int cameraShake;
    int cameraSyncType;
    int cameraEase;
    CameraSCData cameraData;
    CameraMoveStick cameraMoveStick;
    int contactDataType;
    unsigned int controlMode;
    unsigned int craftingRecipe;
    int developmentProgress;
    EventEnum event;
    unsigned int eventTarget;
    unsigned int eventTime;
    unsigned int fallHeights;
    float _float;
    float floatDistanceCm;
    int gymnasticsMove;
    int hitDamageType;
    int integer;
    int integerDistanceCm;
    short interactAnim;
    int interactMode;
    int interactableType;
    unsigned int interactProfile;
    unsigned int inventoryGroup;
    int inventoryPriority;
    int inventoryUrgency;
    int inventoryRelease;
    int inventory;
    InventoryState inventoryState;
    unsigned int inventoryResourceSet;
    int inventoryAnim;
    int inventoryItemAnim;
    ushort hostedSCTimer;
    int jumpDetectionDir;
    int jumpDetectionVel;
    unsigned int markerID;
    unsigned int limbLock;
    unsigned int limbLockGroups;
    unsigned int markupDetectionParams;
    unsigned int seizeAttack;
    unsigned int seizeAttackNPC;
    unsigned int meleeMove;
    unsigned int meleeMoveGroup;
    byte meleeMoveFromInteract;
    int jumpMode;
    unsigned int jumpVelocity;
    unsigned int jumpAirSteerTuneData;
    unsigned int paraglideTuneData;
    unsigned int message;
    unsigned int movementSafety;
    ubyte motionSource;
    int moveSet;
    ubyte networkContinuityBreak;
    int npcMoverMode;
    int npcProcessTime;
    short orientation;
    ushort object;
    EnumPlayNotification playNotification;
    EnumCharacterStance stance;
    int portableAnim;
    unsigned int npcProxyParams;
    unsigned int proxyParams;
    ubyte proxyShiftMethod;
    unsigned int reactiveDodgeParam;
    unsigned int reactiveDodgeParamNPC;
    int sCComparison;
    int sCStateTag;
    unsigned int sensibleProfile;
    unsigned int senseCone;
    int senseType;
    unsigned int senseUnit;
    char sensoryType;
    unsigned int spatialProbe;
    int steeringMode;
    int steeringDirection;
    int steeringCurveGeneric;
    unsigned int steeringCurveCustom;
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
    Ref threatProfileRef;
    if (CanSeekTo(threatProfileRef))
    {
        SeekToRef(threatProfileRef);
        ThreatResourceData threatProfile;
        ReturnFromRef();
    }
    unsigned int tuningData;
    byte unchanged;
    unsigned int useAgent;
    byte useParent;
    unsigned int npcActionStatus;
    int weaponProjectileType;
    WeaponCameraTypeEnum weaponCameraType;
    byte visionModeAllowedCustomCodeCheck;
    EnumStatusMenuState statusMenuState;
    int edgeDeflectionSearchType;
    int turnType;
    ubyte weatherType;
    unsigned int collisionProfile;
    int collisionReactionLevel;
    int corpseStatus;
    int useObjectReaction;
} SCPropertyData__SCPropertyValue;

typedef struct
{
    short miProperty;
    short miDataType;
    FSkip(4);
    SCPropertyData__SCPropertyValue miDataValue;
    FSkip(4);
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} SCPropertyData <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCPuppetModeNode__InputsType inputs;
    unsigned int inputAction;
    byte exitOnAnimComplete;
    byte tryToStartEachFrame;
    FSkip(2);
    Ref sCPropertyListRef;
    unsigned int sCPropertyListCount;
    if (CanSeekTo(sCPropertyListRef))
    {
        SeekToRef(sCPropertyListRef);
        SCPropertyData sCPropertyList[sCPropertyListCount];
        ReturnFromRef();
    }
} NPCPuppetModeNode <optimize=false>;

typedef struct
{
    uquad crowInstID;
    uquad playerID;
    float targetPos[3];
    float alertDist;
    float walkAwayDist;
    float flyAwayDist;
    float flyAwaySpeedHoriz;
    float flyAwaySpeedVert;
    float flyTurnRate;
    float preferredAltitude;
    float circleAroundAtRadius;
    float hoverAndDriftAtRadius;
    float threatThreshold;
    int enable;
    byte useInitDirForFlyAway;
    byte keepInitDirForFlyAway;
    FSkip(2);
    float maxRange;
    byte alerted;
    byte pecker;
    byte perched;
    FSkip(1);
    int land;
    int follow;
    int circle;
    int hover;
    int scare;
    int kill;
} NPCCrowNode__InputsType <optimize=false>;

typedef struct
{
    ushort groundProbe;
    ushort snowProbe;
    ushort forwardProbe;
    ushort flyLeftProbe;
    ushort flyRightProbe;
} NPCCrowNode__SpatialProbes <optimize=false>;

typedef struct
{
    PlacementPath crowInstIDDefault;
    PlacementPath playerIDDefault;
    NPCCrowNode__InputsType inputs;
    NPCCrowNode__SpatialProbes probes;
    FSkip(2);
    float idleWalkSpeed;
    float alertTimeOut;
    float walkAwaySpeedMin;
    float walkAwaySpeedMax;
    float movementDeltaLimit;
    float rotationDamping;
} NPCCrowNode <optimize=false>;

typedef struct
{
    uquad nPC;
} AGNPC_GetWeapon__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCDefault;
    AGNPC_GetWeapon__InputsType inputs;
} AGNPC_GetWeapon <optimize=false>;

typedef struct
{
    uquad npcInstance;
    int enable;
} NPC_SetPlanLayer__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPC_SetPlanLayer__InputsType inputs;
    int planLayer;
} NPC_SetPlanLayer <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCPlacementID;
    uquad sourcePlacementID;
    float sourceLocation[3];
    float threat;
    float radius;
} NPCThreatenNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    PlacementPath sourcePlacementDefaultID;
    NPCThreatenNode__InputsType inputs;
    byte ambient;
    byte elevation;
    byte seen;
    byte heard;
    byte smelled;
    byte predatory;
    byte attenuate;
    FSkip(5);
    Ref attenuationCurveRef;
    if (CanSeekTo(attenuationCurveRef))
    {
        SeekToRef(attenuationCurveRef);
        DefaultDATCurveWithLimits attenuationCurve;
        ReturnFromRef();
    }
} NPCThreatenNode <optimize=false>;

typedef struct
{
    byte holdFireValue;
    FSkip(7);
    uquad placementID;
} AGNPC_TurretHoldFire__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AGNPC_TurretHoldFire__InputsType inputs;
} AGNPC_TurretHoldFire <optimize=false>;

typedef struct
{
    unsigned int hash;
    FSkip(4);
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
} CorpseGroupID <optimize=false>;

typedef struct
{
    int add;
    FSkip(4);
    uquad placementID;
} AGNPC_CorpseManager__Input_Add <optimize=false>;

typedef struct
{
    byte removeByGroup;
    byte removeAll;
} AGNPC_CorpseManager__Input_Remove <optimize=false>;

typedef struct
{
    int removeComponents;
    FSkip(4);
    uquad placementID;
} AGNPC_CorpseManager__Input_RemoveComponents <optimize=false>;

typedef struct
{
    int enableLowFrameRateRemove;
    int disableLowFrameRateRemove;
} AGNPC_CorpseManager__Input_EnableLowFrameRateRemoval <optimize=false>;

typedef union
{
    AGNPC_CorpseManager__Input_Add corpseManagerAdd;
    AGNPC_CorpseManager__Input_Remove corpseManagerRemove;
    AGNPC_CorpseManager__Input_RemoveComponents corpseManagerRemoveComponents;
    AGNPC_CorpseManager__Input_EnableLowFrameRateRemoval corpseManagerEnableLowFrameRateCorpseRemoval;
} AGNPC_CorpseManager__InputsType;

typedef struct
{
    int type;
    byte useAltActiongraph;
    FSkip(3);
    PlacementPath placementDefaultID;
    CorpseGroupID corpseGroupID;
    AGNPC_CorpseManager__InputsType inputs;
} AGNPC_CorpseManager <optimize=false>;

typedef struct
{
    int turnOn;
    int turnOff;
    uquad plannerObstacle;
    int groupID;
} NPCPlannerObstacle__InputsType <optimize=false>;

typedef struct
{
    NPCPlannerObstacle__InputsType inputs;
    PlacementPath defaultPlannerObstacle;
} NPCPlannerObstacle <optimize=false>;

typedef struct
{
    byte makePlan;
    FSkip(3);
    ActionGraphGoapGoalID goal;
} NPCPlannerCheckGoalNode__InputsType <optimize=false>;

typedef struct
{
    NPCPlannerCheckGoalNode__InputsType inputs;
    unsigned int numActions;
    FSkip(4);
    Ref actionListRef;
    if (CanSeekTo(actionListRef))
    {
        SeekToRef(actionListRef);
        ActionGraphGoapActionID actionList[numActions];
        ReturnFromRef();
    }
} NPCPlannerCheckGoalNode <optimize=false>;

typedef struct
{
    int set;
    FSkip(4);
    uquad nPCInstanceID;
    uquad enemyInstanceID;
    int callForHelpEnable;
    int callForHelpDisable;
    int callForSearchEnable;
    int callForSearchDisable;
} NPCCallForHelpNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    PlacementPath enemyPlacementDefaultID;
    NPCCallForHelpNode__InputsType inputs;
    byte bNotAnimated;
} NPCCallForHelpNode <optimize=false>;

typedef struct
{
    byte friendCheck;
    byte enemyCheck;
    byte neutralCheck;
    FSkip(5);
    uquad npcInstanceID;
    uquad otherInstanceID;
} NPCTeamCheckNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    PlacementPath otherPlacementDefaultID;
    NPCTeamCheckNode__InputsType inputs;
    char otherTeam;
} NPCTeamCheckNode <optimize=false>;

typedef struct
{
    byte forceOn;
    byte forceOff;
    byte automaticMode;
    FSkip(5);
    uquad instanceID;
} NPCAssaultModeNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCAssaultModeNode__InputsType inputs;
} NPCAssaultModeNode <optimize=false>;

typedef struct
{
    byte forceOn;
    byte setCooldown;
    byte setCustom;
    FSkip(5);
    uquad instanceID;
} NPCAlertLevelNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    char alertLevel;
    FSkip(3);
    float cooldown;
    NPCAlertLevelNode__InputsType inputs;
} NPCAlertLevelNode <optimize=false>;

typedef struct
{
    uquad instanceID;
    int get;
    float set;
    float modify;
    float enable;
    float disable;
    float pause;
    float unPause;
    float setMin;
    float setMax;
    float enableAll;
    float disableAll;
    float setNeedsUse;
} NPCNeedsNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int needID;
} ActionGraphNeedID <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    NPCNeedsNode__InputsType inputs;
    ActionGraphNeedID needID;
    byte useOnlyObjectsWithNeeds;
} NPCNeedsNode <optimize=false>;

typedef struct
{
    int startFollowing;
    FSkip(4);
    uquad nPCInstanceID;
    uquad gestureTargetInstanceID;
} NPCGestureNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath npcPlacementDefaultID;
    PlacementPath targetPlacementDefaultID;
    NPCGestureNode__InputsType inputs;
    char gestureType;
} NPCGestureNode <optimize=false>;

typedef struct
{
    uquad sequenceId;
} NPCGetEventInfoNode__InputsType <optimize=false>;

typedef struct
{
    NPCGetEventInfoNode__InputsType inputs;
} NPCGetEventInfoNode <optimize=false>;

typedef struct
{
    byte setMaxlevelLow;
    byte setMaxlevelMedium;
    byte resetMaxlevel;
    FSkip(5);
    uquad nPCPlacementID;
} NPCCollisionReaction__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCPlacementDefaultID;
    NPCCollisionReaction__InputsType inputs;
} NPCCollisionReaction <optimize=false>;

typedef struct
{
    uquad nPCRegisterInstanceId;
    uquad nPCUnRegisterInstanceId;
} NPCStairHelper__InputsType <optimize=false>;

typedef struct
{
    PlacementPath nPCRegisterInstanceId;
    PlacementPath nPCUnRegisterInstanceId;
    NPCStairHelper__InputsType inputs;
} NPCStairHelper <optimize=false>;

typedef struct
{
    uquad nPCInstance;
} NPCUpdateAccuracySettings__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    NPCUpdateAccuracySettings__InputsType inputs;
} NPCUpdateAccuracySettings <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad attachPlacementID;
    float position[3];
    float additional43LocalOffset[3];
    float localRotation[3];
    float worldOffset[3];
    float worldRotation[3];
    float facingOffset[3];
    float facingRotation[3];
} ScaleformMovieNode__InputsType <optimize=false>;

typedef struct
{
    int widgetType;
    int widgetGroup;
    Ref movieClipRef;
    if (CanSeekTo(movieClipRef))
    {
        SeekToRef(movieClipRef);
        string movieClip;
        ReturnFromRef();
    }
    byte precache;
    FSkip(7);
    PlacementPath playerIDDefault;
    PlacementPath attachPlacementDefaultID;
    PlacementPath instanceID;
    ScaleformMovie movieData;
    FSkip(4);
    ScaleformMovieNode__InputsType inputs;
    byte openSynchronously;
} ScaleformMovieNode <optimize=false>;

typedef struct
{
    byte start;
    byte stop;
    FSkip(2);
    float slackness;
    byte addNoise;
    FSkip(3);
    float noiseMagnitude;
    float setRopeThickness;
    float setRenderLengthPerV;
    float setGravity;
    float setLinearDensity;
    float setMu;
    byte setEnableWind;
    FSkip(3);
    float setWindMultiplier;
    PlacementPath placement1;
    PlacementPath placement2;
} RopeVisualOnly__Input_InstanceToInstance <optimize=false>;

typedef struct
{
    byte start;
    byte stop;
    FSkip(2);
    float slackness;
    byte addNoise;
    FSkip(3);
    float noiseMagnitude;
    float setRopeThickness;
    float setRenderLengthPerV;
    float setGravity;
    float setLinearDensity;
    float setMu;
    byte setEnableWind;
    FSkip(3);
    float setWindMultiplier;
    PlacementPath placement1;
    float position2[3];
} RopeVisualOnly__Input_InstanceToWorld <optimize=false>;

typedef struct
{
    byte start;
    byte stop;
    FSkip(2);
    float slackness;
    byte addNoise;
    FSkip(3);
    float noiseMagnitude;
    float setRopeThickness;
    float setRenderLengthPerV;
    float setGravity;
    float setLinearDensity;
    float setMu;
    byte setEnableWind;
    FSkip(3);
    float setWindMultiplier;
    float position1[3];
    float position2[3];
} RopeVisualOnly__Input_WorldToWorld <optimize=false>;

typedef struct
{
    byte start;
    byte stop;
    FSkip(2);
    float slackness;
    byte addNoise;
    FSkip(3);
    float noiseMagnitude;
    float setRopeThickness;
    float setRenderLengthPerV;
    float setGravity;
    float setLinearDensity;
    float setMu;
    byte setEnableWind;
    FSkip(3);
    float setWindMultiplier;
    PlacementPath placement1;
} RopeVisualOnly__Input_InstanceToFree <optimize=false>;

typedef union
{
    RopeVisualOnly__Input_InstanceToInstance instanceToInstance;
    RopeVisualOnly__Input_InstanceToWorld instanceToWorld;
    RopeVisualOnly__Input_WorldToWorld worldToWorld;
    RopeVisualOnly__Input_InstanceToFree instanceToFree;
} RopeVisualOnly__InputsType;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext boneMarker1;
    ModelBoneOrMarkerReferenceWithContext boneMarker2;
} RopeVisualOnly__Props_InstanceToInstance <optimize=false>;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext boneMarker1;
} RopeVisualOnly__Props_InstanceToWorld <optimize=false>;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext boneMarker1;
} RopeVisualOnly__Props_InstanceToFree <optimize=false>;

typedef union
{
    RopeVisualOnly__Props_InstanceToInstance instanceToInstance;
    RopeVisualOnly__Props_InstanceToWorld instanceToWorld;
    int worldToWorld;
    RopeVisualOnly__Props_InstanceToFree instanceToFree;
} RopeVisualOnly__PropsType;

typedef struct
{
    float renderRadius;
    FSkip(4);
    Ref ropeMaterialRef;
    float vLength;
    float uWidth;
    byte bSmoothRope;
    FSkip(3);
    float maxSmoothDistFromPoint;
    byte bRenderHighlight;
    byte bCastShadows;
    FSkip(2);
    unsigned int siRenderType;
} RopeRenderData <optimize=false>;

typedef struct
{
    float bendingStiffness;
    float beta;
    float damping;
    float gravity;
    int iterations;
    float linearDensity;
    float minSegmentLength;
    float mu;
    int sleepTime;
    float sleepVelocity;
    float softness;
    float taper;
    float massTaper;
} ParticleTuneData <optimize=false>;

typedef struct
{
    int ropeType;
    RopeVisualOnly__InputsType inputs;
    RopeVisualOnly__PropsType props;
    RopeRenderData ropeRender;
    byte useParticleString;
    FSkip(3);
    ParticleTuneData particleString;
    byte enableWind;
    FSkip(3);
    float windMult;
} RopeVisualOnly <optimize=false>;

typedef struct
{
    float startPos[3];
    byte startAttach;
    FSkip(3);
    float endPos[3];
    byte endAttach;
    FSkip(3);
    float compress;
    byte draw;
} RopeVisualOnlyV2__InputsType <optimize=false>;

typedef struct
{
    RopeRenderData ropeRender;
    int numConstraints;
    int iterationCount;
    float windForceMult;
    float gravityMult;
    RopeVisualOnlyV2__InputsType inputs;
} RopeVisualOnlyV2 <optimize=false>;

typedef struct
{
    uquad placement1;
    uquad placement2;
    byte draw;
} RopeWithCollision__InputsType <optimize=false>;

typedef struct
{
    RopeWithCollision__InputsType inputs;
    FSkip(3);
    RopeRenderData ropeRender;
    ushort zoneID;
    FSkip(2);
    float mass;
    float length;
    float linearDamping;
    float angularDamping;
    float windscale;
    float softness;
    float iterations;
    byte attachBegin;
    byte attachEnd;
    FSkip(2);
    unsigned int zoneMarkerZone;
    PlacementPath zoneMarkerID1;
    PlacementPath zoneMarkerID2;
    PlacementPath zoneMarkerID3;
    PlacementPath zoneMarkerID4;
    PlacementPath zoneMarkerID5;
} RopeWithCollision <optimize=false>;

typedef struct
{
    unsigned int zoneID;
    byte forceZoneLoad;
    FSkip(1);
    ushort zoneDep;
} ZoneIDNode <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectHasComponent__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ObjectHasComponent__InputsType inputs;
    int type;
} ObjectHasComponent <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectEnableComponent__InputsType <optimize=false>;

typedef union
{
    byte animated;
    byte beacon;
    byte cloth;
    byte flammable;
    byte pointOfInterest;
    int ragdoll;
    byte rigidbody;
    byte helicopter;
    byte p2PMarker;
} ObjectEnableComponent__ComponentData;

typedef struct
{
    PlacementPath placementDefault;
    ObjectEnableComponent__InputsType inputs;
    int type;
    ObjectEnableComponent__ComponentData data;
} ObjectEnableComponent <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectDisableComponent__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    ObjectDisableComponent__InputsType inputs;
    int type;
} ObjectDisableComponent <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectInstanceIDNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    ObjectInstanceIDNode__InputsType inputs;
    byte outputOnInit;
} ObjectInstanceIDNode <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectArmorNode__Input_Base <optimize=false>;

typedef struct
{
    uquad placementID;
    int health;
} ObjectArmorNode__SetArmorInput <optimize=false>;

typedef union
{
    ObjectArmorNode__Input_Base enableArmor;
    ObjectArmorNode__Input_Base disableArmor;
    ObjectArmorNode__SetArmorInput setArmorHealth;
    ObjectArmorNode__Input_Base getArmorHealth;
    ObjectArmorNode__Input_Base resetArmorHealth;
    ObjectArmorNode__Input_Base isArmorActive;
    ObjectArmorNode__Input_Base isHelmetActive;
} ObjectArmorNode__InputsType;

typedef struct
{
    unsigned int groupID;
    unsigned int armorID;
} ArmorReferenceUnion__ComponentObjectType <optimize=false>;

typedef struct
{
    int groupID;
    int armorID;
} ArmorReferenceUnion__PlayerType <optimize=false>;

typedef union
{
    ArmorReferenceUnion__ComponentObjectType componentObject;
    ArmorReferenceUnion__PlayerType player;
} ArmorReferenceUnion;

typedef struct
{
    int objectType;
    ArmorReferenceUnion armorRef;
} ArmorReference <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int type;
    FSkip(4);
    ObjectArmorNode__InputsType inputs;
    ArmorReference armorReference;
} ObjectArmorNode <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectDamageNode__Input_Base <optimize=false>;

typedef struct
{
    uquad placementID;
    int damage;
} ObjectDamageNode__SetDamageInput <optimize=false>;

typedef union
{
    ObjectDamageNode__Input_Base enableDamagePrim;
    ObjectDamageNode__Input_Base disableDamagePrim;
    ObjectDamageNode__Input_Base turnOnManualDamage;
    ObjectDamageNode__Input_Base turnOffManualDamage;
    ObjectDamageNode__SetDamageInput setDamagePrimStrength;
    ObjectDamageNode__Input_Base getDamagePrimStrength;
} ObjectDamageNode__InputsType;

typedef struct
{
    unsigned int primID;
} DamagePrimUnion__ComponentObjectType <optimize=false>;

typedef struct
{
    int primID;
} DamagePrimUnion__PlayerType <optimize=false>;

typedef union
{
    DamagePrimUnion__ComponentObjectType componentObject;
    DamagePrimUnion__PlayerType player;
} DamagePrimUnion;

typedef struct
{
    int objectType;
    DamagePrimUnion primRef;
} DamagePrimReference <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int type;
    FSkip(4);
    ObjectDamageNode__InputsType inputs;
    DamagePrimReference damageReference;
} ObjectDamageNode <optimize=false>;

typedef struct
{
    uquad spawnSourceID;
    unsigned int spawnIndex;
    float alternatePosition[3];
} SpawnNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath spawnSourceIDDefault;
    SpawnNode__InputsType inputs;
    byte removeWithParent;
} SpawnNode <optimize=false>;

typedef struct
{
    float position[3];
    float rotation[3];
} SpawnObjectNode__Input_HostSpawn <optimize=false>;

typedef struct
{
    float position[3];
    float rotation[3];
    uquad placementID;
} SpawnObjectNode__Input_AuthoritySpawn <optimize=false>;

typedef union
{
    SpawnObjectNode__Input_HostSpawn spawnOnHost;
    SpawnObjectNode__Input_AuthoritySpawn spawnOnMachineWithInstanceAuthority;
} SpawnObjectNode__InputsType;

typedef struct
{
    ushort objectID;
    FSkip(2);
    int chance;
} SpawnObjectNode__SpawnableObject <optimize=false>;

typedef struct
{
    ushort objectID;
    FSkip(2);
    int chance;
} SpawnObjectNode__SpawnableObjectWeakRef <optimize=false>;

typedef struct
{
    int nodeType;
    SpawnObjectNode__InputsType inputs;
    byte removeWithParent;
    byte useWeakRefs;
    FSkip(2);
    unsigned int numSpawnableObjects;
    FSkip(4);
    Ref spawnableObjectsRef;
    /*
    if (CanSeekTo(spawnableObjectsRef))
    {
        SeekToRef(spawnableObjectsRef);
        SpawnObjectNode__SpawnableObject spawnableObjects[numSpawnableObjects];
        ReturnFromRef();
    }
    */
    unsigned int numSpawnableObjectWeakRefs;
    FSkip(4);
    Ref spawnableObjectWeakRefsRef;
    /*
    if (CanSeekTo(spawnableObjectWeakRefsRef))
    {
        SeekToRef(spawnableObjectWeakRefsRef);
        SpawnObjectNode__SpawnableObjectWeakRef spawnableObjectWeakRefs[numSpawnableObjectWeakRefs];
        ReturnFromRef();
    }
    */
} SpawnObjectNode <optimize=false>;

typedef struct
{
    float position[3];
    float rotation[3];
    int spawnIndex;
} SpawnObjectSelectableNode__Input_HostSpawn <optimize=false>;

typedef struct
{
    float position[3];
    float rotation[3];
    int spawnIndex;
    FSkip(4);
    uquad placementID;
} SpawnObjectSelectableNode__Input_AuthoritySpawn <optimize=false>;

typedef union
{
    SpawnObjectSelectableNode__Input_HostSpawn spawnOnHost;
    SpawnObjectSelectableNode__Input_AuthoritySpawn spawnOnMachineWithInstanceAuthority;
} SpawnObjectSelectableNode__InputsType;

typedef struct
{
    ushort objectID;
    FSkip(2);
    int chance;
} SpawnObjectSelectableNode__SpawnableObject <optimize=false>;

typedef struct
{
    int nodeType;
    SpawnObjectSelectableNode__InputsType inputs;
    byte staticSeed;
    FSkip(3);
    unsigned int numSpawnableObjects;
    FSkip(4);
    Ref spawnableObjectsRef;
    if (CanSeekTo(spawnableObjectsRef))
    {
        SeekToRef(spawnableObjectsRef);
        SpawnObjectSelectableNode__SpawnableObject spawnableObjects[numSpawnableObjects];
        ReturnFromRef();
    }
} SpawnObjectSelectableNode <optimize=false>;

typedef struct
{
    float position[3];
    FSkip(4);
    uquad ignorePlacementID;
    uquad blamePlacementID;
} SpawnSquibNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int numPoints;
    FSkip(4);
    Ref pointsRef;
    if (CanSeekTo(pointsRef))
    {
        SeekToRef(pointsRef);
        DATCurvePoint points[numPoints];
        ReturnFromRef();
    }
} DefaultDATCurve <optimize=false>;

typedef struct
{
    int minDamage;
    int maxDamage;
    float minDistance;
    float maxDistance;
    DefaultDATCurve damageCurve;
} SquibDefinition__DistanceDamage <optimize=false>;

typedef struct
{
    int minForce;
    int maxForce;
    float minDistance;
    float maxDistance;
    DefaultDATCurve forceCurve;
} SquibDefinition__DistanceForce <optimize=false>;

typedef struct
{
    ushort trait;
    FSkip(2);
    float radiusModifier;
    int damageType;
    float damageAmount;
} SquibDefinition__TraitModifiedData <optimize=false>;

typedef struct
{
    int damageType;
    float radius;
    byte affectsPlayer;
    byte affectsEnemy;
    byte affectsOther;
    byte affectsAllies;
    byte bIgnoreHealthStates;
    byte flammable;
    byte craftedItemDamage;
    byte molotov;
    byte indirectDamage;
    byte obstruct;
    byte obstructedByObjects;
    FSkip(1);
    float verticalBoostMin;
    float verticalBoostMax;
    SquibDefinition__DistanceDamage damage;
    SquibDefinition__DistanceForce force;
    FSkip(4);
    Ref modifiersRef;
    unsigned int modifiersCount;
    if (CanSeekTo(modifiersRef))
    {
        SeekToRef(modifiersRef);
        SquibDefinition__TraitModifiedData modifiers[modifiersCount];
        ReturnFromRef();
    }
    byte bCapLinearVelocity;
    byte bCapAngularVelocity;
    FSkip(2);
    float capLinearVelocity[3];
    float capAngularVelocity[3];
    Ref nPCEventRef;
    if (CanSeekTo(nPCEventRef))
    {
        SeekToRef(nPCEventRef);
        byte nPCEvent;
        ReturnFromRef();
    }
} SquibDefinition <optimize=false>;

typedef struct
{
    SpawnSquibNode__InputsType inputs;
    PlacementPath ignoreInstanceIDDefault;
    PlacementPath blameInstanceIDDefault;
    byte bSendIgnoreInstance;
    byte bSendBlameInstance;
    byte bAllowSelfBlameInstance;
    byte bDoNotBlameDefaultInstance;
    byte override;
    FSkip(1);
    ushort objectID;
    byte birthObject;
    byte wakeRB;
    FSkip(2);
    float automaticThreatBurst;
    byte debugDrawSphere;
    FSkip(3);
    unsigned int squibID;
    SquibDefinition squib;
} SpawnSquibNode <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectDestructNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ObjectDestructNode__InputsType inputs;
    byte children;
} ObjectDestructNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Projectile_SetStateNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    Projectile_SetStateNode__InputsType inputs;
    char projectileState;
} Projectile_SetStateNode <optimize=false>;

typedef struct
{
    uquad placementID;
} Interact_Set__InputsType <optimize=false>;

typedef struct
{
    unsigned int setEngagementProp;
    PlacementPath placementDefault;
    FSkip(4);
    Interact_Set__InputsType inputs;
} Interact_Set <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectGetComponentProperties__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int componentType;
    FSkip(4);
    ObjectGetComponentProperties__InputsType inputs;
} ObjectGetComponentProperties <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectEnableInteraction__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    ObjectEnableInteraction__InputsType inputs;
    byte enable;
    FSkip(3);
    int interactIndex;
    int interactEntityType;
} ObjectEnableInteraction <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    int profileNumber;
    FSkip(4);
    uquad object;
    uquad character;
} AGObjectInteractForceStart__InputsType <optimize=false>;

typedef struct
{
    AGObjectInteractForceStart__InputsType inputs;
    byte forceSameFrameAnimUpdate;
} AGObjectInteractForceStart <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
    uquad character;
} AGObjectInteractForceEnd__InputsType <optimize=false>;

typedef struct
{
    AGObjectInteractForceEnd__InputsType inputs;
} AGObjectInteractForceEnd <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
    uquad character;
} AGObjectInteractForceComplete__InputsType <optimize=false>;

typedef struct
{
    AGObjectInteractForceComplete__InputsType inputs;
} AGObjectInteractForceComplete <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
    uquad character;
} AGObjectInteractForceAbort__InputsType <optimize=false>;

typedef struct
{
    AGObjectInteractForceAbort__InputsType inputs;
} AGObjectInteractForceAbort <optimize=false>;

typedef struct
{
    unsigned int interactProfileZone;
    unsigned int interactProfileIndex;
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
} AGObjectInteractProfileEnable__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectPlacementPath;
    AGObjectInteractProfileEnable__InputsType inputs;
} AGObjectInteractProfileEnable <optimize=false>;

typedef struct
{
    uquad instanceID;
    byte begin;
    byte end;
    byte detach;
    FSkip(5);
    Ref interactProfileNameRef;
    if (CanSeekTo(interactProfileNameRef))
    {
        SeekToRef(interactProfileNameRef);
        string interactProfileName;
        ReturnFromRef();
    }
} AGObjectInteractPushPull__Input_Monitor <optimize=false>;

typedef struct
{
    uquad instanceID;
    byte enable;
    FSkip(7);
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
} AGObjectInteractPushPull__Input_EnableDisable <optimize=false>;

typedef union
{
    AGObjectInteractPushPull__Input_Monitor monitorPushPull;
    AGObjectInteractPushPull__Input_EnableDisable enableDisable;
} AGObjectInteractPushPull__InputsType;

typedef struct
{
    PlacementPath placementDefaultID;
    int type;
    FSkip(4);
    AGObjectInteractPushPull__InputsType inputs;
} AGObjectInteractPushPull <optimize=false>;

typedef struct
{
    unsigned int interactProfileZone;
    unsigned int interactProfileIndex;
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
} AGObjectInteractSuppressUI__InputsType <optimize=false>;

typedef struct
{
    PlacementPath object;
    AGObjectInteractSuppressUI__InputsType inputs;
} AGObjectInteractSuppressUI <optimize=false>;

typedef struct
{
    byte setProperties;
    byte startFilling;
    byte stopFilling;
    byte startEmptying;
    byte stopEmptying;
    FSkip(3);
    float percentFull;
    float fillTime;
    float emptyTime;
    FSkip(4);
    uquad placementID;
} AGObjectFluidContainerSetProperties__InputsType <optimize=false>;

typedef struct
{
    AGObjectFluidContainerSetProperties__InputsType inputs;
} AGObjectFluidContainerSetProperties <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad placementID;
} AGObjectInteractEvent__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    AGObjectInteractEvent__InputsType inputs;
} AGObjectInteractEvent <optimize=false>;

typedef struct
{
    uquad placementID;
} AGObjectInteractGlobalUI__InputsType <optimize=false>;

typedef struct
{
    unsigned int attachType;
    FSkip(4);
    AGObjectInteractGlobalUI__InputsType inputs;
} AGObjectInteractGlobalUI <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
} AGObjectInteractCondition__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectDefault;
    AGObjectInteractCondition__InputsType inputs;
} AGObjectInteractCondition <optimize=false>;

typedef struct
{
    uquad placementID;
    byte bSurveyObject;
    FSkip(3);
    float highlightedDistance;
    float fadeInTime;
    float fadeOutTime;
    ActionGraphBitFlags drawGroupFlags;
} SurvivalInstinctNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    byte bNodeUseOnly;
    FSkip(3);
    unsigned int renderTypeOverride;
    byte renderTypeOverrideForOcclusion;
    FSkip(3);
    int changeType;
    byte noDrawGroupMeansRenderAll;
    byte propagateToChildren;
    FSkip(6);
    SurvivalInstinctNode__InputsType inputs;
} SurvivalInstinctNode <optimize=false>;

typedef struct
{
    byte active;
    FSkip(3);
    int clueNumber;
} SurvivalInstinctSurveyNode__InputsType <optimize=false>;

typedef struct
{
    SurvivalInstinctSurveyNode__InputsType inputs;
} SurvivalInstinctSurveyNode <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
} AGObjectAdvertiseEvent__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectDefault;
    AGObjectAdvertiseEvent__InputsType inputs;
} AGObjectAdvertiseEvent <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
} AGObjectAdvertiseProfileEnable__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectDefault;
    AGObjectAdvertiseProfileEnable__InputsType inputs;
} AGObjectAdvertiseProfileEnable <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
    uquad character;
} AGObjectAdvertiseRequestStart__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectDefault;
    PlacementPath characterDefault;
    AGObjectAdvertiseRequestStart__InputsType inputs;
    byte shouldPlayOnce;
} AGObjectAdvertiseRequestStart <optimize=false>;

typedef struct
{
    Ref profileNameRef;
    if (CanSeekTo(profileNameRef))
    {
        SeekToRef(profileNameRef);
        string profileName;
        ReturnFromRef();
    }
    uquad object;
    uquad character;
} AGObjectAdvertiseRequestStop__InputsType <optimize=false>;

typedef struct
{
    PlacementPath objectDefault;
    PlacementPath characterDefault;
    AGObjectAdvertiseRequestStop__InputsType inputs;
} AGObjectAdvertiseRequestStop <optimize=false>;

typedef struct
{
} LiveSpawnerRelayNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    FSkip(-32);
    LiveSpawnerRelayNode__InputsType inputs;
} LiveSpawnerRelayNode <optimize=false>;

typedef struct
{
    int activate;
    FSkip(4);
    uquad placementID;
} BuffActivateNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    BuffActivateNode__InputsType inputs;
    unsigned int buff;
} BuffActivateNode <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} ObjectInputsNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} ObjectInputsNode__OutputsCount <optimize=false>;

typedef struct
{
    ObjectInputsNode__OutputsType outputs;
    ObjectInputsNode__OutputsCount outputsCountWorkaround;
} ObjectInputsNode <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} ObjectOutputsNode__InputsCount <optimize=false>;

typedef struct
{
    ObjectOutputsNode__InputsCount inputsCountWorkaround;
} ObjectOutputsNode <optimize=false>;

typedef struct
{
    Ref inputListRef;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList;
        ReturnFromRef();
    }
} ActionGraphInstanceInputsNode__OutputsType <optimize=false>;

typedef struct
{
    Ref inputListRef;
    unsigned int inputCount;
    if (CanSeekTo(inputListRef))
    {
        SeekToRef(inputListRef);
        ScriptableNodeInputSocketHidden inputList[inputCount];
        ReturnFromRef();
    }
} ActionGraphInstanceInputsNode__OutputsCount <optimize=false>;

typedef struct
{
    ActionGraphInstanceInputsNode__OutputsType outputs;
    ActionGraphInstanceInputsNode__OutputsCount outputsCountWorkaround;
} ActionGraphInstanceInputsNode <optimize=false>;

typedef struct
{
    Ref outputListRef;
    unsigned int outputCount;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        ScriptableNodeOutputSocket outputList[outputCount];
        ReturnFromRef();
    }
} ActionGraphInstanceOutputsNode__InputsCount <optimize=false>;

typedef struct
{
    ActionGraphInstanceOutputsNode__InputsCount inputsCountWorkaround;
} ActionGraphInstanceOutputsNode <optimize=false>;

typedef struct
{
} ObjectTransitionNode__AdditionalParams_Basic <optimize=false>;

typedef struct
{
    unsigned int amount;
    int damageType;
} ObjectTransitionNode__AdditionalDamageType <optimize=false>;

typedef struct
{
    unsigned int numExtraDamageTypes;
    FSkip(4);
    Ref extraDamageTypeListRef;
    if (CanSeekTo(extraDamageTypeListRef))
    {
        SeekToRef(extraDamageTypeListRef);
        ObjectTransitionNode__AdditionalDamageType extraDamageTypeList[numExtraDamageTypes];
        ReturnFromRef();
    }
} ObjectTransitionNode__AdditionalParams_Damage <optimize=false>;

typedef struct
{
    ushort interactProfileZone;
    FSkip(2);
    unsigned int interactIndex;
    int userIndex;
} ObjectTransitionNode__AdditionalParams_Interact <optimize=false>;

typedef union
{
    ObjectTransitionNode__AdditionalParams_Basic onAutomatic;
    ObjectTransitionNode__AdditionalParams_Basic onInvalid;
    ObjectTransitionNode__AdditionalParams_Basic onTimer;
    ObjectTransitionNode__AdditionalParams_Basic onScript;
    ObjectTransitionNode__AdditionalParams_Basic onDestruct;
    ObjectTransitionNode__AdditionalParams_Basic onForce;
    ObjectTransitionNode__AdditionalParams_Basic onTorque;
    ObjectTransitionNode__AdditionalParams_Basic onUprightGained;
    ObjectTransitionNode__AdditionalParams_Basic onUprightLost;
    ObjectTransitionNode__AdditionalParams_Basic onDeath;
    ObjectTransitionNode__AdditionalParams_Damage onDamage;
    ObjectTransitionNode__AdditionalParams_Basic onHealth;
    ObjectTransitionNode__AdditionalParams_Basic onEngage;
    ObjectTransitionNode__AdditionalParams_Basic onPortableAction;
    ObjectTransitionNode__AdditionalParams_Basic onPortableInserted;
    ObjectTransitionNode__AdditionalParams_Basic onPortableRemoved;
    ObjectTransitionNode__AdditionalParams_Basic onShotByPlayer;
    ObjectTransitionNode__AdditionalParams_Interact onInteractStart;
    ObjectTransitionNode__AdditionalParams_Interact onInteractFail;
    ObjectTransitionNode__AdditionalParams_Interact onInteractAbort;
    ObjectTransitionNode__AdditionalParams_Interact onInteractComplete;
    ObjectTransitionNode__AdditionalParams_Basic onEmpty;
    ObjectTransitionNode__AdditionalParams_Basic onGrappleAttach;
    ObjectTransitionNode__AdditionalParams_Basic onGrappleRelease;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileOverlapWater;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileFly;
    ObjectTransitionNode__AdditionalParams_Basic onProjectilePassThrough;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileAttached;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileExplode;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileUnattached;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileBounceOffFail;
    ObjectTransitionNode__AdditionalParams_Basic onProjectileRetract;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponFire;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponReload;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponEquip;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponUnequip;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponAmmoZero;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponClipZero;
    ObjectTransitionNode__AdditionalParams_Basic onWeaponDrop;
    ObjectTransitionNode__AdditionalParams_Basic onFireIgnite;
    ObjectTransitionNode__AdditionalParams_Basic onFireBurnOut;
    ObjectTransitionNode__AdditionalParams_Basic onFireSnuff;
    ObjectTransitionNode__AdditionalParams_Basic onFireDouse;
    ObjectTransitionNode__AdditionalParams_Basic onFireStartedHeating;
    ObjectTransitionNode__AdditionalParams_Basic onFireCoolingOff;
} ObjectTransitionNode__AdditionalParams_Union;

typedef struct
{
    uquad placementID;
} ObjectTransitionNode__Input_Null <optimize=false>;

typedef struct
{
    uquad placementID;
    float value;
} ObjectTransitionNode__Input_Timer <optimize=false>;

typedef struct
{
    uquad placementID;
    float value;
} ObjectTransitionNode__Input_1Float <optimize=false>;

typedef struct
{
    uquad placementID;
    float value;
} ObjectTransitionNode__Input_Angle <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad attackerID;
    unsigned int amount;
    int damageType;
} ObjectTransitionNode__Input_Damage <optimize=false>;

typedef struct
{
    uquad placementID;
    int healthType;
    int value;
} ObjectTransitionNode__Input_Health <optimize=false>;

typedef struct
{
    uquad placementID;
    int type;
} ObjectTransitionNode__Input_EngagementType <optimize=false>;

typedef struct
{
    uquad placementID;
    int actionID;
} ObjectTransitionNode__Input_PortableAction <optimize=false>;

typedef struct
{
    uquad placementID;
    int entityType;
} ObjectTransitionNode__Input_InteractType <optimize=false>;

typedef union
{
    ObjectTransitionNode__Input_Null onAutomatic;
    ObjectTransitionNode__Input_Null onInvalid;
    ObjectTransitionNode__Input_Timer onTimer;
    ObjectTransitionNode__Input_Null onScript;
    ObjectTransitionNode__Input_Null onDestruct;
    ObjectTransitionNode__Input_1Float onForce;
    ObjectTransitionNode__Input_1Float onTorque;
    ObjectTransitionNode__Input_Angle onUprightGained;
    ObjectTransitionNode__Input_Angle onUprightLost;
    ObjectTransitionNode__Input_Null onDeath;
    ObjectTransitionNode__Input_Damage onDamage;
    ObjectTransitionNode__Input_Health onHealth;
    ObjectTransitionNode__Input_EngagementType onEngage;
    ObjectTransitionNode__Input_PortableAction onPortableAction;
    ObjectTransitionNode__Input_Null onPortableInserted;
    ObjectTransitionNode__Input_Null onPortableRemoved;
    ObjectTransitionNode__Input_Null onShotByPlayer;
    ObjectTransitionNode__Input_InteractType onInteractStart;
    ObjectTransitionNode__Input_InteractType onInteractFail;
    ObjectTransitionNode__Input_InteractType onInteractAbort;
    ObjectTransitionNode__Input_InteractType onInteractComplete;
    ObjectTransitionNode__Input_Null onEmpty;
    ObjectTransitionNode__Input_Null onGrappleAttach;
    ObjectTransitionNode__Input_Null onGrappleRelease;
    ObjectTransitionNode__Input_Null onProjectileOverlapWater;
    ObjectTransitionNode__Input_Null onProjectileFly;
    ObjectTransitionNode__Input_Null onProjectilePassThrough;
    ObjectTransitionNode__Input_Null onProjectileAttached;
    ObjectTransitionNode__Input_Null onProjectileExplode;
    ObjectTransitionNode__Input_Null onProjectilePinned;
    ObjectTransitionNode__Input_Null onProjectileUnattached;
    ObjectTransitionNode__Input_Null onProjectileBounceOffFail;
    ObjectTransitionNode__Input_Null onProjectileRetract;
    ObjectTransitionNode__Input_Null onWeaponFire;
    ObjectTransitionNode__Input_Null onWeaponReload;
    ObjectTransitionNode__Input_Null onWeaponEquip;
    ObjectTransitionNode__Input_Null onWeaponUnequip;
    ObjectTransitionNode__Input_Null onWeaponAmmoZero;
    ObjectTransitionNode__Input_Null onWeaponClipZero;
    ObjectTransitionNode__Input_Null onWeaponDrop;
    ObjectTransitionNode__Input_Null onFireIgnite;
    ObjectTransitionNode__Input_Null onFireBurnOut;
    ObjectTransitionNode__Input_Null onFireSnuff;
    ObjectTransitionNode__Input_Null onFireDouse;
    ObjectTransitionNode__Input_Null onFireStartedHeating;
    ObjectTransitionNode__Input_Null onFireCoolingOff;
} ObjectTransitionNode__InputsType;

typedef struct
{
    PlacementPath placementDefault;
    ObjectTransitionNode__AdditionalParams_Union additionalParams;
    ObjectTransitionNode__InputsType inputs;
    int transitionType;
} ObjectTransitionNode <optimize=false>;

typedef struct
{
    unsigned int amount;
    int damageType;
} ObjectArmorTransition__AdditionalDamageType <optimize=false>;

typedef struct
{
    unsigned int numExtraDamageTypes;
    FSkip(4);
    Ref extraDamageTypeListRef;
    if (CanSeekTo(extraDamageTypeListRef))
    {
        SeekToRef(extraDamageTypeListRef);
        ObjectArmorTransition__AdditionalDamageType extraDamageTypeList[numExtraDamageTypes];
        ReturnFromRef();
    }
} ObjectArmorTransition__AdditionalParams_Damage <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad attackerID;
    unsigned int amount;
    int damageType;
} ObjectArmorTransition__InputsType <optimize=false>;

typedef struct
{
    int type;
    ObjectArmorTransition__AdditionalParams_Damage onDamage;
    PlacementPath placementDefaultID;
    PlacementPath attackerIDDefault;
    FSkip(4);
    ObjectArmorTransition__InputsType inputs;
    ArmorReference armorReference;
} ObjectArmorTransition <optimize=false>;

typedef struct
{
    uquad placementID;
} ObjectShardSpawned__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ObjectShardSpawned__InputsType inputs;
} ObjectShardSpawned <optimize=false>;

typedef struct
{
    int count;
} GenerateSpawnListNode__InputsType <optimize=false>;

typedef struct
{
    GenerateSpawnListNode__InputsType inputs;
    byte retroSave;
    byte staticSeed;
} GenerateSpawnListNode <optimize=false>;

typedef struct
{
} PACSetTierNode__InputsType <optimize=false>;

typedef struct
{
    PACSetTierNode__InputsType inputs;
    byte staticSeed;
    FSkip(3);
    int spawnListType;
    unsigned int randomSpawnListEntry;
    unsigned int globalProgressListEntry;
} PACSetTierNode <optimize=false>;

typedef struct
{
} Performance_SetParams <optimize=false>;

typedef struct
{
    uquad placementID;
} PhysicsGetWindNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PhysicsGetWindNode__InputsType inputs;
    byte outputOnInit;
    FSkip(3);
    int windEffect;
} PhysicsGetWindNode <optimize=false>;

typedef struct
{
    float gravityDir[3];
    float gravityMag;
} PhysicsGravityNode__InputsType <optimize=false>;

typedef struct
{
    PhysicsGravityNode__InputsType inputs;
} PhysicsGravityNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float restitutionIn;
    float frictionIn;
    float linearDragIn;
    float angularDragIn;
    float windReactionIn;
    float gravityIn;
    float contactRankIn;
    byte doContactCallbackIn;
    FSkip(3);
    float massIn;
    float buoyancyMultIn;
    int query;
} PhysicsPropertiesNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PhysicsPropertiesNode__InputsType inputs;
} PhysicsPropertiesNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float direction[3];
    float magnitude;
    float position[3];
    float timeout;
} PhysicsApplyPhysicsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PhysicsApplyPhysicsNode__InputsType inputs;
    char physicsType;
    byte applyAtCenter;
    byte dirAndPosInLocalSpace;
} PhysicsApplyPhysicsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float position[3];
    float rotation[3];
} PhysicsMoveToNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    PhysicsMoveToNode__InputsType inputs;
    byte useLocalTransforms;
    FSkip(3);
    float maximumVelocity;
    float maximumAngularVelocity;
} PhysicsMoveToNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(3);
    float linePoint1[3];
    float linePoint2[3];
    FSkip(4);
    uquad ignorePlacement;
} PhysicsLineProbeNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath ignorePlacementDefault;
    int probeType;
    PhysicsLineProbeNode__InputsType inputs;
} PhysicsLineProbeNode <optimize=false>;

typedef struct
{
    uquad placementID;
} PhysicsRagdollJointData__InputsType <optimize=false>;

typedef struct
{
    PhysicsRagdollJointData__InputsType inputs;
    PlacementPath placementDefaultID;
    unsigned int ragdoll;
    unsigned int ragdollBone;
} PhysicsRagdollJointData <optimize=false>;

typedef struct
{
    float position[3];
    float radius;
    float falloffRadius;
    float dilation;
} PhysicsTimeQuakeNode__InputsType <optimize=false>;

typedef struct
{
    PhysicsTimeQuakeNode__InputsType inputs;
    byte allBodies;
    byte debugDraw;
} PhysicsTimeQuakeNode <optimize=false>;

typedef struct
{
} GlobalJointNode__InputsType <optimize=false>;

typedef struct
{
    GlobalJointNode__InputsType inputs;
    byte debugDrawAnchors;
    byte applyForceToBodies;
    FSkip(2);
    float forceMult;
} GlobalJointNode <optimize=false>;

typedef struct
{
    PlacementPath jointPlacement;
} PhysicsJointCreateNode <optimize=false>;

typedef struct
{
    PlacementPath jointPlacement;
} PhysicsJointDestroyNode <optimize=false>;

typedef struct
{
    float setLength;
} PhysicsJointRopeLength__InputsType <optimize=false>;

typedef struct
{
    PhysicsJointRopeLength__InputsType inputs;
    PlacementPath jointPlacement;
} PhysicsJointRopeLength <optimize=false>;

typedef struct
{
    PlacementPath jointPlacement;
} PhysicsJointSetRopeVisibilityNode <optimize=false>;

typedef struct
{
} PhysicsJointLinkNode__InputsType <optimize=false>;

typedef struct
{
    PhysicsJointLinkNode__InputsType inputs;
    PlacementPath jointPlacement;
} PhysicsJointLinkNode <optimize=false>;

typedef struct
{
    byte enableZRot;
    FSkip(3);
    float zRotSpeed;
    float zRotTorque;
} RevoluteJointMotorProp <optimize=false>;

typedef struct
{
    byte enableZRot;
    FSkip(3);
    float zRotSpeed;
    float zRotTorque;
    byte enableZTrans;
    FSkip(3);
    float zTransSpeed;
    float zTransForce;
} CylindricalJointMotorProp <optimize=false>;

typedef struct
{
    byte enableZTrans;
    FSkip(3);
    float zTransSpeed;
    float zTransForce;
} PrismaticJointMotorProp <optimize=false>;

typedef struct
{
    byte enableXTrans;
    FSkip(3);
    float xTransSpeed;
    float xTransForce;
    byte enableYTrans;
    FSkip(3);
    float yTransSpeed;
    float yTransForce;
    byte enableZRot;
    FSkip(3);
    float zRotSpeed;
    float zRotTorque;
} PlanarJointMotorProp <optimize=false>;

typedef struct
{
    byte enableXRot;
    FSkip(3);
    float xRotSpeed;
    float xRotTorque;
    byte enableYRot;
    FSkip(3);
    float yRotSpeed;
    float yRotTorque;
} UniversalJointMotorProp <optimize=false>;

typedef struct
{
    byte enableZTrans;
    FSkip(3);
    float zTransSpeed;
    float zTransForce;
    byte enableZRot;
    FSkip(3);
    float zRotSpeed;
    float zRotTorque;
    byte enableYRot;
    FSkip(3);
    float yRotSpeed;
    float yRotTorque;
} SwingJointMotorProp <optimize=false>;

typedef struct
{
    byte enableXTrans;
    FSkip(3);
    float xTransSpeed;
    float xTransForce;
    byte enableYTrans;
    FSkip(3);
    float yTransSpeed;
    float yTransForce;
    byte enableZTrans;
    FSkip(3);
    float zTransSpeed;
    float zTransForce;
} CartesianJointMotorProp <optimize=false>;

typedef union
{
    RevoluteJointMotorProp revolute;
    CylindricalJointMotorProp cylindrical;
    PrismaticJointMotorProp prismatic;
    PlanarJointMotorProp planar;
    UniversalJointMotorProp universal;
    SwingJointMotorProp swing;
    CartesianJointMotorProp cartesian;
} JointMotorData;

typedef struct
{
    JointMotorData inputs;
    byte startEnabled;
    FSkip(3);
    PlacementPath jointPlacement;
    ubyte jointType;
} PhysicsJointMotorNode <optimize=false>;

typedef struct
{
    float low;
    float high;
} RevoluteJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
    int type;
} CylindricalJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
} PrismaticJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
    int type;
} PlanarJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
    int type;
} UniversalJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
    int type;
} SwingJointRangeProp <optimize=false>;

typedef struct
{
    float low;
    float high;
    int type;
} CartesianJointRangeProp <optimize=false>;

typedef union
{
    RevoluteJointRangeProp revolute;
    CylindricalJointRangeProp cylindrical;
    PrismaticJointRangeProp prismatic;
    PlanarJointRangeProp planar;
    UniversalJointRangeProp universal;
    SwingJointRangeProp swing;
    CartesianJointRangeProp cartesian;
} JointRangeData;

typedef struct
{
    JointRangeData inputs;
    int rangeType;
    byte startEnabled;
    FSkip(3);
    PlacementPath jointPlacement;
    ubyte jointType;
} PhysicsJointRangeNode <optimize=false>;

typedef struct
{
    byte limitZRot;
    FSkip(3);
    float zRotLow;
    float zRotHigh;
} RevoluteJointLimitProp <optimize=false>;

typedef struct
{
    byte limitZRot;
    FSkip(3);
    float zRotLow;
    float zRotHigh;
    byte limitZTrans;
    FSkip(3);
    float zTransLow;
    float zTransHigh;
} CylindricalJointLimitProp <optimize=false>;

typedef struct
{
    byte limitZTrans;
    FSkip(3);
    float zTransLow;
    float zTransHigh;
} PrismaticJointLimitProp <optimize=false>;

typedef struct
{
    byte limitXTrans;
    FSkip(3);
    float xTransLow;
    float xTransHigh;
    byte limitYTrans;
    FSkip(3);
    float yTransLow;
    float yTransHigh;
    byte limitZRot;
    FSkip(3);
    float zRotLow;
    float zRotHigh;
} PlanarJointLimitProp <optimize=false>;

typedef struct
{
    byte limitXRot;
    FSkip(3);
    float xRotLow;
    float xRotHigh;
    byte limitYRot;
    FSkip(3);
    float yRotLow;
    float yRotHigh;
} UniversalJointLimitProp <optimize=false>;

typedef struct
{
    byte limitZTrans;
    FSkip(3);
    float zTransLow;
    float zTransHigh;
    byte limitZRot;
    FSkip(3);
    float zRotLow;
    float zRotHigh;
    byte limitYRot;
    FSkip(3);
    float yRotLow;
    float yRotHigh;
} SwingJointLimitProp <optimize=false>;

typedef struct
{
    byte limitXTrans;
    FSkip(3);
    float xTransLow;
    float xTransHigh;
    byte limitYTrans;
    FSkip(3);
    float yTransLow;
    float yTransHigh;
    byte limitZTrans;
    FSkip(3);
    float zTransLow;
    float zTransHigh;
} CartesianJointLimitProp <optimize=false>;

typedef union
{
    RevoluteJointLimitProp revolute;
    CylindricalJointLimitProp cylindrical;
    PrismaticJointLimitProp prismatic;
    PlanarJointLimitProp planar;
    UniversalJointLimitProp universal;
    SwingJointLimitProp swing;
    CartesianJointLimitProp cartesian;
} JointLimitData;

typedef struct
{
    JointLimitData inputs;
    byte startEnabled;
    FSkip(3);
    PlacementPath jointPlacement;
    ubyte jointType;
} PhysicsJointLimitNode <optimize=false>;

typedef struct
{
    byte query;
} PhysicsJointStateNode__InputType <optimize=false>;

typedef struct
{
    PhysicsJointStateNode__InputType inputs;
    FSkip(3);
    PlacementPath jointPlacement;
    ubyte jointType;
} PhysicsJointStateNode <optimize=false>;

typedef struct
{
    float target[3];
    float bias;
    float maxForce;
} PhysicsJointTargetMotorNode__InputsType <optimize=false>;

typedef struct
{
    PhysicsJointTargetMotorNode__InputsType inputs;
    byte startEnabled;
    FSkip(3);
    PlacementPath jointPlacement;
} PhysicsJointTargetMotorNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float linearVelocity[3];
    float angularVelocity[3];
    byte setLinearVelocity;
    byte setAngularVelocity;
} PhysicsVelocityOverrideNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PhysicsVelocityOverrideNode__InputsType inputs;
} PhysicsVelocityOverrideNode <optimize=false>;

typedef struct
{
    byte override;
    FSkip(7);
    uquad currPlacementID;
    uquad overridePlacementID;
} PhysicsCollisionGroupOverrideNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath currentPlacementID;
    PlacementPath overridePlacementID;
    PhysicsCollisionGroupOverrideNode__InputsType inputs;
} PhysicsCollisionGroupOverrideNode <optimize=false>;

typedef struct
{
    byte trigger;
} PhysicsSpatialAwarenessProbeNode__InputsType <optimize=false>;

typedef struct
{
    ushort spatialAwarenessProbe;
    byte outputEvenOnMiss;
    byte outputLocalPos;
    PhysicsSpatialAwarenessProbeNode__InputsType inputs;
} PhysicsSpatialAwarenessProbeNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
} PlayerAmmoMenuNode__InputType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlayerAmmoMenuNode__InputType inputs;
} PlayerAmmoMenuNode <optimize=false>;

typedef struct
{
    int addAmmo;
    int removeAmmo;
    int setAmmo;
    byte queryAmmo;
    FSkip(3);
    int infiniteAmmoEnable;
    int infiniteAmmoDisable;
    int ammoType;
    FSkip(4);
    uquad playerID;
} PlayerAmmoNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    char ammotypesource;
    FSkip(3);
    unsigned int ammotype;
    byte retroSave;
    byte allowReloadWhenInfinite;
    FSkip(2);
    PlayerAmmoNode__InputsType inputs;
} PlayerAmmoNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
} PlayerSeizeNode__Input_Base <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float numPoints;
} PlayerSeizeNode__Input_AddMeter <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad instanceID;
    uquad targetInstanceID;
} PlayerSeizeNode__Input_SetScriptedAnimTargetInstance <optimize=false>;

typedef union
{
    PlayerSeizeNode__Input_Base getSeizeInstances;
    PlayerSeizeNode__Input_Base getSeizePartner;
    PlayerSeizeNode__Input_Base isSeizeHappening;
    PlayerSeizeNode__Input_Base isSeizeAttacker;
    PlayerSeizeNode__Input_Base isSeizeDefender;
    PlayerSeizeNode__Input_AddMeter addMeterPoints;
    PlayerSeizeNode__Input_Base getMeterCurrent;
    PlayerSeizeNode__Input_Base getMeterStart;
    PlayerSeizeNode__Input_Base getMeterMax;
    PlayerSeizeNode__Input_Base getSeizeActiveID;
    PlayerSeizeNode__Input_Base getTeammateSeizeIndicator;
    PlayerSeizeNode__Input_SetScriptedAnimTargetInstance setScriptedAnimTargetInstance;
} PlayerSeizeNode__InputsType;

typedef struct
{
    PlacementPath targetPlacementDefaultID;
    PlacementPath placementDefaultID;
    int type;
    PlayerSeizeNode__InputsType inputs;
    int addPointsDelayOption;
} PlayerSeizeNode <optimize=false>;

typedef struct
{
    ushort object;
    FSkip(2);
    unsigned int scriptIDFFF;
} ObjectType <optimize=false>;

typedef struct
{
    byte respawn;
    FSkip(7);
    uquad playerID;
    ObjectType objectID;
    byte preload;
    byte cancelPreload;
} PlayerRespawnNode__InputsType <optimize=false>;

typedef struct
{
    Ref notesRef;
    if (CanSeekTo(notesRef))
    {
        SeekToRef(notesRef);
        string notes;
        ReturnFromRef();
    }
    PlacementPath playerIDDefault;
    PlayerRespawnNode__InputsType inputs;
    byte bRemovePlayerLate;
} PlayerRespawnNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} PlayerGetSenseTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerGetSenseTargetNode__InputsType inputs;
    int senseType;
} PlayerGetSenseTargetNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad targetPlacementID;
    uquad playerID;
} PlayerForceSenseTargetNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefaultID;
    PlacementPath targetDefaultID;
    PlayerForceSenseTargetNode__InputsType inputs;
    int senseType;
} PlayerForceSenseTargetNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} PlayerGetProxyInfoNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerGetProxyInfoNode__InputsType inputs;
} PlayerGetProxyInfoNode <optimize=false>;

typedef struct
{
    uquad playerPlacement;
} Player_SnapToRangedSenseTarget__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerPlacementDefault;
    Player_SnapToRangedSenseTarget__InputsType inputs;
    int senseType;
    float snapTimeSec;
    float lockTimeSec;
} Player_SnapToRangedSenseTarget <optimize=false>;

typedef struct
{
    uquad playerInstance;
    uquad targetInstance;
} Player_SnapToCachedTarget__InputsType <optimize=false>;

typedef struct
{
    Player_SnapToCachedTarget__InputsType inputs;
    float snapTimeSec;
    float lockTimeSec;
} Player_SnapToCachedTarget <optimize=false>;

typedef struct
{
    uquad playerID;
} AGGetTargetUnderReticle__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    AGGetTargetUnderReticle__InputsType inputs;
} AGGetTargetUnderReticle <optimize=false>;

typedef struct
{
    uquad playerID;
    ushort unitID;
} Player_UnitChecks__InputsType_OnEntered <optimize=false>;

typedef struct
{
    uquad playerID;
} Player_UnitChecks__InputsType_OnEnteredAnyUnit <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad placementID;
} Player_UnitChecks__InputsType_OnEnteredPlacementUnit <optimize=false>;

typedef struct
{
    uquad playerID;
} Player_UnitChecks__InputsType_GetCurrent <optimize=false>;

enum <int> Player_UnitChecks_Type
{
    Player_UnitChecks_Type__OnEnteredUnit,
    Player_UnitChecks_Type__OnEnteredAnyUnit,
    Player_UnitChecks_Type__OnEnteredPlacementUnit,
    Player_UnitChecks_Type__GetCurrentUnit
};

typedef struct
{
    PlacementPath playerIDDefault;
    Player_UnitChecks_Type type;
    FSkip(4);
    local int endPos = FTell() + 0x10;
    switch (type)
    {
        case Player_UnitChecks_Type__OnEnteredUnit:
            Player_UnitChecks__InputsType_OnEntered onEnteredUnit;
            break;
        case Player_UnitChecks_Type__OnEnteredAnyUnit:
            Player_UnitChecks__InputsType_OnEnteredAnyUnit onEnteredAnyUnit;
            break;
        case Player_UnitChecks_Type__OnEnteredPlacementUnit:
            Player_UnitChecks__InputsType_OnEnteredPlacementUnit onEnteredPlacementUnit;
            break;
        case Player_UnitChecks_Type__GetCurrentUnit:
            Player_UnitChecks__InputsType_GetCurrent getCurrentUnit;
            break;
    }
    FSeek(endPos);
} Player_UnitChecks <optimize=false>;

typedef struct
{
    int animGoalType;
    FSkip(4);
    AnimGraphGoalRTEnums animGoalCondition;
    char playerType;
} PlayerOnSetAnimGoalNode <optimize=false>;

typedef struct
{
    uquad playerInstID;
    uquad animGraphHostInstID;
} Player_AnimGraphSetGHOST__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerInstIDDefault;
    PlacementPath animGraphHostInstIDDefault;
    Player_AnimGraphSetGHOST__InputsType inputs;
} Player_AnimGraphSetGHOST <optimize=false>;

typedef struct
{
    uquad playerInstID;
    uquad animGraphHostInstID;
} Player_AnimGraphSetDialogueOverlayHost__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerInstIDDefault;
    PlacementPath animGraphHostInstIDDefault;
    Player_AnimGraphSetDialogueOverlayHost__InputsType inputs;
} Player_AnimGraphSetDialogueOverlayHost <optimize=false>;

typedef struct
{
    uquad physicsPlacementID;
    uquad playerID;
    float swingPivot[3];
} PlayerProcessSwingNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath physicsPlacementDefaultID;
    PlacementPath playerIDDefault;
    PlayerProcessSwingNode__InputsType inputs;
} PlayerProcessSwingNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
    byte disableCodeScreenwipe;
    FSkip(3);
    float secondsToScreenwipe;
    float secondsToReload;
    byte disableRagdoll;
    byte disableDeathPhysics;
} Player_DeathOptions__Input_Set <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} Player_DeathOptions__Input_Base <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} Player_DeathOptions__Input_Query <optimize=false>;

typedef union
{
    Player_DeathOptions__Input_Set setDeathOptions;
    Player_DeathOptions__Input_Base resetDeathOptions;
    Player_DeathOptions__Input_Query queryDeathOptions;
} Player_DeathOptions__InputsType;

typedef struct
{
    PlacementPath playerIDDefault;
    int type;
    Player_DeathOptions__InputsType inputs;
} Player_DeathOptions <optimize=false>;

typedef struct
{
    byte trigger;
    byte includeLocalPlayers;
    byte includeRemotePlayers;
} Player_GetPlayerID__Input_Set_Iterator <optimize=false>;

typedef struct
{
} Player_GetPlayerID__Input_Set_IteratorOnInit <optimize=false>;

typedef struct
{
    byte trigger;
    byte includeLocalPlayers;
    byte includeRemotePlayers;
} Player_GetPlayerID__Input_Set_TwoDedicated <optimize=false>;

typedef struct
{
    byte trigger;
    byte includeLocalPlayers;
    byte includeRemotePlayers;
} Player_GetPlayerID__Input_Set_FourDedicated <optimize=false>;

typedef struct
{
    byte trigger;
    byte includeLocalPlayers;
    byte includeRemotePlayers;
} Player_GetPlayerID__Input_Set_EightDedicated <optimize=false>;

typedef struct
{
    byte trigger;
    byte includeLocalPlayers;
    byte includeRemotePlayers;
    FSkip(1);
    int index;
} Player_GetPlayerID__Input_Set_Index <optimize=false>;

typedef struct
{
    byte trigger;
} Player_GetPlayerID__Input_Set_GetMainUserPlayer <optimize=false>;

typedef struct
{
} Player_GetPlayerID__Input_Set_GetMainUserPlayerOnInit <optimize=false>;

typedef union
{
    Player_GetPlayerID__Input_Set_Iterator iterator;
    Player_GetPlayerID__Input_Set_IteratorOnInit iteratorOnInit;
    Player_GetPlayerID__Input_Set_TwoDedicated twoDedicatedOutputs;
    Player_GetPlayerID__Input_Set_FourDedicated fourDedicatedOutputs;
    Player_GetPlayerID__Input_Set_EightDedicated eightDedicatedOutputs;
    Player_GetPlayerID__Input_Set_Index index;
    Player_GetPlayerID__Input_Set_GetMainUserPlayer getMainUserPlayer;
    Player_GetPlayerID__Input_Set_GetMainUserPlayerOnInit getMainUserPlayerOnInit;
} Player_GetPlayerID__InputsType;

typedef struct
{
    int type;
    Player_GetPlayerID__InputsType inputs;
} Player_GetPlayerID <optimize=false>;

typedef struct
{
    uquad playerInstID;
    uquad placementID;
    uquad markupPlacementID;
    byte badAttach;
} Player_AttachToMarkup__InputsType <optimize=false>;

typedef union
{
    byte nearestToPlayerMarkupBone;
    ModelBoneOrMarkerReferenceWithObject nearestToPlayerBoneOrMarker;
} Player_AttachToMarkup__MarkupPosCalcData;

typedef struct
{
    PlacementPath playerInstIDDefault;
    PlacementPath placementDefaultID;
    Player_AttachToMarkup__InputsType inputs;
    FSkip(3);
    PlacementPath markupSelection;
    int posCalcType;
    Player_AttachToMarkup__MarkupPosCalcData posCalcData;
} Player_AttachToMarkup <optimize=false>;

typedef struct
{
    uquad playerInstID;
} Player_DetachFromMarkup__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerInstIDDefault;
    byte affectsGrappleAxeMarkup;
    FSkip(7);
    Player_DetachFromMarkup__InputsType inputs;
} Player_DetachFromMarkup <optimize=false>;

typedef struct
{
    uquad playerInstID;
} Player_GetAttachedMarkup__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerInstIDDefault;
    Player_GetAttachedMarkup__InputsType inputs;
} Player_GetAttachedMarkup <optimize=false>;

typedef struct
{
    uquad playerInstID;
    uquad placementID;
    uquad markupPlacementID;
} Player_SetJumpTarget__InputsType <optimize=false>;

typedef union
{
    byte nearestToPlayerMarkupBone;
    ModelBoneOrMarkerReferenceWithObject nearestToPlayerBoneOrMarker;
} Player_SetJumpTarget__MarkupPosCalcData;

typedef struct
{
    int markupDetectionTargetType;
    PlacementPath playerInstIDDefault;
    PlacementPath placementDefaultID;
    FSkip(4);
    Player_SetJumpTarget__InputsType inputs;
    PlacementPath markupSelection;
    int posCalcType;
    Player_SetJumpTarget__MarkupPosCalcData posCalcData;
} Player_SetJumpTarget <optimize=false>;

typedef struct
{
    byte enableTurnSteering;
    FSkip(7);
    uquad playerInstID;
} Player_Steering__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerInstIDDefault;
    Player_Steering__InputsType inputs;
} Player_Steering <optimize=false>;

typedef struct
{
    int newInteractType;
} Player_InteractChangeType <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} Player_GetTeamID__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Player_GetTeamID__InputsType inputs;
} Player_GetTeamID <optimize=false>;

typedef struct
{
    byte isPlayerOnTeam;
    FSkip(7);
    uquad playerID;
    char team;
    byte getTeamID;
} Player_Team__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Player_Team__InputsType inputs;
} Player_Team <optimize=false>;

typedef struct
{
    uquad playerPlacement;
    uquad targetPlacement;
    int targetSegment;
    byte setTarget;
    byte clearTarget;
    byte clearAnyTarget;
    byte fullBodyLook;
} Player_SetCameraLookAtTarget__InputsType <optimize=false>;

typedef union
{
    float playerOptIn;
    float forcedLook;
} Player_SetCameraLookAtTarget__LookAtTimeout;

typedef struct
{
    PlacementPath playerPlacementDefault;
    PlacementPath targetPlacementDefault;
    Player_SetCameraLookAtTarget__InputsType inputs;
    int lookAtMode;
    Player_SetCameraLookAtTarget__LookAtTimeout lookAtTimout;
    byte blockPlayerMovement;
    byte overrideCameraFlag;
    FSkip(2);
    float overrideCameraTruckValues[3];
    float overrideCameraZoom;
    byte overrideCameraTransitionFlag;
    FSkip(3);
    float overrideCameraTransitionTimeIn;
    float overrideCameraTransitionTimeOut;
} Player_SetCameraLookAtTarget <optimize=false>;

typedef struct
{
    uquad playerInstance;
    uquad targetInstance;
    byte setTarget;
    byte clearTarget;
    byte clearAnyTarget;
    byte fullBodyLook;
    byte enableLookAt;
    byte setEnableLookAt;
} Player_SetHeadTrackLookAtTarget__InputsType <optimize=false>;

typedef struct
{
    PlacementPath targetPlacementDefaultID;
    Player_SetHeadTrackLookAtTarget__InputsType inputs;
    FSkip(2);
    float rangeDist;
    float rangeAngleDegsFromFacing;
    ModelBoneOrMarkerReferenceWithContext boneMarker;
} Player_SetHeadTrackLookAtTarget <optimize=false>;

typedef struct
{
    uquad placementID;
    uquad playerID;
} PlayerGiveLootNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath playerIDDefault;
    PlayerGiveLootNode__InputsType inputs;
    byte retroSaveLoot;
} PlayerGiveLootNode <optimize=false>;

typedef struct
{
    byte lootedSomething;
    FSkip(7);
    uquad placementID;
    uquad playerID;
} PlayerGetLootQuantityNode__InputsType <optimize=false>;

typedef union
{
    int contextual;
    int regionLoot;
    unsigned int collectionTool;
    ushort inventoryObject;
    unsigned int scheduledLoot;
} Subtype;

typedef struct
{
    int lootType;
    Subtype lootSubtype;
    unsigned int lootItem;
} PlayerGetLootQuantityNode__LootData <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    PlacementPath playerIDDefault;
    PlayerGetLootQuantityNode__InputsType inputs;
    PlayerGetLootQuantityNode__LootData lootData;
} PlayerGetLootQuantityNode <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} PlayerGiveCollectibleNode__Input_SpecificGive <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} PlayerGiveCollectibleNode__Input_LoadAndGive <optimize=false>;

typedef struct
{
    uquad playerID;
} PlayerGiveCollectibleNode__Input_GiveAll <optimize=false>;

typedef union
{
    PlayerGiveCollectibleNode__Input_SpecificGive giveOnly;
    PlayerGiveCollectibleNode__Input_LoadAndGive loadAndGive;
    PlayerGiveCollectibleNode__Input_GiveAll giveAll;
} PlayerGiveCollectibleNode__InputsType;

typedef struct
{
} PlayerGiveCollectibleNode__DataSpecificGive <optimize=false>;

typedef struct
{
    int collectibleType;
} PlayerGiveCollectibleNode__DataGiveAll <optimize=false>;

typedef union
{
    PlayerGiveCollectibleNode__DataSpecificGive giveOnly;
    PlayerGiveCollectibleNode__DataSpecificGive loadAndGive;
    PlayerGiveCollectibleNode__DataGiveAll giveAll;
} PlayerGiveCollectibleNode__DataGive;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerGiveCollectibleNode__InputsType inputs;
    FSkip(4);
    int nodeType;
    ChooseCollectible collectible;
    PlayerGiveCollectibleNode__DataGive nodeData;
} PlayerGiveCollectibleNode <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} PlayerHasCollectibleNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerHasCollectibleNode__InputsType inputs;
    FSkip(4);
    ChooseCollectible collectible;
} PlayerHasCollectibleNode <optimize=false>;

typedef struct
{
    unsigned int amount;
} AGPlayerCultureKnowledgeNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int cultureIndex;
    unsigned int cultureLevelIndex;
    AGPlayerCultureKnowledgeNode__InputsType inputs;
    PlacementPath defaultPlayerPlacement;
} AGPlayerCultureKnowledgeNode <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} PlayerEquipOutfitPieceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerEquipOutfitPieceNode__InputsType inputs;
    FSkip(4);
    ChooseCollectible collectible;
} PlayerEquipOutfitPieceNode <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} PlayerRepairBrokenOutfitPieceNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerRepairBrokenOutfitPieceNode__InputsType inputs;
    ChooseCollectible collectible;
} PlayerRepairBrokenOutfitPieceNode <optimize=false>;

typedef struct
{
    uquad playerID;
} Player_OutfitPieceEquipped__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    int outfitPieceSlot;
    FSkip(4);
    Player_OutfitPieceEquipped__InputsType inputs;
} Player_OutfitPieceEquipped <optimize=false>;

typedef struct
{
    uquad playerID;
} PlayerUnlockContentNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerUnlockContentNode__InputsType inputs;
    int uimessagetype;
    unsigned int uUnlockIndex;
    unsigned int uUnlockID;
} PlayerUnlockContentNode <optimize=false>;

typedef struct
{
    uquad playerID;
    int unlockIndex;
} PlayerHasContentUnlockedNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlayerHasContentUnlockedNode__InputsType inputs;
    unsigned int uUnlockIndex;
    unsigned int uUnlockID;
} PlayerHasContentUnlockedNode <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad weaponID;
    uquad enemyID;
    int amount;
} PlayerSEMStatsNode__InputsType <optimize=false>;

typedef struct
{
    char nodeType;
    char elementalType;
    FSkip(6);
    PlayerSEMStatsNode__InputsType inputs;
    int statType;
    int bizStat;
    int spStat;
    int mpStat;
    int lC2Profile;
    int lC2Stat;
} PlayerSEMStatsNode <optimize=false>;

typedef struct
{
    uquad playerID;
} PlayerGetSEMStatsNode__InputsType_default <optimize=false>;

typedef struct
{
    uquad playerID;
} PlayerGetSEMStatsNode__InputsType_LC2REGIONSTAT <optimize=false>;

typedef union
{
    PlayerGetSEMStatsNode__InputsType_default sINGLEPLAYER;
    PlayerGetSEMStatsNode__InputsType_default mULTIPLAYER;
    PlayerGetSEMStatsNode__InputsType_default bUSINESS;
    PlayerGetSEMStatsNode__InputsType_default lC2STAT;
    PlayerGetSEMStatsNode__InputsType_LC2REGIONSTAT lC2REGIONSTAT;
    PlayerGetSEMStatsNode__InputsType_default lC2PROFILE;
} PlayerGetSEMStatsNode__InputsType;

typedef struct
{
    PlayerGetSEMStatsNode__InputsType inputs;
    int statType;
    int bizStat;
    int spStat;
    int mpStat;
    int lC2Profile;
    int lC2Stat;
    int lC2RegionStat;
    unsigned int region;
    byte getCurrent;
} PlayerGetSEMStatsNode <optimize=false>;

typedef struct
{
    uquad playerID;
    byte statInput;
} PlayerStatNotificationNode__InputsType <optimize=false>;

typedef struct
{
    PlayerStatNotificationNode__InputsType inputs;
    FSkip(3);
    int notificationType;
} PlayerStatNotificationNode <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} PlayerDefaultCostumeZoneID__InputsType <optimize=false>;

typedef struct
{
    Ref notesRef;
    if (CanSeekTo(notesRef))
    {
        SeekToRef(notesRef);
        string notes;
        ReturnFromRef();
    }
    PlacementPath playerIDDefault;
    PlayerDefaultCostumeZoneID__InputsType inputs;
} PlayerDefaultCostumeZoneID <optimize=false>;

typedef struct
{
    byte trigger;
    byte set;
    FSkip(6);
    uquad playerID;
    unsigned int costumeZoneID;
} PlayerCurrentCostumeZoneID__InputsType <optimize=false>;

typedef struct
{
    Ref notesRef;
    if (CanSeekTo(notesRef))
    {
        SeekToRef(notesRef);
        string notes;
        ReturnFromRef();
    }
    PlacementPath playerIDDefault;
    PlayerCurrentCostumeZoneID__InputsType inputs;
} PlayerCurrentCostumeZoneID <optimize=false>;

typedef struct
{
    uquad playerID;
} AG_Player_IsConcealed__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    AG_Player_IsConcealed__InputsType inputs;
} AG_Player_IsConcealed <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} AG_Player_MeleeMove__InputsType <optimize=false>;

typedef struct
{
    unsigned int meleeMove;
    PlacementPath playerIDDefault;
    AG_Player_MeleeMove__InputsType inputs;
} AG_Player_MeleeMove <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad playerID;
} AG_Player_MeleeMove_GetCurrentTarget__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    AG_Player_MeleeMove_GetCurrentTarget__InputsType inputs;
} AG_Player_MeleeMove_GetCurrentTarget <optimize=false>;

typedef struct
{
    byte start;
    byte abort;
    byte complete;
    byte query;
    FSkip(4);
    uquad playerID;
} Player_SetCombatEncounterState__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Player_SetCombatEncounterState__InputsType inputs;
} Player_SetCombatEncounterState <optimize=false>;

typedef struct
{
    uquad player;
    int timeToShow;
} Player_DBNDIndicator__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Ref messageNameRef;
    if (CanSeekTo(messageNameRef))
    {
        SeekToRef(messageNameRef);
        EventEnum messageName;
        ReturnFromRef();
    }
    Player_DBNDIndicator__InputsType inputs;
} Player_DBNDIndicator <optimize=false>;

typedef struct
{
    unsigned int ammoType;
    int amount;
    int amountEasy;
    int amountHard;
    int amountSurvivor;
} CraftingResourceAmount <optimize=false>;

typedef struct
{
    CraftingResourceAmount product;
    byte enableUseFromUI;
    FSkip(3);
    int useEventArgument;
} FreeCraftingData <optimize=false>;

typedef struct
{
    ushort requiredObject;
    FSkip(2);
    unsigned int craftedNetDataIndex;
} ThrowableCraftingData <optimize=false>;

typedef struct
{
} TrapCraftingData <optimize=false>;

typedef struct
{
    ushort gearRequiredObject;
    ushort gearPlayerTraitRequirement;
} GearCraftingData <optimize=false>;

typedef struct
{
    Ref traitsRef;
    unsigned int numTraits;
    if (CanSeekTo(traitsRef))
    {
        SeekToRef(traitsRef);
        PlayerTraitListIndexComparison traits[numTraits];
        ReturnFromRef();
    }
    CraftingResourceAmount product;
} ProductData <optimize=false>;

typedef struct
{
    Ref productsRef;
    unsigned int productsCount;
    if (CanSeekTo(productsRef))
    {
        SeekToRef(productsRef);
        ProductData products[productsCount];
        ReturnFromRef();
    }
    byte enableUseFromUI;
    FSkip(3);
    int useEventArgument;
    int menuSlotToEquip;
    int bowLoadoutToCycleTo;
    ushort uiObjectID;
    FSkip(2);
    int ammunitionType;
    byte isSpecialAmmo;
} ArrowCraftingData <optimize=false>;

typedef struct
{
    ushort itemToAward;
    byte equipTheCraftedItem;
    FSkip(1);
    unsigned int inventoryType;
    int inventoryTypeValue;
    ushort traitToRemove;
    byte amIaRepairItem;
    byte keepHoldingUIItem;
    ushort uiObjectID;
    FSkip(2);
    int equipmentType;
} EquipmentCraftingData <optimize=false>;

typedef struct
{
} OutfitCraftingData <optimize=false>;

typedef struct
{
    EnumAmmoType ammoType;
    unsigned int numBuffs;
    Ref buffsRef;
    if (CanSeekTo(buffsRef))
    {
        SeekToRef(buffsRef);
        ushort buffs[numBuffs];
        ReturnFromRef();
    }
    byte hasFocusReticle;
    FSkip(3);
    float duration;
    Ref upgradedDurationTraitRef;
    if (CanSeekTo(upgradedDurationTraitRef))
    {
        SeekToRef(upgradedDurationTraitRef);
        PlayerTraitListIndexComparison upgradedDurationTrait;
        ReturnFromRef();
    }
    float upgradedDuration;
    FSkip(4);
    Ref durationModifierTraitRef;
    if (CanSeekTo(durationModifierTraitRef))
    {
        SeekToRef(durationModifierTraitRef);
        PlayerTraitListIndexComparison durationModifierTrait;
        ReturnFromRef();
    }
    float durationModifier;
} HerbCraftingData <optimize=false>;

typedef union
{
    FreeCraftingData freeCrafting;
    ThrowableCraftingData throwableCrafting;
    TrapCraftingData trapCrafting;
    GearCraftingData gearCrafting;
    ArrowCraftingData arrowCrafting;
    EquipmentCraftingData equipmentCrafting;
    OutfitCraftingData outfitCrafting;
    HerbCraftingData herbCrafting;
} CraftingTypeData;

typedef struct
{
    ushort traitRequired;
    FSkip(2);
    float craftingDuration;
} CraftDuration <optimize=false>;

typedef struct
{
    uquad name;
    uquad description;
    uquad extraString;
    Ref recipeTagRef;
    if (CanSeekTo(recipeTagRef))
    {
        SeekToRef(recipeTagRef);
        string recipeTag;
        ReturnFromRef();
    }
    Ref iconTypeRef;
    if (CanSeekTo(iconTypeRef))
    {
        SeekToRef(iconTypeRef);
        string iconType;
        ReturnFromRef();
    }
    Ref iconTypeCraftRef;
    if (CanSeekTo(iconTypeCraftRef))
    {
        SeekToRef(iconTypeCraftRef);
        string iconTypeCraft;
        ReturnFromRef();
    }
    byte isDLC;
    FSkip(3);
    DLCFeatureRef dlcRef;
    PersistentDataGlobalStruct xpRewardELII;
    int sortOrderIndex;
    float animationNamedValue;
    byte displayProgress;
    FSkip(3);
    float autoHideSecondsFromBegin;
    float autoShowSecondsFromEnd;
    unsigned int numResourceRequirements;
    FSkip(4);
    Ref resourceRequirementsRef;
    if (CanSeekTo(resourceRequirementsRef))
    {
        SeekToRef(resourceRequirementsRef);
        CraftingResourceAmount resourceRequirements[numResourceRequirements];
        ReturnFromRef();
    }
    Ref recipeTraitRequirementRef;
    unsigned int numRecipeTraitRequirement;
    if (CanSeekTo(recipeTraitRequirementRef))
    {
        SeekToRef(recipeTraitRequirementRef);
        PlayerTraitListIndexComparison recipeTraitRequirement[numRecipeTraitRequirement];
        ReturnFromRef();
    }
    ushort toolTraitRequirement;
    FSkip(2);
    unsigned int numOtherTraitRequirements;
    FSkip(4);
    Ref otherTraitRequirementsRef;
    if (CanSeekTo(otherTraitRequirementsRef))
    {
        SeekToRef(otherTraitRequirementsRef);
        ushort otherTraitRequirements[numOtherTraitRequirements];
        ReturnFromRef();
    }
    int type;
    FSkip(4);
    CraftingTypeData typeData;
    float craftingDuration;
    unsigned int numCraftingDurations;
    FSkip(4);
    Ref craftingDurationsRef;
    if (CanSeekTo(craftingDurationsRef))
    {
        SeekToRef(craftingDurationsRef);
        CraftDuration craftingDurations[numCraftingDurations];
        ReturnFromRef();
    }
    unsigned int craftingFailSound;
    unsigned int craftingInProgressSound;
    unsigned int craftingCancelSound;
    unsigned int craftingSuccessSound;
    ushort craftedTrait;
    FSkip(2);
    EventEnum craftedEventEnum;
    int craftedEventArgument;
    FSkip(4);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} CraftingRecipe <optimize=false>;

typedef struct
{
    uquad playerID;
} Player_CombatStatus_Override__InputType <optimize=false>;

typedef struct
{
    int minimumCombatStatus;
    int maximumCombatStatus;
    PlacementPath playerIDDefault;
    byte forceWeaponEquipEnabled;
    byte forceWeaponEquip;
    char defaultAnimMood;
    char desperateAnimMood;
    char inCombatAnimMood;
    char scaredAnimMood;
    byte forceCoverCrouchEnabled;
    byte forceCoverCrouch;
    Player_CombatStatus_Override__InputType inputs;
} Player_CombatStatus_Override <optimize=false>;

typedef struct
{
    uquad playerID;
} Player_CombatStatus_GetStealthLoopState__InputType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Player_CombatStatus_GetStealthLoopState__InputType inputs;
} Player_CombatStatus_GetStealthLoopState <optimize=false>;

typedef struct
{
    byte useLeftHand;
    FSkip(7);
    uquad playerID;
} Player_RappelRopeControl__InputType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    Player_RappelRopeControl__InputType inputs;
} Player_RappelRopeControl <optimize=false>;

typedef struct
{
} ProgressionStateRefreshNode__Default_All <optimize=false>;

typedef struct
{
    PlacementPath placementID;
} ProgressionStateRefreshNode__Default_One <optimize=false>;

typedef union
{
    ProgressionStateRefreshNode__Default_All all;
    ProgressionStateRefreshNode__Default_One one;
} ProgressionStateRefreshNode__DefaultType;

typedef struct
{
    byte flagCheckNetData : 1;
    byte flagCheckBirths : 1;
    byte flagCheckDeaths : 1;
    byte _Bitfieldpadding0 : 5;
} CheckStateFlags <optimize=false>;

typedef struct
{
    int numCheckedPlacements;
    ProgressionStateRefreshNode__DefaultType _default;
    CheckStateFlags checkStateFlags;
} ProgressionStateRefreshNode <optimize=false>;

typedef struct
{
    PlacementPath placementIDBody2;
} RagdollWeldRootNode__Input_Base <optimize=false>;

typedef struct
{
    PlacementPath placementIDBody2;
    PlacementPath placementIDBody1;
} RagdollWeldRootNode__Input_ToPlacement <optimize=false>;

typedef union
{
    RagdollWeldRootNode__Input_Base toWorld;
    RagdollWeldRootNode__Input_ToPlacement toPlacement;
} RagdollWeldRootNode__InputsType;

typedef struct
{
    float linearSoftness;
    float angularSoftness;
} SimpleSoftness <optimize=false>;

typedef struct
{
    float linearSoftness[3];
    float angularSoftness[3];
} AdvancedSoftness <optimize=false>;

typedef struct
{
    float linearDamping;
    float linearFrequency;
    float angularDamping;
    float angularFrequency;
} SimpleSpringSoftness <optimize=false>;

typedef struct
{
    float linearDamping[3];
    float linearFrequency[3];
    float angularDamping[3];
    float angularFrequency[3];
} AdvancedSpringSoftness <optimize=false>;

typedef union
{
    SimpleSoftness simple;
    AdvancedSoftness advanced;
    SimpleSpringSoftness simpleSpring;
    AdvancedSpringSoftness advancedSpring;
} SoftnessUnion;

typedef struct
{
    int softnessType;
    SoftnessUnion softness;
    float relaxation;
    char numIterations;
    byte collideConnectedBodies : 1;
    byte smoothLimits : 1;
    byte globalRelocate : 1;
    byte _Bitfieldpadding4 : 5;
    byte baumgarteOverride;
    FSkip(1);
    float baumgarte;
} CommonJointProp <optimize=false>;

typedef struct
{
    ubyte ragdollBoneID;
    FSkip(3);
    RagdollWeldRootNode__InputsType inputs;
    int nodeType;
    CommonJointProp commonJointProps;
} RagdollWeldRootNode <optimize=false>;

typedef struct
{
    uquad placementID;
} RagdollGetPosNode__InputsType <optimize=false>;

typedef struct
{
    RagdollGetPosNode__InputsType inputs;
    PlacementPath placementDefault;
    ubyte ragdollBoneID;
    byte outputOnInit;
} RagdollGetPosNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float waterCurrentFactor;
} RagdollSetParamsNode__InputsType <optimize=false>;

typedef struct
{
    RagdollSetParamsNode__InputsType inputs;
    PlacementPath placementDefault;
} RagdollSetParamsNode <optimize=false>;

typedef struct
{
    float transitionTime;
    int transitionType;
    float releaseTransitionTime;
    int releaseTransitionType;
    int viewportID;
    FSkip(4);
    uquad placementID;
    unsigned int segmentID;
    float focusDistance;
} Render_GraphicsOverride__InputsType <optimize=false>;

typedef struct
{
    float inputRange[2];
    float outputRange[2];
    float gamma;
} ColorCorrection__ColorLevels <optimize=false>;

typedef struct
{
    byte ccContrastEnabled;
    FSkip(3);
    ColorCorrection__ColorLevels intensityLevels;
    ubyte intensityCurve[256];
    byte ccSaturationEnabled;
    FSkip(3);
    float saturation;
    ubyte intensitySaturation[256];
    byte ccTintEnabled;
    FSkip(7);
    Ref intensityColorTintRef;
    if (CanSeekTo(intensityColorTintRef))
    {
        SeekToRef(intensityColorTintRef);
        MyColorBar intensityColorTint;
        ReturnFromRef();
    }
    byte ccFilmGrainEnabledV2;
    FSkip(3);
    float ccFilmGrainStrength;
    float hdrSaturation;
    float hdrValue;
} ColorCorrection <optimize=false>;

typedef struct
{
    int gradingMethod;
    float brightness;
    float contrast;
    float whitePointTemperature;
    Ref lutTextureRef;
} ColorGradingData <optimize=false>;

typedef struct
{
    byte blurEnabled;
    FSkip(3);
    float blurStart;
    float blurEnd;
    float blurStrength;
} DepthBlurData <optimize=false>;

typedef struct
{
    unsigned int targetSegmentID;
    byte blurEnabled;
    FSkip(3);
    float focusDistance;
    float nearBlurStrength;
    float nearBlendDistance;
    float nearFocusRange;
    float farBlurStrength;
    float farBlendDistance;
    float farFocusRange;
    byte enableBokeh;
    byte hexagonalBokeh;
    byte useLensParameters;
    FSkip(1);
    float lensFocusDistance;
    float lensFStop;
} DepthOfFieldData <optimize=false>;

typedef struct
{
    byte vignetteBlurEnabled;
    FSkip(3);
    float vignetteBlurInnerRadius;
    float vignetteBlurOuterRadius;
    float vignetteBlurAmount;
} BlurVignetteData <optimize=false>;

typedef struct
{
    byte vignetteColorEnabled;
    FSkip(3);
    float vignetteColorInnerRadius;
    float vignetteColorOuterRadius;
    float vignetteColorAmount;
    unsigned int vignetteColor;
    unsigned int vignetteInnerColor;
    float vignetteInnerColorAmount;
    float vignetteCenterPoint[2];
} ColorVignetteData <optimize=false>;

typedef struct
{
    float minAngleToActivate;
    float minDistanceToActivate;
    float activationTime;
    byte disabled;
    FSkip(3);
    float minSpeedPercent;
    float maxSpeedPercent;
    float blurLengthScale;
    float decayRate;
    byte localEnabled;
    FSkip(3);
    float localDamper;
    byte doCutDetection;
    FSkip(3);
    float cutAngleThresholdDegs;
    float cutDistThreshold;
} MotionBlurData <optimize=false>;

typedef struct
{
    byte staticEnabled;
    byte dynamicEnabled;
    FSkip(2);
    float motionblurScale;
    float motionblurBeginOpacity;
    float motionblurEndOpacity;
    float velocityPower;
} HlslMotionBlurData <optimize=false>;

typedef struct
{
    float bloomStrength;
    float bloomThreshold;
    float bloomRadius;
} BloomData <optimize=false>;

typedef struct
{
    byte distanceFogEnabled;
    byte distanceFogOverridesDrawDist;
    FSkip(2);
    unsigned int distanceColor;
    float distanceNear;
    float distanceFar;
    float distanceFogFactor;
    float startFadeHeight;
    float endFadeHeight;
    float skyBrightness;
    float skyGamma;
    float cubeInfl;
    float rotZ;
    FSkip(4);
    Ref fogColTextureRef;
    float colorTextureMinMip;
    float colorTextureMaxMip;
    byte fogNoiseEnabled;
    FSkip(7);
    Ref noiseTextureRef;
    float distanceNoiseBlend;
    float noiseScaleR;
    float noiseScaleG;
    float noiseScaleB;
    float noiseScrollU;
    float noiseScrollV;
} NonLinearHeightFogData <optimize=false>;

typedef struct
{
    float volumetricFogDistance;
    int volumetricLightShadowMap;
} VolumetricLightingData <optimize=false>;

typedef struct
{
    byte ssaoEnabled;
    FSkip(3);
    float angularBias;
    float blurRadius;
    float blurSharpness;
    float powExponent;
    float sceneScale;
    float ssaoStrength;
    float rangeScale;
    ubyte ssaoColorR;
    ubyte ssaoColorG;
    ubyte ssaoColorB;
    FSkip(1);
    float screenRadius;
    float occlusionMax;
    float intensity;
    float contrast;
} SSAOSystem <optimize=false>;

typedef struct
{
    ubyte colorR;
    ubyte colorG;
    ubyte colorB;
    FSkip(1);
    float intensity;
} GlobalAmbient <optimize=false>;

typedef struct
{
    byte enabled;
    ubyte colorR;
    ubyte colorG;
    ubyte colorB;
    float intensity;
} SecondaryAmbient <optimize=false>;

typedef struct
{
    float cubeMap[27];
    FSkip(4);
    Ref globalProbeRef;
    float gscale;
    float scale;
    float metalShiny;
} SphericalHarmonic <optimize=false>;

typedef struct
{
    byte postSpecEnabled;
    ubyte postSpecColR;
    ubyte postSpecColG;
    ubyte postSpecColB;
    float postSpecInts;
    float postSpecPowS;
    float postSpecAmbS;
    float postSpecSsrBooster;
    FSkip(4);
    Ref uberCubeReflTextureRef;
    float postSpecUbercubeInfl;
} PostReflection <optimize=false>;

typedef struct
{
    GlobalAmbient globalAmbient;
    SecondaryAmbient secondaryAmbient;
    SphericalHarmonic sphericalHarmonic;
    PostReflection postReflection;
    byte bFullResAmbient;
} GraphicsOverride__AmbientOverrideData <optimize=false>;

typedef struct
{
    float bloomScale;
} TonemapData <optimize=false>;

typedef struct
{
    byte exposureAdaptationEnabled;
    FSkip(3);
    float adaptationUpSpeed;
    float adaptationDownSpeed;
    float exposureComp;
    float exposureMin;
    float exposureMax;
    float exposureForcedValue;
    byte useHistogram;
} ExposureData <optimize=false>;

typedef struct
{
    float vfxHdrScale;
} VfxData <optimize=false>;

typedef struct
{
    ubyte rimColorR;
    ubyte rimColorG;
    ubyte rimColorB;
    FSkip(1);
    float distanceMax;
    float distanceMin;
    float powerMax;
    float powerMin;
    float intensityMax;
    float intensityMin;
} RimRenderData <optimize=false>;

typedef struct
{
    float lodScaleMultiplier;
} LODScaleData <optimize=false>;

typedef struct
{
    int numShadowMaps;
    byte useSDSM;
    byte disableSDSM;
    byte pssmIsAbsolute;
    FSkip(1);
    float pssmDistance1;
    float pssmDistance2;
    float pssmDistance3;
    float pssmDistance4;
    float fGSMRange;
    float fGSMRangeStep;
} PSSMDistanceData <optimize=false>;

typedef struct
{
    float lightRangeBucket1;
    float lightRangeBucket2;
    float lightRangeMin;
    float lightRangeMax;
    float lightRangeIncr;
    float lightRangeDecr;
    float lightRangeIncrThreshold;
    float lightRangeDecrThreshold;
    float lightRangeDefault;
    float colorRangeBucket1;
    float colorRangeBucket2;
    float colorRangeMin;
    float colorRangeMax;
    float colorRangeIncr;
    float colorRangeDecr;
    float colorRangeIncrThreshold;
    float colorRangeDecrThreshold;
    float colorRangeDefault;
    float lightRangeMinEffectiveUsage;
} AdaptiveRangesData <optimize=false>;

typedef struct
{
    byte bOARBeforeTranslucent;
} GraphicsOverride__OSAlphaRenderOverrideData <optimize=false>;

typedef struct
{
    float intensity;
} Wetness <optimize=false>;

typedef struct
{
    Wetness wetness;
} GraphicsOverride__WetnessOverrideData <optimize=false>;

typedef struct
{
    byte ssrEnabled;
    byte bFullResSSR;
} GraphicsOverride__SSROverrideData <optimize=false>;

typedef union
{
    ColorCorrection colorCorrectionData;
    ColorGradingData colorGradingData;
    DepthBlurData depthBlurData;
    DepthOfFieldData depthOfFieldData;
    BlurVignetteData blurVignetteData;
    ColorVignetteData colorVignetteData;
    MotionBlurData motionBlurData;
    HlslMotionBlurData hlslMotionBlurData;
    BloomData bloomData;
    NonLinearHeightFogData nlhFogData;
    VolumetricLightingData volumetricLightingData;
    SSAOSystem ssaoData;
    GraphicsOverride__AmbientOverrideData ambientData;
    TonemapData tonemapData;
    ExposureData exposureData;
    VfxData vfxData;
    RimRenderData rimRenderData;
    LODScaleData lodScaleData;
    PSSMDistanceData pssmDistanceData;
    AdaptiveRangesData adaptiveRangesData;
    GraphicsOverride__OSAlphaRenderOverrideData osAlphaRenderOverrideData;
    GraphicsOverride__WetnessOverrideData wetnessOverrideData;
    GraphicsOverride__SSROverrideData ssrOverrideData;
} GraphicsOverride__OverrideDataUnion;

typedef struct
{
    int overrideType;
    GraphicsOverride__OverrideDataUnion overrideData;
    FSkip(4);
    Ref overrideNameRef;
    if (CanSeekTo(overrideNameRef))
    {
        SeekToRef(overrideNameRef);
        string overrideName;
        ReturnFromRef();
    }
} GraphicsOverride__GraphicsOverrideData <optimize=false>;

typedef struct
{
    Ref overrideListRef;
    unsigned int numOverrides;
    if (CanSeekTo(overrideListRef))
    {
        SeekToRef(overrideListRef);
        GraphicsOverride__GraphicsOverrideData overrideList[numOverrides];
        ReturnFromRef();
    }
    int overridePriority;
} GraphicsOverride <optimize=false>;

typedef struct
{
    byte useLocalOverride;
    FSkip(3);
    Render_GraphicsOverride__InputsType inputs;
    unsigned int overrideID;
    PlacementPath placementDefaultID;
    Ref overrideNameRef;
    if (CanSeekTo(overrideNameRef))
    {
        SeekToRef(overrideNameRef);
        string overrideName;
        ReturnFromRef();
    }
    float blendOutTimeForStomped;
    FSkip(4);
    GraphicsOverride graphicsOverrideLocal;
} Render_GraphicsOverride <optimize=false>;

typedef struct
{
    float transitionPercent;
    int viewportID;
    uquad placementID;
    unsigned int segmentID;
} Render_GraphicsOverridePercent__InputsType <optimize=false>;

typedef struct
{
    Render_GraphicsOverridePercent__InputsType inputs;
    unsigned int overrideID;
    Ref overrideNameRef;
    if (CanSeekTo(overrideNameRef))
    {
        SeekToRef(overrideNameRef);
        string overrideName;
        ReturnFromRef();
    }
    PlacementPath placementDefaultID;
    float blendOutTimeForStomped;
} Render_GraphicsOverridePercent <optimize=false>;

typedef struct
{
    float transitionTime;
    int transitionType;
    int viewportID;
} Render_ReleaseGraphicsOverride__InputsType <optimize=false>;

typedef struct
{
    Render_ReleaseGraphicsOverride__InputsType inputs;
    unsigned int overrideID;
    int releaseMode;
    FSkip(4);
    Ref overrideNameRef;
    if (CanSeekTo(overrideNameRef))
    {
        SeekToRef(overrideNameRef);
        string overrideName;
        ReturnFromRef();
    }
} Render_ReleaseGraphicsOverride <optimize=false>;

typedef struct
{
    float transitionTime;
    byte useSDSM;
    byte disableSDSM;
    FSkip(2);
    int numShadowSplits;
    float split1Override;
    float split2Override;
    float split3Override;
    float split4Override;
    byte absoluteValue;
    FSkip(3);
    float gSMRange;
    float gSMRangeStep;
} Render_OverrideShadowSplits__InputsType <optimize=false>;

typedef struct
{
    Render_OverrideShadowSplits__InputsType inputs;
} Render_OverrideShadowSplits <optimize=false>;

typedef struct
{
    uquad instanceID;
} Render_CollectibleRender__InputsType <optimize=false>;

typedef struct
{
    PlacementPath collectibleDefaultID;
    Render_CollectibleRender__InputsType inputs;
} Render_CollectibleRender <optimize=false>;

typedef struct
{
    float xRotMin;
    float xRotMax;
    float yRotMin;
    float yRotMax;
} Render_RotateCollectibleOnStick__InputsType <optimize=false>;

typedef struct
{
    Render_RotateCollectibleOnStick__InputsType inputs;
} Render_RotateCollectibleOnStick <optimize=false>;

typedef struct
{
    unsigned int modelHostZone;
} Drawable_AddModelToSlot__InputsType <optimize=false>;

typedef union
{
    unsigned int byType;
    unsigned int byIndex;
} HostedModelRefUnion;

typedef struct
{
    unsigned int objectID;
    ushort objectLoadDep;
    FSkip(2);
    int refType;
    HostedModelRefUnion refData;
    byte useAltMaterialSet;
    FSkip(3);
    unsigned int altMaterialSetType;
} HostedModelRef <optimize=false>;

typedef struct
{
    Drawable_AddModelToSlot__InputsType inputs;
    HostedModelRef hostedModelRef;
    ModelSlotRef modelSlotRef;
    PlacementPath clientDefaultID;
} Drawable_AddModelToSlot <optimize=false>;

typedef struct
{
} Drawable_RemoveModelFromSlot__InputsType <optimize=false>;

typedef struct
{
    Drawable_RemoveModelFromSlot__InputsType inputs;
    ModelSlotRef modelSlotRef;
    byte replaceWithDefault;
    FSkip(3);
    PlacementPath clientDefaultID;
} Drawable_RemoveModelFromSlot <optimize=false>;

typedef struct
{
    byte set;
    byte remove;
    FSkip(6);
    uquad placementID;
} Render_SetHairPlaneCollision__InputType <optimize=false>;

typedef struct
{
    Render_SetHairPlaneCollision__InputType inputs;
    byte debugDrawPlane;
    FSkip(3);
    unsigned int zoneMarkerZone;
    PlacementPath zoneMarkerID;
} Render_SetHairPlaneCollision <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int profileIndex;
    float transitionTime;
} Render_SetHairSimulationProfile__InputsType <optimize=false>;

typedef struct
{
    Render_SetHairSimulationProfile__InputsType inputs;
} Render_SetHairSimulationProfile <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int profileIndex;
} Render_SetHairLODProfileOverride__InputsType <optimize=false>;

typedef struct
{
    ushort objectID;
    FSkip(6);
    Render_SetHairLODProfileOverride__InputsType inputs;
} Render_SetHairLODProfileOverride <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int profileIndex;
    float transitionTime;
} Render_SetHairRenderProfile__InputsType <optimize=false>;

typedef struct
{
    Render_SetHairRenderProfile__InputsType inputs;
} Render_SetHairRenderProfile <optimize=false>;

typedef struct
{
    uquad placementID;
} Render_SetHairObject__InputsType <optimize=false>;

typedef struct
{
    unsigned int hairSplineObject;
    ModelBoneOrMarkerReferenceWithContext playerBoneMarker;
} HairSplineDataWithContext <optimize=false>;

typedef struct
{
    Render_SetHairObject__InputsType inputs;
    HairSplineDataWithContext hairSplineData;
} Render_SetHairObject <optimize=false>;

typedef struct
{
    float position1[3];
    float position2[3];
} AGDeformSnow__InputsType <optimize=false>;

typedef struct
{
    AGDeformSnow__InputsType inputs;
    byte bUsePrevPos;
} AGDeformSnow <optimize=false>;

typedef struct
{
} AGRender_SetMotionBlur__InputsType <optimize=false>;

typedef struct
{
    AGRender_SetMotionBlur__InputsType inputs;
} AGRender_SetMotionBlur <optimize=false>;

typedef struct
{
    uquad instance;
} Render_OverrideSnowDeformationComponent__InputsType <optimize=false>;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext marker;
    float offset[3];
    byte shouldApplyPairCalculations : 1;
    byte shouldApplyFootDepthZOffset : 1;
    byte useExactSnowHeight : 1;
    byte _Bitfieldpadding2 : 5;
} Render_OverrideSnowDeformationComponent__SnowDeformComponentOverride__SnowDeformPositionData <optimize=false>;

typedef struct
{
    Ref deformMarkersListRef;
    if (CanSeekTo(deformMarkersListRef))
    {
        SeekToRef(deformMarkersListRef);
        Render_OverrideSnowDeformationComponent__SnowDeformComponentOverride__SnowDeformPositionData deformMarkersList;
        ReturnFromRef();
    }
    unsigned int deformMarkersListCount;
    float minFootDepth;
    float maxFootDepth;
    float footDepthScale;
    float footClosenessScale;
    float maxDepth;
} Render_OverrideSnowDeformationComponent__SnowDeformComponentOverride <optimize=false>;

typedef struct
{
    Render_OverrideSnowDeformationComponent__InputsType inputs;
    Render_OverrideSnowDeformationComponent__SnowDeformComponentOverride snowDeform;
} Render_OverrideSnowDeformationComponent <optimize=false>;

typedef struct
{
    PlacementPath placement;
} Render_OverrideFogVolume <optimize=false>;

typedef struct
{
    float intensity;
} AGRender_SetWetness__InputsType <optimize=false>;

typedef struct
{
    AGRender_SetWetness__InputsType inputs;
} AGRender_SetWetness <optimize=false>;

typedef struct
{
    byte choose;
    FSkip(7);
    uquad playerID;
    uquad collectiblePlacementID;
} RewardsChooseCollectibleNode__Input_Base <optimize=false>;

typedef struct
{
    byte choose;
    FSkip(7);
    uquad playerID;
    uquad collectiblePlacementID;
    unsigned int collectibleID;
} RewardsChooseCollectibleNode__Input_SpecificItem <optimize=false>;

typedef union
{
    RewardsChooseCollectibleNode__Input_Base nextAvailableItem;
    RewardsChooseCollectibleNode__Input_SpecificItem specificItem;
    RewardsChooseCollectibleNode__Input_Base randomItem;
} RewardsChooseCollectibleNode__InputsType;

enum <int> CollectibleAwardType
{
    CollectibleAwardType_NextAvailableItem,
    CollectibleAwardType_SpecificItem,
    CollectibleAwardType_RandomItem
};

enum <int> CollectibleType
{
    CollectibleType_Relic,
    CollectibleType_Document,
    CollectibleType_GenericSecret,
    CollectibleType_Mural,
    CollectibleType_Monolith,
    CollectibleType_Corpse,
    CollectibleType_LostItem,
    CollectibleType_DocumentChest,
    CollectibleType_Strongbox,
    CollectibleType_Codex,
    CollectibleType_Clue,
    CollectibleType_Crypt,
    CollectibleType_Seal,
    CollectibleType_Cave,
    CollectibleType_Store,
    CollectibleType_ResourceSkittle,
    CollectibleType_Outfits,
    CollectibleType_PostShip1,
    CollectibleType_PostShip2,
    CollectibleType_PostShip3
};

typedef struct
{
    PlacementPath playerIDDefault;
    PlacementPath collectibleIDDefault;
    byte disableNotification;
    FSkip(7);
    RewardsChooseCollectibleNode__InputsType inputs;
    FSkip(4);
    CollectibleAwardType nodeAwardType;
    int nodeType;
    ChooseCollectible collectible;
    CollectibleType collectibleType;
} RewardsChooseCollectibleNode <optimize=false>;

typedef struct
{
    uquad playerID;
    unsigned int collectibleID;
} RewardsCollectibleUIMessengerNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    RewardsCollectibleUIMessengerNode__InputsType inputs;
    byte showOnlySetUI;
} RewardsCollectibleUIMessengerNode <optimize=false>;

typedef struct
{
} Rewards_CollectibleAGHelper__InputsType <optimize=false>;

typedef struct
{
    Rewards_CollectibleAGHelper__InputsType inputs;
} Rewards_CollectibleAGHelper <optimize=false>;

typedef struct
{
    uquad placementID;
} Rewards_ActivateOutcast__InputsType <optimize=false>;

typedef struct
{
    Rewards_ActivateOutcast__InputsType inputs;
    PlacementPath placementDefault;
} Rewards_ActivateOutcast <optimize=false>;

typedef struct
{
    byte revealKnown;
    byte revealUnknown;
    FSkip(6);
    uquad playerID;
} Rewards_RevealCollectibleOnMap__InputsType <optimize=false>;

typedef struct
{
    Rewards_RevealCollectibleOnMap__InputsType inputs;
    unsigned int mapRevealGroupID;
} Rewards_RevealCollectibleOnMap <optimize=false>;

typedef struct
{
    int show;
    int hide;
    Ref typeRef;
    if (CanSeekTo(typeRef))
    {
        SeekToRef(typeRef);
        string type;
        ReturnFromRef();
    }
} ScaleformTextPrompt__InputsType <optimize=false>;

typedef struct
{
    ScaleformTextPrompt__InputsType inputs;
} ScaleformTextPrompt <optimize=false>;

typedef struct
{
    unsigned int movieID;
    FSkip(4);
    Ref functionNameRef;
    if (CanSeekTo(functionNameRef))
    {
        SeekToRef(functionNameRef);
        string functionName;
        ReturnFromRef();
    }
} ScaleformFunctionCallNode__InputsType <optimize=false>;

typedef struct
{
    ScaleformFunctionCallNode__InputsType inputs;
    ScriptableNodeInputSocketHidden args[5];
    byte bPreCache;
    byte bAllowBuffering;
} ScaleformFunctionCallNode <optimize=false>;

typedef struct
{
} ScaleformISSMovieNode__InputsType <optimize=false>;

typedef struct
{
    int promptType;
    int buttonType;
    int animationType;
    int fillIconType;
    byte precache;
    FSkip(3);
    ScaleformMovie movieData;
    FSkip(-532);
    ScaleformISSMovieNode__InputsType inputs;
} ScaleformISSMovieNode <optimize=false>;

typedef struct
{
    unsigned int movieID;
    FSkip(4);
    Ref variableNameRef;
    if (CanSeekTo(variableNameRef))
    {
        SeekToRef(variableNameRef);
        string variableName;
        ReturnFromRef();
    }
} ScaleformSetVariableNode__InputsType <optimize=false>;

typedef struct
{
    ScaleformSetVariableNode__InputsType inputs;
    ScriptableNodeInputSocket value;
} ScaleformSetVariableNode <optimize=false>;

typedef struct
{
    uquad placement;
    float position[3];
    float additional43LocalOffset[3];
    float localRotation[3];
    float worldOffset[3];
    float worldRotation[3];
    float facingOffset[3];
    float facingRotation[3];
} ScaleformMarkerAttachNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    ScaleformMarkerAttachNode__InputsType inputs;
    ModelBoneOrMarkerReference boneMarker;
    byte useOldTransform;
    byte facingCamera;
    byte facingCameraHmdVr;
    byte facingCameraOnAttach;
    byte facingCameraOnAllAxes;
    byte attachIn2D;
} ScaleformMarkerAttachNode <optimize=false>;

typedef struct
{
    uquad placement;
    float position[3];
    float additional43LocalOffset[3];
    float localRotation[3];
    float worldOffset[3];
    float worldRotation[3];
    float facingOffset[3];
    float facingRotation[3];
} ScaleformLocalSpaceAttachNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefault;
    ScaleformLocalSpaceAttachNode__InputsType inputs;
    byte facingCamera;
    byte facingCameraHmdVr;
    byte facingCameraOnAttach;
    byte facingCameraOnAllAxes;
} ScaleformLocalSpaceAttachNode <optimize=false>;

typedef struct
{
    float position[3];
    float localRotation[3];
} ScaleformCameraAttachNode__InputsType <optimize=false>;

typedef struct
{
    ScaleformCameraAttachNode__InputsType inputs;
} ScaleformCameraAttachNode <optimize=false>;

typedef struct
{
    uquad player;
    Ref promptTextRef;
    if (CanSeekTo(promptTextRef))
    {
        SeekToRef(promptTextRef);
        string promptText;
        ReturnFromRef();
    }
    byte blink;
    FSkip(3);
    unsigned int priority;
} ScaleformActionPromptNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    unsigned int promptType;
    FSkip(4);
    ScaleformActionPromptNode__InputsType inputs;
} ScaleformActionPromptNode <optimize=false>;

typedef struct
{
    uquad player;
} ScaleformHUDNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    ScaleformHUDNode__InputsType inputs;
} ScaleformHUDNode <optimize=false>;

typedef struct
{
    uquad player;
    Ref promptTextRef;
    if (CanSeekTo(promptTextRef))
    {
        SeekToRef(promptTextRef);
        string promptText;
        ReturnFromRef();
    }
    byte blink;
    FSkip(3);
    unsigned int priority;
} UIPlusDangerPrompt__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    int promptType;
    FSkip(4);
    UIPlusDangerPrompt__InputsType inputs;
} UIPlusDangerPrompt <optimize=false>;

typedef struct
{
    uquad movieID;
    uquad imageID;
    Ref actionRef;
    if (CanSeekTo(actionRef))
    {
        SeekToRef(actionRef);
        string action;
        ReturnFromRef();
    }
} ImageStreamNode__InputsType <optimize=false>;

typedef struct
{
    ImageStreamNode__InputsType inputs;
} ImageStreamNode <optimize=false>;

typedef struct
{
} Scaleform_UILayer__InputsType <optimize=false>;

typedef struct
{
    int layer;
    FSkip(-4);
    Scaleform_UILayer__InputsType inputs;
} Scaleform_UILayer <optimize=false>;

typedef struct
{
    unsigned int imageRes;
    FSkip(4);
    Ref filepathRef;
    if (CanSeekTo(filepathRef))
    {
        SeekToRef(filepathRef);
        string filepath;
        ReturnFromRef();
    }
    int offSetX;
    int offSetY;
    int width;
    int height;
    Ref actionRef;
    if (CanSeekTo(actionRef))
    {
        SeekToRef(actionRef);
        string action;
        ReturnFromRef();
    }
    unsigned int imageResVR;
    FSkip(4);
    Ref filepathVRRef;
    if (CanSeekTo(filepathVRRef))
    {
        SeekToRef(filepathVRRef);
        string filepathVR;
        ReturnFromRef();
    }
    int offSetXVR;
    int offSetYVR;
    int widthVR;
    int heightVR;
} ImagePath <optimize=false>;

typedef struct
{
    ImagePath imagePath;
} Scaleform_ImageResourceID <optimize=false>;

typedef struct
{
    unsigned int imageRes;
    FSkip(4);
    Ref filepathRef;
    if (CanSeekTo(filepathRef))
    {
        SeekToRef(filepathRef);
        string filepath;
        ReturnFromRef();
    }
} ImagePathWithoutSettings <optimize=false>;

typedef struct
{
} Scaleform_ImageStreamPreloadResource__InputsType <optimize=false>;

typedef struct
{
    ImagePathWithoutSettings imagePath;
    byte bReleaseOnDestroy;
    FSkip(-17);
    Scaleform_ImageStreamPreloadResource__InputsType inputs;
} Scaleform_ImageStreamPreloadResource <optimize=false>;

typedef struct
{
    uquad movieID;
    uquad imageID;
} Scaleform_ImageStreamLoadIntoMovie__InputsType <optimize=false>;

typedef struct
{
    int xOffset;
    int yOffset;
    int sizeX;
    int sizeY;
    Ref actionRef;
    if (CanSeekTo(actionRef))
    {
        SeekToRef(actionRef);
        string action;
        ReturnFromRef();
    }
    Scaleform_ImageStreamLoadIntoMovie__InputsType inputs;
} Scaleform_ImageStreamLoadIntoMovie <optimize=false>;

typedef struct
{
    uquad playerID;
} GetMovieID__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    int menuState;
    FSkip(4);
    GetMovieID__InputsType inputs;
} GetMovieID <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad placementID;
} ScaleformIndicatorNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerIDDefault;
    PlacementPath placementDefaultID;
    ScaleformIndicatorNode__InputsType inputs;
} ScaleformIndicatorNode <optimize=false>;

typedef struct
{
    int markerRevealType;
    PlacementPath placementDefault;
} ScaleformRevealMarkerObjectNode <optimize=false>;

typedef struct
{
    int markerCompleteType;
    PlacementPath placementDefault;
} ScaleformCompleteMarkerObjectNode <optimize=false>;

typedef struct
{
} CampsiteDataNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int campsiteID;
} CampsiteID <optimize=false>;

typedef struct
{
    CampsiteDataNode__InputsType inputs;
    CampsiteID campsiteid;
    int campsiteState;
    byte noUIevents;
    byte forceCampsiteState;
    FSkip(2);
    float displayTime;
} CampsiteDataNode <optimize=false>;

typedef struct
{
    unsigned int campsiteID <format=hex>;
} CampsiteElement <optimize=false>;

typedef struct
{
    byte isChallengeTomb;
    FSkip(7);
    Ref markerRef;
    if (CanSeekTo(markerRef))
    {
        SeekToRef(markerRef);
        CampsiteElement marker;
        ReturnFromRef();
    }
} UI_DisplayNotification__Campsite_ChallengeTomb <optimize=false>;

typedef struct
{
    unsigned int objective;
} ObjectiveElement <optimize=false>;

typedef struct
{
    Ref markerRef;
    if (CanSeekTo(markerRef))
    {
        SeekToRef(markerRef);
        ObjectiveElement marker;
        ReturnFromRef();
    }
} UI_DisplayNotification__Objective_Mission <optimize=false>;

typedef struct
{
    uquad playerID;
    uquad placement;
} UI_DisplayNotification__InputType <optimize=false>;

typedef struct
{
    PlacementPath markerPlacement;
} UI_DisplayNotification__SocialPuzzle <optimize=false>;

typedef struct
{
    PlacementPath markerPlacement;
} UI_DisplayNotification__NPC <optimize=false>;

typedef struct
{
    PlacementPath markerPlacement;
} UI_DisplayNotification__Collectible <optimize=false>;

typedef struct
{
    PlacementPath markerPlacement;
} UI_DisplayNotification__Resource <optimize=false>;

typedef struct
{
    int autopanMarkerType;
    byte dataCreatedInDtp;
    FSkip(3);
    Ref campsiteDataRef;
    if (CanSeekTo(campsiteDataRef))
    {
        SeekToRef(campsiteDataRef);
        UI_DisplayNotification__Campsite_ChallengeTomb campsiteData;
        ReturnFromRef();
    }
    Ref objectiveDataRef;
    if (CanSeekTo(objectiveDataRef))
    {
        SeekToRef(objectiveDataRef);
        UI_DisplayNotification__Objective_Mission objectiveData;
        ReturnFromRef();
    }
    Ref socialPuzzleDataRef;
    if (CanSeekTo(socialPuzzleDataRef))
    {
        SeekToRef(socialPuzzleDataRef);
        UI_DisplayNotification__SocialPuzzle socialPuzzleData;
        ReturnFromRef();
    }
    Ref npcDataRef;
    if (CanSeekTo(npcDataRef))
    {
        SeekToRef(npcDataRef);
        UI_DisplayNotification__NPC npcData;
        ReturnFromRef();
    }
    Ref collectibleDataRef;
    if (CanSeekTo(collectibleDataRef))
    {
        SeekToRef(collectibleDataRef);
        UI_DisplayNotification__Collectible collectibleData;
        ReturnFromRef();
    }
    Ref resourceDataRef;
    if (CanSeekTo(resourceDataRef))
    {
        SeekToRef(resourceDataRef);
        UI_DisplayNotification__Resource resourceData;
        ReturnFromRef();
    }
} UI_DisplayNotification__AutopanMarkerData <optimize=false>;

typedef struct
{
    UI_DisplayNotification__InputType inputs;
    FSkip(8);
    int location;
    FSkip(4);
    Ref flashIconRef;
    if (CanSeekTo(flashIconRef))
    {
        SeekToRef(flashIconRef);
        string flashIcon;
        ReturnFromRef();
    }
    uquad topStringID <format=hex>;
    uquad bottomStringID <format=hex>;
    float displayTime;
    float delayTime;
    ImagePath imagePath;
    int hotlinkState;
    ushort survivalGuidePlayerTrait;
    FSkip(2);
    ScriptObjective survivalGuideTutorialStep;
    byte allowDuplicated;
    FSkip(3);
    unsigned int acquiredAudio;
    int notificationType;
    byte requeueAfterStomping;
    byte overrideDisplayTime;
    byte isMissingGear;
    byte isNewGearAcquired;
    byte isNewSkill;
    byte isBigCelebration;
    byte replaceTextWithBrokenWeaponCount;
    FSkip(1);
    unsigned int brokenWeaponAmmoHash <format=hex>;
    byte replaceTextWithEnduranceStat;
    FSkip(3);
    int enduranceStat;
    byte grabAllArtifacts;
    FSkip(7);
    UI_DisplayNotification__AutopanMarkerData autopanData;
    PlacementPath placementDefault;
} UI_DisplayNotification <optimize=false>;

typedef struct
{
} UI_DisplayObjectiveListNotification__InputType <optimize=false>;

typedef struct
{
    UI_DisplayObjectiveListNotification__InputType inputs;
    ScriptObjective objective;
    int groupID;
} UI_DisplayObjectiveListNotification <optimize=false>;

typedef struct
{
    float getMapRatios[3];
    FSkip(4);
    uquad playerPlacement;
} GetMarkerRatio__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerPlacementDefault;
    GetMarkerRatio__InputsType inputs;
} GetMarkerRatio <optimize=false>;

typedef struct
{
    Ref notificationRef;
    if (CanSeekTo(notificationRef))
    {
        SeekToRef(notificationRef);
        string notification;
        ReturnFromRef();
    }
} ScaleformYesNoNotificationNode__InputsType <optimize=false>;

typedef struct
{
    ScaleformYesNoNotificationNode__InputsType inputs;
    uquad title;
} ScaleformYesNoNotificationNode <optimize=false>;

typedef struct
{
} Scaleform_WidgetGroupHideShow__InputsType <optimize=false>;

typedef struct
{
    int widgetGroup;
    float hideTime;
    float showTime;
    FSkip(-12);
    Scaleform_WidgetGroupHideShow__InputsType inputs;
} Scaleform_WidgetGroupHideShow <optimize=false>;

typedef struct
{
} Scaleform_WidgetGroupIsVisible__InputsType <optimize=false>;

typedef struct
{
    int widgetGroup;
    FSkip(-4);
    Scaleform_WidgetGroupIsVisible__InputsType inputs;
} Scaleform_WidgetGroupIsVisible <optimize=false>;

typedef struct
{
    Ref puzzleTitleRef;
    if (CanSeekTo(puzzleTitleRef))
    {
        SeekToRef(puzzleTitleRef);
        string puzzleTitle;
        ReturnFromRef();
    }
    int skillPoints;
} UI_SocialEvents__InputsType <optimize=false>;

typedef struct
{
    UI_SocialEvents__InputsType inputs;
    float displayTime;
} UI_SocialEvents <optimize=false>;

typedef struct
{
} Tomb_DataNode__InputsType <optimize=false>;

typedef struct
{
    Tomb_DataNode__InputsType inputs;
    float duration;
    byte showUI;
    FSkip(3);
    CampsiteID challengeTomb;
    FSkip(4);
    uquad challengeTombTitle;
} Tomb_DataNode <optimize=false>;

typedef struct
{
    uquad attachID;
    float progress;
    FSkip(4);
    uquad playerID;
} UI_DisplayButton__InputType <optimize=false>;

typedef struct
{
    unsigned int ammoType;
    ushort count;
} AmmoRequirementListItem <optimize=false>;

typedef struct
{
    int type;
    FSkip(4);
    Ref movieClipRef;
    if (CanSeekTo(movieClipRef))
    {
        SeekToRef(movieClipRef);
        string movieClip;
        ReturnFromRef();
    }
    ScaleformMovie movie;
} UiWidgetItem <optimize=false>;

typedef struct
{
    UI_DisplayButton__InputType inputs;
    Ref flashIconRef;
    if (CanSeekTo(flashIconRef))
    {
        SeekToRef(flashIconRef);
        string flashIcon;
        ReturnFromRef();
    }
    Ref buttonIconRef;
    if (CanSeekTo(buttonIconRef))
    {
        SeekToRef(buttonIconRef);
        string buttonIcon;
        ReturnFromRef();
    }
    int valueRange;
    byte addDisabledIcon;
    byte isAHeldInteract;
    byte isADualInteract;
    FSkip(1);
    Ref requiredResourcesRef;
    unsigned int requiredResourcesCount;
    if (CanSeekTo(requiredResourcesRef))
    {
        SeekToRef(requiredResourcesRef);
        AmmoRequirementListItem requiredResources[requiredResourcesCount];
        ReturnFromRef();
    }
    UiWidgetItem scaleformMovieData;
} UI_DisplayButton <optimize=false>;

typedef struct
{
    float progress;
    float startingValue;
    uquad attachID;
} UI_DisplayRotationButton__InputType <optimize=false>;

typedef struct
{
    UI_DisplayRotationButton__InputType inputs;
    int rotationDirection;
    int valueRange;
    Ref buttonIconRef;
    if (CanSeekTo(buttonIconRef))
    {
        SeekToRef(buttonIconRef);
        string buttonIcon;
        ReturnFromRef();
    }
    byte addDisabledIcon;
    FSkip(3);
    UiWidgetItem scaleformMovieData;
} UI_DisplayRotationButton <optimize=false>;

typedef struct
{
    uquad placementID;
    Ref variableNameRef;
    if (CanSeekTo(variableNameRef))
    {
        SeekToRef(variableNameRef);
        string variableName;
        ReturnFromRef();
    }
} ScriptGetVarNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ScriptGetVarNode__InputsType inputs;
} ScriptGetVarNode <optimize=false>;

typedef struct
{
    uquad placementID;
    Ref variableNameRef;
    if (CanSeekTo(variableNameRef))
    {
        SeekToRef(variableNameRef);
        string variableName;
        ReturnFromRef();
    }
} ScriptSetVarNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ScriptSetVarNode__InputsType inputs;
} ScriptSetVarNode <optimize=false>;

typedef struct
{
    uquad placementID;
    Ref functionNameRef;
    if (CanSeekTo(functionNameRef))
    {
        SeekToRef(functionNameRef);
        string functionName;
        ReturnFromRef();
    }
    int arg0;
    int arg1;
} ScriptCallFunctionNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    ScriptCallFunctionNode__InputsType inputs;
} ScriptCallFunctionNode <optimize=false>;

typedef struct
{
} Sensible_SetProfileNode__InputsType <optimize=false>;

typedef struct
{
    Sensible_SetProfileNode__InputsType inputs;
    unsigned int sensibleProfileIndex;
} Sensible_SetProfileNode <optimize=false>;

typedef struct
{
    Ref _stringRef;
    if (CanSeekTo(_stringRef))
    {
        SeekToRef(_stringRef);
        string _string;
        ReturnFromRef();
    }
} AGSetString__InputsType <optimize=false>;

typedef struct
{
    AGSetString__InputsType inputs;
    byte outputOnInit;
} AGSetString <optimize=false>;

typedef struct
{
    Ref aRef;
    if (CanSeekTo(aRef))
    {
        SeekToRef(aRef);
        string a;
        ReturnFromRef();
    }
    Ref bRef;
    if (CanSeekTo(bRef))
    {
        SeekToRef(bRef);
        string b;
        ReturnFromRef();
    }
} AGStringConcatenate__InputsType <optimize=false>;

typedef struct
{
    AGStringConcatenate__InputsType inputs;
} AGStringConcatenate <optimize=false>;

typedef struct
{
    Ref aRef;
    if (CanSeekTo(aRef))
    {
        SeekToRef(aRef);
        string a;
        ReturnFromRef();
    }
    Ref bRef;
    if (CanSeekTo(bRef))
    {
        SeekToRef(bRef);
        string b;
        ReturnFromRef();
    }
    byte caseInsensitive;
} AGStringCompare__InputsType <optimize=false>;

typedef struct
{
    AGStringCompare__InputsType inputs;
} AGStringCompare <optimize=false>;

typedef struct
{
} GetLocalString__InputsType <optimize=false>;

typedef struct
{
    GetLocalString__InputsType inputs;
    uquad localStrId;
} GetLocalString <optimize=false>;

typedef struct
{
    Ref factionRef;
    if (CanSeekTo(factionRef))
    {
        SeekToRef(factionRef);
        string faction;
        ReturnFromRef();
    }
    Ref problemRef;
    if (CanSeekTo(problemRef))
    {
        SeekToRef(problemRef);
        string problem;
        ReturnFromRef();
    }
    Ref actionRef;
    if (CanSeekTo(actionRef))
    {
        SeekToRef(actionRef);
        string action;
        ReturnFromRef();
    }
    Ref countRef;
    if (CanSeekTo(countRef))
    {
        SeekToRef(countRef);
        string count;
        ReturnFromRef();
    }
    Ref typeRef;
    if (CanSeekTo(typeRef))
    {
        SeekToRef(typeRef);
        string type;
        ReturnFromRef();
    }
    Ref aRef;
    if (CanSeekTo(aRef))
    {
        SeekToRef(aRef);
        string a;
        ReturnFromRef();
    }
    Ref sourceRef;
    if (CanSeekTo(sourceRef))
    {
        SeekToRef(sourceRef);
        string source;
        ReturnFromRef();
    }
    Ref bRef;
    if (CanSeekTo(bRef))
    {
        SeekToRef(bRef);
        string b;
        ReturnFromRef();
    }
    Ref targetRef;
    if (CanSeekTo(targetRef))
    {
        SeekToRef(targetRef);
        string target;
        ReturnFromRef();
    }
    Ref cRef;
    if (CanSeekTo(cRef))
    {
        SeekToRef(cRef);
        string c;
        ReturnFromRef();
    }
    Ref areaRef;
    if (CanSeekTo(areaRef))
    {
        SeekToRef(areaRef);
        string area;
        ReturnFromRef();
    }
    Ref locationRef;
    if (CanSeekTo(locationRef))
    {
        SeekToRef(locationRef);
        string location;
        ReturnFromRef();
    }
    Ref dRef;
    if (CanSeekTo(dRef))
    {
        SeekToRef(dRef);
        string d;
        ReturnFromRef();
    }
    Ref conditionRef;
    if (CanSeekTo(conditionRef))
    {
        SeekToRef(conditionRef);
        string condition;
        ReturnFromRef();
    }
} AGSystemicMissionStringGenerator__InputsType <optimize=false>;

typedef struct
{
    uquad missionRuleString;
    AGSystemicMissionStringGenerator__InputsType inputs;
} AGSystemicMissionStringGenerator <optimize=false>;

typedef struct
{
    float delay;
} TimeDelayNode__InputsType <optimize=false>;

typedef struct
{
    TimeDelayNode__InputsType inputs;
    byte useActualTime;
    byte useFramesInsteadOfSeconds;
    byte restartOnActivate;
} TimeDelayNode <optimize=false>;

typedef struct
{
    int frameDelay;
} TimeFrameDelayNode__InputsType <optimize=false>;

typedef struct
{
    TimeFrameDelayNode__InputsType inputs;
} TimeFrameDelayNode <optimize=false>;

typedef struct
{
    float alarmTime;
    byte loopOnAlarm;
    FSkip(3);
    float timeMult;
} TimeStopwatchNode__InputsType <optimize=false>;

typedef struct
{
    TimeStopwatchNode__InputsType inputs;
    byte visibleCountdown;
    FSkip(3);
    Ref visibleCountdownPrefixRef;
    if (CanSeekTo(visibleCountdownPrefixRef))
    {
        SeekToRef(visibleCountdownPrefixRef);
        string visibleCountdownPrefix;
        ReturnFromRef();
    }
    byte outputPercentElapsed;
    byte useActualTime;
} TimeStopwatchNode <optimize=false>;

typedef struct
{
    float dilation;
} TimeQuakeManagerNode__InputsType <optimize=false>;

typedef struct
{
    TimeQuakeManagerNode__InputsType inputs;
} TimeQuakeManagerNode <optimize=false>;

typedef struct
{
} AGFreezeGame__InputsType <optimize=false>;

typedef struct
{
    ubyte pauseType;
    FSkip(-1);
    AGFreezeGame__InputsType inputs;
} AGFreezeGame <optimize=false>;

typedef struct
{
    unsigned int alarmTimeHours;
    unsigned int alarmTimeMins;
    byte loopOnAlarm;
    byte outputPercentElapsed;
    byte visibleCountdown;
    FSkip(5);
    Ref visibleCountdownPrefixRef;
    if (CanSeekTo(visibleCountdownPrefixRef))
    {
        SeekToRef(visibleCountdownPrefixRef);
        string visibleCountdownPrefix;
        ReturnFromRef();
    }
    ushort uniqueName;
} Time_PersistentPlaytimeStopwatch <optimize=false>;

typedef struct
{
    byte enabled;
    byte enabledForDuplicas;
    byte triggerPlayerCount;
    FSkip(5);
    uquad triggerPlacement;
} Instance_PlayerTrigger__InputsType <optimize=false>;

typedef struct
{
    Instance_PlayerTrigger__InputsType inputs;
    PlacementPath triggerPlacement;
    byte ignoreDeadPlayers;
} Instance_PlayerTrigger <optimize=false>;

typedef struct
{
    byte globalEnable;
    byte globalDisable;
    byte query;
} Instance_TriggerMaster__InputsSafe <optimize=false>;

typedef struct
{
    byte globalEnable;
    byte globalDisable;
    byte query;
    byte unlock;
    unsigned int key;
} Instance_TriggerMaster__InputsAdvanced <optimize=false>;

typedef union
{
    Instance_TriggerMaster__InputsSafe safeMode;
    Instance_TriggerMaster__InputsAdvanced advancedMode;
} Instance_TriggerMaster__InputsType;

typedef struct
{
    Instance_TriggerMaster__InputsType inputs;
    int controlMode;
    PlacementPath triggerPlacement;
} Instance_TriggerMaster <optimize=false>;

typedef struct
{
    Ref keywordRef;
    if (CanSeekTo(keywordRef))
    {
        SeekToRef(keywordRef);
        string keyword;
        ReturnFromRef();
    }
} Twitch_KeywordListener <optimize=false>;

typedef struct
{
    unsigned int cardEvent;
} Twitch_TriggerGiftEvent__CardEventData <optimize=false>;

typedef struct
{
    Twitch_TriggerGiftEvent__CardEventData cardEvent;
} Twitch_TriggerGiftEvent <optimize=false>;

typedef struct
{
} Twitch_BroadcastListener <optimize=false>;

typedef struct
{
    byte trigger;
} ZoneMarkerNode__InputType <optimize=false>;

typedef struct
{
    ZoneMarkerNode__InputType inputs;
    FSkip(3);
    unsigned int zoneMarkerZone;
    PlacementPath zoneMarkerID;
} ZoneMarkerNode <optimize=false>;

typedef struct
{
    byte enabled;
    byte enabledPassthrough;
} CellNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    int cellUniqueID;
} CellNode__AGCell <optimize=false>;

typedef struct
{
    CellNode__InputsType inputs;
    CellNode__AGCell cell;
    byte hierarchical;
} CellNode <optimize=false>;

typedef struct
{
    byte enabled;
} PortalNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    unsigned int portalIndex;
} PortalNode__AGPortal <optimize=false>;

typedef struct
{
    PortalNode__InputsType inputs;
    FSkip(1);
    PortalNode__AGPortal portal;
} PortalNode <optimize=false>;

typedef struct
{
    byte enabled;
} OccluderNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    int occluderId;
} OccluderNode__AGOccluder <optimize=false>;

typedef struct
{
    OccluderNode__InputsType inputs;
    FSkip(1);
    OccluderNode__AGOccluder occluder;
} OccluderNode <optimize=false>;

typedef struct
{
    byte enabled;
    FSkip(3);
    int turnOn;
    int turnOff;
} JumpHelperNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    PlacementPath placementID;
} JumpHelperNode__UnitJumpHelperPlacementID <optimize=false>;

typedef struct
{
    JumpHelperNode__UnitJumpHelperPlacementID path;
} JumpHelperNode__AGJumpHelper <optimize=false>;

typedef struct
{
    JumpHelperNode__InputsType inputs;
    JumpHelperNode__AGJumpHelper jumpHelper;
} JumpHelperNode <optimize=false>;

typedef struct
{
    byte enabled;
    FSkip(3);
    int turnOn;
    int turnOff;
} JumpHelperNode2__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementID;
} JumpHelperNode2__AGJumpHelper <optimize=false>;

typedef struct
{
    JumpHelperNode2__InputsType inputs;
    JumpHelperNode2__AGJumpHelper jumpHelper;
} JumpHelperNode2 <optimize=false>;

typedef struct
{
    byte enabled;
    FSkip(3);
    int turnOn;
    int turnOff;
    int getPos;
    float setPosition[3];
    float setRotation[3];
    int groupID;
} CoverPointNode__InputsType <optimize=false>;

typedef struct
{
    CoverPointNode__InputsType inputs;
    PlacementPath coverPoint;
} CoverPointNode <optimize=false>;

typedef struct
{
    byte enabled;
    FSkip(3);
    int turnOn;
    int turnOff;
} SpawnPointNode__InputsType <optimize=false>;

typedef struct
{
    SpawnPointNode__InputsType inputs;
    FSkip(4);
    PlacementPath spawnPointPath;
    byte bAffectDespawn;
} SpawnPointNode <optimize=false>;

typedef struct
{
    unsigned int coverpointIndex;
} CoverPointStatusNode__InputsType <optimize=false>;

typedef struct
{
    CoverPointStatusNode__InputsType inputs;
    PlacementPath coverPoint;
    char statusCheckType;
} CoverPointStatusNode <optimize=false>;

typedef struct
{
    float setPrimaryAmbIntensity;
    unsigned int setPrimaryAmbColor;
    float setSecondAmbIntensity;
    unsigned int setSecondAmbColor;
    byte resetToDefault;
} UnitSetAmbientLightNode__InputsType <optimize=false>;

typedef struct
{
    UnitSetAmbientLightNode__InputsType inputs;
    FSkip(1);
    ushort unit;
    byte outOnInit;
    byte forceSecondary;
} UnitSetAmbientLightNode <optimize=false>;

typedef struct
{
    byte fire;
} UnitFireWorldStateNode__InputsType <optimize=false>;

typedef struct
{
    UnitFireWorldStateNode__InputsType inputs;
    byte useFocusUnit;
    ushort unit;
} UnitFireWorldStateNode <optimize=false>;

typedef struct
{
    byte fire;
} UnitFireTimesOfDayStreamingNode__InputsType <optimize=false>;

typedef struct
{
    UnitFireTimesOfDayStreamingNode__InputsType inputs;
    byte useFocusUnit;
    ushort unit;
} UnitFireTimesOfDayStreamingNode <optimize=false>;

typedef struct
{
} UnitStreamLayerNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    FSkip(2);
    unsigned int streamLayer;
    FSkip(-8);
    UnitStreamLayerNode__InputsType inputs;
} UnitStreamLayerNode <optimize=false>;

typedef struct
{
} GlobalStreamLayerNode__InputsType <optimize=false>;

typedef struct
{
    unsigned int streamLayer;
    FSkip(-4);
    GlobalStreamLayerNode__InputsType inputs;
} GlobalStreamLayerNode <optimize=false>;

typedef struct
{
    unsigned int exclusivityGroup;
    unsigned int customizationState;
} UnitCustomizationManagerActivateNode__GroupState <optimize=false>;

typedef struct
{
    unsigned int binaryState;
} UnitCustomizationManagerActivateNode__BinaryState <optimize=false>;

typedef union
{
    UnitCustomizationManagerActivateNode__GroupState exclusivityGroup;
    UnitCustomizationManagerActivateNode__BinaryState binaryState;
} UnitCustomizationManagerActivateNode__StateSelector;

typedef struct
{
    int stateSelectorType;
    UnitCustomizationManagerActivateNode__StateSelector stateSelector;
} UnitCustomizationManagerActivateNode__CustomizationState <optimize=false>;

typedef struct
{
} UnitCustomizationManagerActivateNode__InputsType <optimize=false>;

typedef struct
{
    Ref statesRef;
    unsigned int numStates;
    if (CanSeekTo(statesRef))
    {
        SeekToRef(statesRef);
        UnitCustomizationManagerActivateNode__CustomizationState states[numStates];
        ReturnFromRef();
    }
    FSkip(-12);
    UnitCustomizationManagerActivateNode__InputsType inputs;
} UnitCustomizationManagerActivateNode <optimize=false>;

typedef struct
{
    unsigned int exclusivityGroup;
    unsigned int customizationState;
} UnitCustomizationManagerDeactivateNode__GroupState <optimize=false>;

typedef struct
{
    unsigned int binaryState;
} UnitCustomizationManagerDeactivateNode__BinaryState <optimize=false>;

typedef union
{
    UnitCustomizationManagerDeactivateNode__GroupState exclusivityGroup;
    UnitCustomizationManagerDeactivateNode__BinaryState binaryState;
} UnitCustomizationManagerDeactivateNode__StateSelector;

typedef struct
{
    int stateSelectorType;
    UnitCustomizationManagerDeactivateNode__StateSelector stateSelector;
} UnitCustomizationManagerDeactivateNode__CustomizationState <optimize=false>;

typedef struct
{
} UnitCustomizationManagerDeactivateNode__InputsType <optimize=false>;

typedef struct
{
    Ref statesRef;
    unsigned int numStates;
    if (CanSeekTo(statesRef))
    {
        SeekToRef(statesRef);
        UnitCustomizationManagerDeactivateNode__CustomizationState states[numStates];
        ReturnFromRef();
    }
    FSkip(-12);
    UnitCustomizationManagerDeactivateNode__InputsType inputs;
} UnitCustomizationManagerDeactivateNode <optimize=false>;

typedef struct
{
    unsigned int exclusivityGroup;
    unsigned int customizationState;
} UnitCustomizationManagerGetInfoNode__GroupState <optimize=false>;

typedef struct
{
    unsigned int binaryState;
} UnitCustomizationManagerGetInfoNode__BinaryState <optimize=false>;

typedef union
{
    UnitCustomizationManagerGetInfoNode__GroupState exclusivityGroup;
    UnitCustomizationManagerGetInfoNode__BinaryState binaryState;
} UnitCustomizationManagerGetInfoNode__StateSelector;

typedef struct
{
} UnitCustomizationManagerGetInfoNode__InputsType <optimize=false>;

typedef struct
{
    int outputTimingType;
    int stateSelectorType;
    UnitCustomizationManagerGetInfoNode__StateSelector stateSelector;
    FSkip(-16);
    UnitCustomizationManagerGetInfoNode__InputsType inputs;
} UnitCustomizationManagerGetInfoNode <optimize=false>;

typedef struct
{
    ushort unitID;
} UnitDebugNameNode__InputType <optimize=false>;

typedef struct
{
    UnitDebugNameNode__InputType inputs;
    byte outputOnInit;
} UnitDebugNameNode <optimize=false>;

typedef struct
{
} UnitIDNode <optimize=false>;

typedef struct
{
    ushort unitID;
} LoadUnitNode__InputsType <optimize=false>;

typedef struct
{
    LoadUnitNode__InputsType inputs;
    byte cancelNextUnload;
    byte resetInventory;
    byte useRunnableDataOverrides;
    FSkip(3);
    unsigned int runnableID;
    FSkip(4);
    Ref runnableNameRef;
    if (CanSeekTo(runnableNameRef))
    {
        SeekToRef(runnableNameRef);
        string runnableName;
        ReturnFromRef();
    }
} LoadUnitNode <optimize=false>;

typedef struct
{
} CheckUnitLoadStatusNode <optimize=false>;

typedef struct
{
    ushort unitID;
} UnloadUnitNode__InputsType <optimize=false>;

typedef struct
{
    UnloadUnitNode__InputsType inputs;
    byte ignoreNextAutoLoad;
} UnloadUnitNode <optimize=false>;

typedef struct
{
} UnitWaitForStreamingNode__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    byte waitForStreamLayer;
    FSkip(1);
    unsigned int streamLayer;
    FSkip(-8);
    UnitWaitForStreamingNode__InputsType inputs;
} UnitWaitForStreamingNode <optimize=false>;

typedef struct
{
} AG_Coverpoint_Get_Index__InputsType <optimize=false>;

typedef struct
{
    ushort unit;
    ushort coverPointIndex;
} AG_Coverpoint_Get_Index__AGCoverPoint <optimize=false>;

typedef struct
{
    AG_Coverpoint_Get_Index__InputsType inputs;
    byte outputOnInit;
    FSkip(1);
    AG_Coverpoint_Get_Index__AGCoverPoint coverPoint;
} AG_Coverpoint_Get_Index <optimize=false>;

typedef struct
{
    uquad instance;
} ValidInstanceNode__InputsType <optimize=false>;

typedef struct
{
    ValidInstanceNode__InputsType inputs;
} ValidInstanceNode <optimize=false>;

typedef struct
{
} ValidPhysicsJointNode__InputsType <optimize=false>;

typedef struct
{
    ValidPhysicsJointNode__InputsType inputs;
    PlacementPath jointPlacement;
} ValidPhysicsJointNode <optimize=false>;

typedef struct
{
    int trigger;
    int cameraMode;
} VR_CameraMode_Set__InputsType <optimize=false>;

typedef struct
{
    VR_CameraMode_Set__InputsType inputs;
} VR_CameraMode_Set <optimize=false>;

typedef struct
{
    float setCollisionDistance;
    byte setCameraLock;
    byte setCameraOffsetLock;
    byte enableCollisionDistanceCheck;
    byte enableDepthOfFieldBlur;
    byte enablePlayArea;
    byte disableCollisionDistanceCheck;
    byte disableDepthOfFieldBlur;
    byte disablePlayArea;
    byte trigger;
} VR_Globals__InputsType <optimize=false>;

typedef struct
{
    VR_Globals__InputsType inputs;
    byte outputOnInit;
} VR_Globals <optimize=false>;

typedef struct
{
    int enable;
    int disable;
    int valid;
    int invalid;
    int reset;
    float velocity[3];
} VR_SetParabola__InputsType <optimize=false>;

typedef struct
{
    VR_SetParabola__InputsType inputs;
} VR_SetParabola <optimize=false>;

typedef struct
{
    uquad player;
    byte unlockFreeMode;
    byte trigger;
} VR_Settings__InputsType <optimize=false>;

typedef struct
{
    PlacementPath playerDefault;
    byte triggerOnSettingChanged;
    FSkip(7);
    VR_Settings__InputsType inputs;
} VR_Settings <optimize=false>;

typedef struct
{
    int show;
    int hide;
    float alpha;
} VR_SetPlayArea__InputsType <optimize=false>;

typedef struct
{
    VR_SetPlayArea__InputsType inputs;
} VR_SetPlayArea <optimize=false>;

typedef struct
{
    uquad placementID;
    float changeRate;
} WaterVolume_SettingsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WaterVolume_SettingsNode__InputsType inputs;
} WaterVolume_SettingsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float speedOverride;
    float speedMult;
} WaterVolume_CurrentsNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WaterVolume_CurrentsNode__InputsType inputs;
} WaterVolume_CurrentsNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float altPosition[3];
} WaterVolume_GetWaterLevelForInstance__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    int source;
    FSkip(4);
    WaterVolume_GetWaterLevelForInstance__InputsType inputs;
} WaterVolume_GetWaterLevelForInstance <optimize=false>;

typedef struct
{
    uquad placementID;
    float position[3];
} WaterVolume_GetWaterLevelForPosition__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WaterVolume_GetWaterLevelForPosition__InputsType inputs;
} WaterVolume_GetWaterLevelForPosition <optimize=false>;

typedef struct
{
    uquad placementID;
} WaterVolume_DetectionNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WaterVolume_DetectionNode__InputsType inputs;
    byte enabledByDefault;
    byte outputOnInit;
} WaterVolume_DetectionNode <optimize=false>;

typedef struct
{
    byte start;
    FSkip(3);
    float time;
    float position[3];
    float amount;
} WaterDistortion__InputsType <optimize=false>;

typedef struct
{
    WaterDistortion__InputsType inputs;
} WaterDistortion <optimize=false>;

typedef struct
{
    uquad placementID;
    unsigned int loadout;
} WeaponChangeLoadoutNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WeaponChangeLoadoutNode__InputsType inputs;
    int inventoryType;
    ubyte uWeaponLoadoutIdx;
} WeaponChangeLoadoutNode <optimize=false>;

typedef struct
{
    uquad placementID;
} WeaponQueryLoadoutNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    WeaponQueryLoadoutNode__InputsType inputs;
    int inventoryType;
    int loadoutType;
} WeaponQueryLoadoutNode <optimize=false>;

typedef struct
{
    uquad weaponInstanceID;
    int setAmmo;
} AG_Weapon_Ammo__InputsType <optimize=false>;

typedef struct
{
    PlacementPath weaponDefaultID;
    AG_Weapon_Ammo__InputsType inputs;
} AG_Weapon_Ammo <optimize=false>;

typedef struct
{
} QueryActiveWeatherNode__InputsType <optimize=false>;

typedef struct
{
    QueryActiveWeatherNode__InputsType inputs;
    ubyte weatherType;
} QueryActiveWeatherNode <optimize=false>;

typedef struct
{
} SetActiveWeatherNode__InputsType <optimize=false>;

typedef struct
{
    SetActiveWeatherNode__InputsType inputs;
    byte resetAllWeatherTypes;
    FSkip(7);
    Ref deactivateWeatherTypesListRef;
    if (CanSeekTo(deactivateWeatherTypesListRef))
    {
        SeekToRef(deactivateWeatherTypesListRef);
        ubyte deactivateWeatherTypesList;
        ReturnFromRef();
    }
    unsigned int deactivateWeatherTypesListCount;
    FSkip(4);
    Ref activateWeatherTypesListRef;
    if (CanSeekTo(activateWeatherTypesListRef))
    {
        SeekToRef(activateWeatherTypesListRef);
        ubyte activateWeatherTypesList;
        ReturnFromRef();
    }
    unsigned int activateWeatherTypesListCount;
} SetActiveWeatherNode <optimize=false>;

typedef struct
{
} QueryActiveTimeOfDayNode__InputsType <optimize=false>;

typedef struct
{
    QueryActiveTimeOfDayNode__InputsType inputs;
    ubyte timeOfDayType;
} QueryActiveTimeOfDayNode <optimize=false>;

typedef struct
{
} SetActiveTimeOfDayNode__InputsType <optimize=false>;

typedef struct
{
    SetActiveTimeOfDayNode__InputsType inputs;
    ubyte timeOfDayType;
} SetActiveTimeOfDayNode <optimize=false>;

typedef struct
{
    float intensity;
    float time;
} SetWeatherIntensityNode__InputsType <optimize=false>;

typedef struct
{
    SetWeatherIntensityNode__InputsType inputs;
    ubyte weatherType;
    byte setAllWeatherIntensities;
} SetWeatherIntensityNode <optimize=false>;

typedef struct
{
} GetWeatherIntensityNode__InputsType <optimize=false>;

typedef struct
{
    GetWeatherIntensityNode__InputsType inputs;
    ubyte weatherType;
} GetWeatherIntensityNode <optimize=false>;

typedef struct
{
} AGWwiseAmbient <optimize=false>;

typedef struct
{
    uquad placementID;
} AGSoundVocalNode__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementDefaultID;
    AGSoundVocalNode__InputsType inputs;
    int defaultInstanceType;
    VocalRef vocalRef;
    FSkip(3);
    int networkTransmissionType;
} AGSoundVocalNode <optimize=false>;

typedef struct
{
    uquad in1;
} SoundConversationNode__Inputs_One <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
} SoundConversationNode__Inputs_Two <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
} SoundConversationNode__Inputs_Three <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
} SoundConversationNode__Inputs_Four <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
} SoundConversationNode__Inputs_Five <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
    uquad in6;
} SoundConversationNode__Inputs_Six <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
    uquad in6;
    uquad in7;
} SoundConversationNode__Inputs_Seven <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
    uquad in6;
    uquad in7;
    uquad in8;
} SoundConversationNode__Inputs_Eight <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
    uquad in6;
    uquad in7;
    uquad in8;
    uquad in9;
} SoundConversationNode__Inputs_Nine <optimize=false>;

typedef struct
{
    uquad in1;
    uquad in2;
    uquad in3;
    uquad in4;
    uquad in5;
    uquad in6;
    uquad in7;
    uquad in8;
    uquad in9;
    uquad in10;
} SoundConversationNode__Inputs_Ten <optimize=false>;

typedef union
{
    SoundConversationNode__Inputs_One one;
    SoundConversationNode__Inputs_Two two;
    SoundConversationNode__Inputs_Three three;
    SoundConversationNode__Inputs_Four four;
    SoundConversationNode__Inputs_Five five;
    SoundConversationNode__Inputs_Six six;
    SoundConversationNode__Inputs_Seven seven;
    SoundConversationNode__Inputs_Eight eight;
    SoundConversationNode__Inputs_Nine nine;
    SoundConversationNode__Inputs_Ten ten;
} SoundConversationNode__InputsType;

typedef struct
{
    int actor;
    VocalRef vocalRef;
    FSkip(3);
    float startDelay;
} SoundConversationNode__Conversation_Line <optimize=false>;

typedef struct
{
    PlacementPath in1Default;
    PlacementPath in2Default;
    PlacementPath in3Default;
    PlacementPath in4Default;
    PlacementPath in5Default;
    PlacementPath in6Default;
    PlacementPath in7Default;
    PlacementPath in8Default;
    PlacementPath in9Default;
    PlacementPath in10Default;
    int arraySize;
    FSkip(4);
    SoundConversationNode__InputsType inputs;
    byte allowNPCInterrupt;
    byte investigateInterrupt;
    byte investigateVisualEnabled;
    byte highAlertOK;
    float investigateVisualRadiusMod;
    float investigateSoundRadius;
    unsigned int lineCount;
    Ref conversationLineArrayRef;
    if (CanSeekTo(conversationLineArrayRef))
    {
        SeekToRef(conversationLineArrayRef);
        SoundConversationNode__Conversation_Line conversationLineArray;
        ReturnFromRef();
    }
} SoundConversationNode <optimize=false>;

typedef struct
{
    unsigned int gameObjectMode;
    ushort unitID;
    FSkip(2);
    PlacementPath placementID;
    int inventoryType;
    ushort inventoryObject;
    FSkip(2);
    Ref actionGraphInputNameRef;
    if (CanSeekTo(actionGraphInputNameRef))
    {
        SeekToRef(actionGraphInputNameRef);
        string actionGraphInputName;
        ReturnFromRef();
    }
} WwiseSpatializedGameObject <optimize=false>;

typedef struct
{
    uquad placementID;
    int segmentID;
    float position[3];
} AGWwiseEvent__InputsType <optimize=false>;

typedef struct
{
    WwiseSpatializedGameObject spatializedGameObject;
    AGWwiseEvent__InputsType inputs;
    unsigned int eventID;
} AGWwiseEvent <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
} AGSoundMicrophoneNode__Input_Base <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float time;
    float value;
    float resetTime;
} AGSoundMicrophoneNode__Input_Pickup <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float resetTime;
} AGSoundMicrophoneNode__Input_Reset <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float time;
    float value;
    float resetTime;
} AGSoundMicrophoneNode__Input_Directional <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float time;
    float value;
    float resetTime;
} AGSoundMicrophoneNode__Input_DistanceAmp <optimize=false>;

typedef struct
{
    uquad playerPlacementID;
    float time;
    FSkip(4);
    uquad followPlacementID;
    float resetTime;
} AGSoundMicrophoneNode__Input_FollowInstance <optimize=false>;

typedef union
{
    AGSoundMicrophoneNode__Input_Base getPickup;
    AGSoundMicrophoneNode__Input_Pickup setPickup;
    AGSoundMicrophoneNode__Input_Reset resetPickup;
    AGSoundMicrophoneNode__Input_Base getDirectional;
    AGSoundMicrophoneNode__Input_Directional setDirectional;
    AGSoundMicrophoneNode__Input_Reset resetDirectional;
    AGSoundMicrophoneNode__Input_Base getDistanceAmp;
    AGSoundMicrophoneNode__Input_DistanceAmp setDistanceAmp;
    AGSoundMicrophoneNode__Input_Reset resetDistanceAmp;
    AGSoundMicrophoneNode__Input_Base getFollowInstance;
    AGSoundMicrophoneNode__Input_FollowInstance setFollowInstance;
    AGSoundMicrophoneNode__Input_Reset resetFollowInstance;
} AGSoundMicrophoneNode__InputsType;

typedef struct
{
    PlacementPath playerPlacementDefaultID;
    int type;
    int defaultInstanceType;
    AGSoundMicrophoneNode__InputsType inputs;
} AGSoundMicrophoneNode <optimize=false>;

typedef struct
{
    uquad placementID;
    float value;
} AGWwiseRTPC__InputsType <optimize=false>;

typedef struct
{
    WwiseSpatializedGameObject spatializedGameObject;
    AGWwiseRTPC__InputsType inputs;
    unsigned int name;
} AGWwiseRTPC <optimize=false>;

typedef struct
{
    uquad placementID;
} AGWwiseSkeletalComponentNode__InputsType <optimize=false>;

typedef struct
{
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
    Ref markerListRef;
    unsigned int markerListCount;
    if (CanSeekTo(markerListRef))
    {
        SeekToRef(markerListRef);
        unsigned int markerList[markerListCount];
        ReturnFromRef();
    }
    FSkip(4);
    Ref markerGroupListRef;
    unsigned int markerGroupListCount;
    if (CanSeekTo(markerGroupListRef))
    {
        SeekToRef(markerGroupListRef);
        unsigned int markerGroupList[markerGroupListCount];
        ReturnFromRef();
    }
} WwiseSkeletalMarkerListType <optimize=false>;

typedef struct
{
    AGWwiseSkeletalComponentNode__InputsType inputs;
    PlacementPath placementID;
    unsigned int skeletalMarker;
    FSkip(4);
    WwiseSkeletalMarkerListType skeletalMarkerList;
} AGWwiseSkeletalComponentNode <optimize=false>;

typedef struct
{
} AGWwiseSpeaker__InputsType <optimize=false>;

typedef struct
{
    PlacementPath placementID;
    FSkip(-32);
    AGWwiseSpeaker__InputsType inputs;
} AGWwiseSpeaker <optimize=false>;

typedef struct
{
} AGWwiseState__InputsType <optimize=false>;

typedef struct
{
    AGWwiseState__InputsType inputs;
    unsigned int stateGroup;
    unsigned int state;
} AGWwiseState <optimize=false>;

typedef struct
{
    uquad placementID;
} AGWwiseSwitch__InputsType <optimize=false>;

typedef struct
{
    WwiseSpatializedGameObject spatializedGameObject;
    AGWwiseSwitch__InputsType inputs;
    unsigned int switchGroup;
    unsigned int _switch;
} AGWwiseSwitch <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float value;
} AGWwisePortalObstruction__InputsType <optimize=false>;

typedef struct
{
    AGWwisePortalObstruction__InputsType inputs;
    PlacementPath placementDefault;
    float defaultObstructionValue;
} AGWwisePortalObstruction <optimize=false>;

typedef struct
{
    byte trigger;
    FSkip(7);
    uquad placementID;
    float value;
} AGWwisePortalOcclusion__InputsType <optimize=false>;

typedef struct
{
    AGWwisePortalOcclusion__InputsType inputs;
    PlacementPath placementDefault;
    float defaultOcclusionValue;
} AGWwisePortalOcclusion <optimize=false>;

typedef struct
{
    byte boolValue;
} NetData_Set__NetDataDataTypeBool <optimize=false>;

typedef struct
{
    int intValue;
} NetData_Set__NetDataDataTypeInt <optimize=false>;

typedef struct
{
    uquad placementValue;
} NetData_Set__NetDataDataTypePlacement <optimize=false>;

typedef struct
{
    unsigned int enumValue;
} NetData_Set__NetDataDataTypeEnum <optimize=false>;

typedef struct
{
    float floatValue;
} NetData_Set__NetDataDataTypeFloat <optimize=false>;

typedef struct
{
    float vector3Value[3];
} NetData_Set__NetDataDataTypeVector3 <optimize=false>;

typedef union
{
    NetData_Set__NetDataDataTypeBool typeBool;
    NetData_Set__NetDataDataTypeInt typeInt;
    NetData_Set__NetDataDataTypePlacement typePlacement;
    NetData_Set__NetDataDataTypeEnum typeEnum;
    NetData_Set__NetDataDataTypeFloat typeFloat;
    NetData_Set__NetDataDataTypeVector3 typeVector3;
} NetData_Set__InputsType;

typedef struct
{
    PlacementPath placementDefault;
    unsigned int netDataIndex;
    ubyte type;
    byte bSendData;
    FSkip(2);
    NetData_Set__InputsType inputs;
} NetData_Set <optimize=false>;

typedef struct
{
    byte invertEnumOutput;
} NetDataEmptyConfig <optimize=false>;

typedef struct
{
    byte invertEnumOutput;
} NetDataEnumConfig <optimize=false>;

typedef union
{
    NetDataEmptyConfig null;
    NetDataEmptyConfig typeBool;
    NetDataEmptyConfig typeInt;
    NetDataEmptyConfig typePlacement;
    NetDataEnumConfig typeEnum;
    NetDataEmptyConfig typeFloat;
    NetDataEmptyConfig typeVector3;
} NetDataConfigType;

typedef struct
{
    byte boolValue;
} NetData_OnChanged__NetDataDataTypeBool <optimize=false>;

typedef struct
{
    int intValue;
} NetData_OnChanged__NetDataDataTypeInt <optimize=false>;

typedef struct
{
    uquad placementValue;
} NetData_OnChanged__NetDataDataTypePlacement <optimize=false>;

typedef struct
{
    unsigned int value;
    unsigned int hash;
} NetData_OnChanged__GlobalEnumType <optimize=false>;

typedef struct
{
    NetData_OnChanged__GlobalEnumType value;
} NetData_OnChanged__GlobalEnumTypeItem <optimize=false>;

typedef struct
{
    int enumValue;
    FSkip(4);
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        NetData_OnChanged__GlobalEnumTypeItem outputList;
        ReturnFromRef();
    }
} NetData_OnChanged__NetDataDataTypeEnum <optimize=false>;

typedef struct
{
    float floatValue;
} NetData_OnChanged__NetDataDataTypeFloat <optimize=false>;

typedef struct
{
    float vector3Value[3];
} NetData_OnChanged__NetDataDataTypeVector3 <optimize=false>;

typedef union
{
    NetData_OnChanged__NetDataDataTypeBool typeBool;
    NetData_OnChanged__NetDataDataTypeInt typeInt;
    NetData_OnChanged__NetDataDataTypePlacement typePlacement;
    NetData_OnChanged__NetDataDataTypeEnum typeEnum;
    NetData_OnChanged__NetDataDataTypeFloat typeFloat;
    NetData_OnChanged__NetDataDataTypeVector3 typeVector3;
} NetData_OnChanged__OutputType;

typedef struct
{
    PlacementPath placementDefault;
    unsigned int netDataIndex;
    ubyte type;
    byte outputOnInit;
    FSkip(2);
    int dummy;
    NetDataConfigType config;
    FSkip(3);
    NetData_OnChanged__OutputType outputs;
    unsigned int helperEnumListcount;
} NetData_OnChanged <optimize=false>;

typedef struct
{
    byte boolValue;
} NetData_Get__NetDataDataTypeBool <optimize=false>;

typedef struct
{
    int intValue;
} NetData_Get__NetDataDataTypeInt <optimize=false>;

typedef struct
{
    uquad placementValue;
} NetData_Get__NetDataDataTypePlacement <optimize=false>;

typedef struct
{
    unsigned int value;
    unsigned int hash;
} NetData_Get__GlobalEnumType <optimize=false>;

typedef struct
{
    NetData_Get__GlobalEnumType value;
} NetData_Get__GlobalEnumTypeItem <optimize=false>;

typedef struct
{
    int enumValue;
    FSkip(4);
    Ref outputListRef;
    if (CanSeekTo(outputListRef))
    {
        SeekToRef(outputListRef);
        NetData_Get__GlobalEnumTypeItem outputList;
        ReturnFromRef();
    }
} NetData_Get__NetDataDataTypeEnum <optimize=false>;

typedef struct
{
    float floatValue;
} NetData_Get__NetDataDataTypeFloat <optimize=false>;

typedef struct
{
    float vector3Value[3];
} NetData_Get__NetDataDataTypeVector3 <optimize=false>;

typedef union
{
    NetData_Get__NetDataDataTypeBool typeBool;
    NetData_Get__NetDataDataTypeInt typeInt;
    NetData_Get__NetDataDataTypePlacement typePlacement;
    NetData_Get__NetDataDataTypeEnum typeEnum;
    NetData_Get__NetDataDataTypeFloat typeFloat;
    NetData_Get__NetDataDataTypeVector3 typeVector3;
} NetData_Get__OutputType;

typedef struct
{
    PlacementPath placementDefault;
    unsigned int netDataIndex;
    ubyte type;
    NetDataConfigType config;
    FSkip(2);
    NetData_Get__OutputType outputs;
    unsigned int helperEnumListcount;
} NetData_Get <optimize=false>;

typedef struct
{
    PlacementPath placement;
} Render_OverrideDecalVolume <optimize=false>;

typedef struct
{
    PlacementPath placement;
} Render_OverrideWetnessVolume <optimize=false>;

