string GetStateControlStatePropertyName(int property)
{
    switch (property)
    {
        case 0x0: return "Unknown";
        case 0x1: return "StateControl_StateTag";
        case 0x2: return "Transition_Immediate";
        case 0x3: return "Transition_RequiredByAnimEnd";
        case 0x4: return "Transition_QueuedTransitionStateTimer";
        case 0x5: return "Anim_SetFlair";
        case 0x6: return "Anim_DisableRootTranslation";
        case 0x7: return "Anim_BlendPerFrame";
        case 0x8: return "Anim_CriticalSection";
        case 0x9: return "Anim_WallHugShimmyOverTurnBlend";
        case 0xA: return "Anim_SetHostedData";
        case 0xB: return "Anim_DualCombatProcessorAllowed";
        case 0xC: return "Anim_RunLeanAngleMax";
        case 0xD: return "Anim_RunLeanScale";
        case 0xE: return "Anim_RunLeanRate";
        case 0xF: return "Anim_TorsoTwistAngleMax";
        case 0x10: return "Anim_TorsoTwistScale";
        case 0x11: return "Anim_TorsoTwistRate";
        case 0x12: return "Anim_TorsoTwistMode";
        case 0x13: return "Anim_TorsoAllowed";
        case 0x14: return "Anim_SetAnimSpeed";
        case 0x15: return "Anim_SetAnimFrameCount";
        case 0x16: return "Anim_WadeBlendLevel";
        case 0x17: return "Anim_SetBlendSpeedValue";
        case 0x18: return "Anim_SetStateControlBlendValue";
        case 0x19: return "Anim_AimBlendDisable";
        case 0x1A: return "Anim_LeanHorzMax";
        case 0x1B: return "Anim_LeanHorzMaxDelta";
        case 0x1C: return "Anim_SetAnimLength";
        case 0x1D: return "Anim_SetSlewAdjustRate";
        case 0x1E: return "Anim_SetSlewRadius";
        case 0x1F: return "Anim_SetSlewExaggeration";
        case 0x20: return "Anim_SetSlewMaxSpeed";
        case 0x21: return "Anim_RampDualCombatTime";
        case 0x22: return "Anim_SwimSubmergedCombat";
        case 0x23: return "Anim_LeanVertMax";
        case 0x24: return "Anim_LeanVertMaxDelta";
        case 0x25: return "Anim_VelocityMagnitudeToImpart";
        case 0x26: return "Anim_IgnoreBlendLimitsOnEntry";
        case 0x27: return "Anim_SmoothRideAllowed";
        case 0x28: return "Anim_LookAtTwistAngleMax";
        case 0x29: return "Anim_LookAtUpAngleMax";
        case 0x2A: return "Anim_LookAtDownAngleMax";
        case 0x2B: return "Anim_ResetOrientationFrames";
        case 0x2C: return "Anim_SwimSurfaceTiltWithWaves";
        case 0x2D: return "Anim_ZMotionAnimDriven";
        case 0x2E: return "Anim_TR9PrototypeSynchronize";
        case 0x2F: return "Anim_DoubleJointRotation";
        case 0x30: return "AnimTarget_YOffset";
        case 0x31: return "AnimTarget_ZOffset";
        case 0x32: return "AnimTarget_Time";
        case 0x33: return "AnimTarget_Time_Minimum";
        case 0x34: return "AnimTarget_ZRotOffset";
        case 0x35: return "AnimTarget_NoRotation";
        case 0x36: return "AnimGraph_Allowed";
        case 0x37: return "AnimGraph_TriggerEvent";
        case 0x38: return "AnimGraph_Goal_Moveset";
        case 0x39: return "AnimGraph_Goal_Cluster";
        case 0x3A: return "AnimGraph_Goal_State";
        case 0x3B: return "AnimGraph_Goal_Overlay";
        case 0x3C: return "AnimGraph_Goal_Mainhand";
        case 0x3D: return "AnimGraph_Goal_Offhand";
        case 0x3E: return "AnimGraph_Pending_Moveset";
        case 0x3F: return "AnimGraph_Pending_Cluster";
        case 0x40: return "AnimGraph_Pending_State";
        case 0x41: return "AnimGraph_Pending_Interact";
        case 0x42: return "Npc_AnimalAlarm_Enabled";
        case 0x43: return "Assert_Message";
        case 0x44: return "Crafting_Recipe";
        case 0x45: return "Crafting_Allowed";
        case 0x46: return "Crafting_Active";
        case 0x47: return "Crafting_MobileHerbAllowed";
        case 0x48: return "Detection_LineProbeAngleFromFacing";
        case 0x49: return "Detection_LineProbeAngleFromVertical";
        case 0x4A: return "Detection_LineProbeLength";
        case 0x4B: return "Detection_LineProbeProjectOnAttachedMarkup";
        case 0x4C: return "Detection_LineProbeVerticalOffset";
        case 0x4D: return "Detection_LineProbeArrowThrow";
        case 0x4E: return "Foot_UnlockLeft";
        case 0x4F: return "Foot_UnlockRight";
        case 0x50: return "Foot_SetSupport";
        case 0x51: return "Foot_LockingAllowed";
        case 0x52: return "Hand_UnlockLeft";
        case 0x53: return "Hand_UnlockRight";
        case 0x54: return "Hand_LockingAllowed";
        case 0x55: return "Health_DrainHealthRateSec";
        case 0x56: return "Health_DrainHealthPoints";
        case 0x57: return "Health_DisableHealth";
        case 0x58: return "Health_Incapacitated";
        case 0x59: return "Health_BreathPercent";
        case 0x5A: return "LimbLock_RestoreDefaults";
        case 0x5B: return "LimbLock_Enable";
        case 0x5C: return "LimbLock_Disable";
        case 0x5D: return "LimbLock_Parameter";
        case 0x5E: return "LimbLock_SpeedLimitGroupID";
        case 0x5F: return "FootPlant_ZOffsetLimit";
        case 0x60: return "Check_RunTargetsDelayFrames";
        case 0x61: return "Jump_Velocity";
        case 0x62: return "Jump_AirSteering";
        case 0x63: return "Jump_AirSteering_AllowTurn";
        case 0x64: return "Jump_EnableMarkupMagnetism";
        case 0x65: return "Paraglide_TuneData";
        case 0x66: return "Interact_SetInteractMode";
        case 0x67: return "Interact_Profile";
        case 0x68: return "Interact_InstReadyForContextKill";
        case 0x69: return "Interact_AllowMovingInteract";
        case 0x6A: return "Interact_IsInteracting";
        case 0x6B: return "Interact_ForceInteract";
        case 0x6C: return "Markup_UseMarkupBone";
        case 0x6D: return "Markup_UseMarkupBoneAfterNumFrames";
        case 0x6E: return "Markup_MarkupBoneAttachTarget";
        case 0x6F: return "Markup_MarkupBoneAttachTargetUseRotation";
        case 0x70: return "Markup_UseMarkupBoneRopeOffsets";
        case 0x71: return "MarkUp_PreCheckBracedStatusAttached";
        case 0x72: return "MarkUp_PreCheckBracedStatusJumpTarget";
        case 0x73: return "Markup_ResetJumpAnimOffsets";
        case 0x74: return "MarkUp_SlopeAngle_Shallow";
        case 0x75: return "MarkUp_SlopeAngle_Medium";
        case 0x76: return "MarkUp_SlopeAngle_Steep";
        case 0x77: return "Markup_SlopeAngle_Multiplier";
        case 0x78: return "MarkUp_PreCheckClearanceAttached";
        case 0x79: return "MarkUp_PreCheckClearanceJumpTarget";
        case 0x7A: return "MarkUp_GroundAheadProbeSpacing";
        case 0x7B: return "MarkUpAttach_ClearJumpTarget";
        case 0x7C: return "MarkUpAttach_JumpTarget";
        case 0x7D: return "MarkUpAttach_EdgeDetectTarget";
        case 0x7E: return "MarkUpAttach_SetAnimTarget";
        case 0x7F: return "MarkUpAttach_UpdateAnimTarget";
        case 0x80: return "MarkUpAttach_UpdatePos";
        case 0x81: return "MarkUpAttach_UpdateRot";
        case 0x82: return "MarkUpAttach_UpdateStatus";
        case 0x83: return "MarkUpAttach_UpdateTarget";
        case 0x84: return "MarkUpAttach_UpdateJumpTargetPos";
        case 0x85: return "MarkUpAttach_UpdateWaitForInterp";
        case 0x86: return "MarkUpAttach_LedgeToCornerPhase";
        case 0x87: return "MarkUpAttach_SplineTMin";
        case 0x88: return "MarkUpAttach_SplineTMax";
        case 0x89: return "MarkUpAttach_UpdateSplineT";
        case 0x8A: return "MarkUpAttach_OffsetAlongAttachDir";
        case 0x8B: return "MarkUpAttach_SetAnimTar_Reattach";
        case 0x8C: return "MarkUpAttach_UseMarkupSpaceForOffset";
        case 0x8D: return "MarkUpAttach_IgnoreMarkupZ";
        case 0x8E: return "MarkUpAttach_XOffset";
        case 0x8F: return "MarkUpAttach_YOffset";
        case 0x90: return "MarkUpAttach_ZOffset";
        case 0x91: return "MarkUpAttach_SetBadAttach";
        case 0x92: return "MarkupAttach_DelaySavingGrabTime";
        case 0x93: return "MarkUpAttach_UpdateAttachedNormal";
        case 0x94: return "MarkUpAttach_TurnToZRotOffset";
        case 0x95: return "MarkUpAttach_UpdateAttachedMarkupOffset";
        case 0x96: return "MarkUpAttach_FallTargeting";
        case 0x97: return "MarkUpAttach_WallHugTNodeZBoost";
        case 0x98: return "MarkUpAttach_UpdateRotVerticalMarkup";
        case 0x99: return "MarkUpAttach_AttachPerpendicular";
        case 0x9A: return "MarkUpAttach_AttachParallel";
        case 0x9B: return "MarkUpAttach_SetBlendAndMirrorInAnimTarget";
        case 0x9C: return "MarkUpAttach_SetUpForwardBlendInAnimTarget";
        case 0x9D: return "MarkUpAttach_UpdateSplineTFromProxy";
        case 0x9E: return "MarkUpAttach_UpdateSplineTFromMarkupBone";
        case 0x9F: return "MarkUpAttach_UpdateSplineTFromMarkupBoneAfterNumFrames";
        case 0xA0: return "MarkUpAttach_UpdateSplineTFromMarkupBoneInstant";
        case 0xA1: return "MarkUpAttach_UpdatePostPhysics";
        case 0xA2: return "MarkUpAttach_DefaultAttachTime";
        case 0xA3: return "MarkUpAttach_WallCrawlFromRope";
        case 0xA4: return "MarkUpAttach_WallCrawlInclinedCorrection";
        case 0xA5: return "MarkUpAttach_CacheWallCrawlDetection";
        case 0xA6: return "MarkUpAttach_IgnoreMarkupLimits";
        case 0xA7: return "MarkUpAttach_IgnoreMarkupLimits_GroundInFrontAtMarkupEnd";
        case 0xA8: return "MarkUpAttach_DoNotSwitchMarkupSegments";
        case 0xA9: return "MarkUpAttach_MaxMovementPerSecOnAttach";
        case 0xAA: return "MarkUpAttach_IdlingAtEnd";
        case 0xAB: return "MarkUp_DetachAngle";
        case 0xAC: return "MarkUp_SetAnimTarget_Detach";
        case 0xAD: return "MarkUp_GroundAheadProbeNum";
        case 0xAE: return "MarkupDetection_Block";
        case 0xAF: return "MarkupDetection_Mode";
        case 0xB0: return "MarkupDetection_Mode_Potential";
        case 0xB1: return "MarkupDetection_Mode_Cover";
        case 0xB2: return "MarkupDetection_Mode_PotentialCover";
        case 0xB3: return "MarkupDetection_Mode_Proximity";
        case 0xB4: return "MarkupDetection_Mode_Proximity_Forward";
        case 0xB5: return "MarkupDetection_Mode_Proximity_Forward_Threshold";
        case 0xB6: return "MarkupDetection_Mode_Rescue";
        case 0xB7: return "MarkupDetection_Mode_Grapple";
        case 0xB8: return "MarkupDetection_Mode_Touch";
        case 0xB9: return "MarkupDetection_DelayForFirstXFramesInState";
        case 0xBA: return "MarkupDetection_DelayForFirstXFramesInAir";
        case 0xBB: return "MarkupDetection_Frequency";
        case 0xBC: return "MarkupDetection_Frequency_Potential";
        case 0xBD: return "MarkupDetection_Frequency_Grapple";
        case 0xBE: return "MarkupDetection_Frequency_Cover";
        case 0xBF: return "MarkupDetection_Frequency_Touch";
        case 0xC0: return "MarkupDetection_CoverDetectionDistance";
        case 0xC1: return "MarkupDetection_CoverDetectionMovementSlop";
        case 0xC2: return "MarkupDetection_ProximityCheckCanNullOutJumpTarget";
        case 0xC3: return "MarkUpControls_Type";
        case 0xC4: return "MarkUp_CurrentPrimType";
        case 0xC5: return "MarkUp_StartLowCover";
        case 0xC6: return "Markup_RequestSavingGrab";
        case 0xC7: return "Markup_AllowRandomSavingGrab";
        case 0xC8: return "Markup_SavingGrabPressesPerSecond";
        case 0xC9: return "Markup_SavingGrabPromptEvent";
        case 0xCA: return "MarkUp_LookaheadDirection";
        case 0xCB: return "Movement_AngleFrontLeft";
        case 0xCC: return "Movement_AngleLeftBack";
        case 0xCD: return "Movement_AngleBackRight";
        case 0xCE: return "Movement_AngleRightFront";
        case 0xCF: return "Movement_AngleHorizUp";
        case 0xD0: return "Movement_AngleHorizDown";
        case 0xD1: return "Movement_TurnAngleGap";
        case 0xD2: return "Movement_UseAnglesFromWeapon";
        case 0xD3: return "Movement_ExplicitVertDirections";
        case 0xD4: return "Movement_OrientationInputAction";
        case 0xD5: return "Movement_SteeringInputAction";
        case 0xD6: return "Movement_SteeringAngleLimitingMotion";
        case 0xD7: return "Movement_SteeringAnglePreventingMotion";
        case 0xD8: return "Movement_SteeringAngleLimitingOrPreventingMotionInAttachedMarkupSpace";
        case 0xD9: return "Movement_SteeringAngleCountingAsChangedDir";
        case 0xDA: return "Movement_Steering_UseOldDir_OnIdle";
        case 0xDB: return "Movement_Acceleration";
        case 0xDC: return "Movement_Deceleration";
        case 0xDD: return "Movement_AccelDelayFrames";
        case 0xDE: return "Movement_DecelDelayFrames";
        case 0xDF: return "Movement_SpeedMin";
        case 0xE0: return "Movement_SpeedMed";
        case 0xE1: return "Movement_SpeedMax";
        case 0xE2: return "Movement_SpeedMax_Lateral";
        case 0xE3: return "Movement_Acceleration_Lateral";
        case 0xE4: return "Movement_Deceleration_Lateral";
        case 0xE5: return "Movement_RespectScriptedSpeedMult";
        case 0xE6: return "Movement_AccelerationOverrideSteeringTurnRate";
        case 0xE7: return "Movement_Submerge_SpeedMax";
        case 0xE8: return "Movement_Submerge_Acceleration";
        case 0xE9: return "Movement_Submerge_Deceleration";
        case 0xEA: return "Movement_Resurface_SpeedMax";
        case 0xEB: return "Movement_Resurface_Acceleration";
        case 0xEC: return "Movement_Resurface_Deceleration";
        case 0xED: return "Movement_AttachFrames";
        case 0xEE: return "Movement_SpeedSlowMin";
        case 0xEF: return "Movement_SpeedSlowMax";
        case 0xF0: return "Movement_SpeedMediumMin";
        case 0xF1: return "Movement_SpeedMediumMax";
        case 0xF2: return "Movement_SpeedFastMin";
        case 0xF3: return "Movement_SpeedFastMax";
        case 0xF4: return "Movement_SpeedSprintMin";
        case 0xF5: return "Movement_SpeedSprintMax";
        case 0xF6: return "Movement_SpeedGoalHysteresis";
        case 0xF7: return "Movement_SpeedZone";
        case 0xF8: return "Movement_SpeedZoneSlow";
        case 0xF9: return "Movement_SpeedZoneMedium";
        case 0xFA: return "Movement_SpeedZoneFast";
        case 0xFB: return "Movement_SpeedZoneSlowGap";
        case 0xFC: return "Movement_SpeedZoneMedGap";
        case 0xFD: return "Movement_SpeedZoneFastGap";
        case 0xFE: return "Movement_SpeedRestrictedToMarkupDirection";
        case 0xFF: return "Movement_SafetyLevel";
        case 0x100: return "Movement_ControlLock";
        case 0x101: return "Movement_CacheDirection";
        case 0x102: return "Movement_Vehicle_SetAnimMirror";
        case 0x103: return "Movement_Vehicle_Engage";
        case 0x104: return "Movement_DistanceExtra";
        case 0x105: return "Movement_HustleActive";
        case 0x106: return "Movement_AllowRollScrambleAndEvade";
        case 0x107: return "Movement_JumpMode";
        case 0x108: return "Movement_Swimming";
        case 0x109: return "Movement_Jump_Takeoff_Dir";
        case 0x10A: return "Movement_Swimming_Speed_Can_Set_By_Button";
        case 0x10B: return "Movement_JumpMode_Potential";
        case 0x10C: return "Movement_Jump_Takeoff_Dir_Potential";
        case 0x10D: return "Movement_Jump_Takeoff_Vel_Potential";
        case 0x10E: return "Movement_JumpMode_Grapple";
        case 0x10F: return "Movement_Jump_Takeoff_Dir_Grapple";
        case 0x110: return "Movement_Jump_Takeoff_Vel_Grapple";
        case 0x111: return "Movement_Swimming_Combat";
        case 0x112: return "Movement_Swimming_BoostAlongCachedFacing";
        case 0x113: return "Movement_Swimming_Stealthy";
        case 0x114: return "Movement_NoSteering";
        case 0x115: return "Movement_SteeringZone";
        case 0x116: return "Movement_Swimming_SubmergedAllowedDistToTargPlane";
        case 0x117: return "Movement_Swimming_SubmergedHalfTargHeight";
        case 0x118: return "Movement_Swimming_180TurnVelocityDecay";
        case 0x119: return "Movement_Swimming_WallStopAngle";
        case 0x11A: return "Movement_WallStop_StickAngle";
        case 0x11B: return "Movement_WallStop_CloseCover_StickAngle";
        case 0x11C: return "Movement_WallStop_NPC_StickAngle";
        case 0x11D: return "Movement_EdgeDeflectComputesWallStop";
        case 0x11E: return "Movement_WallStop_IgnoreInputs";
        case 0x11F: return "Movement_LookAheadDist";
        case 0x120: return "Movement_LookAheadMaxZRot";
        case 0x121: return "Movement_GroundCheckDist";
        case 0x122: return "Movement_GroundCheckHeight";
        case 0x123: return "Movement_SetFallZ";
        case 0x124: return "Movement_CheckEdges";
        case 0x125: return "Movement_CheckEdges_DropDist";
        case 0x126: return "Movement_CheckEdges_PushMargin";
        case 0x127: return "Movement_CheckEdges_PushRate";
        case 0x128: return "Movement_CheckEdges_StopAtSafePoint";
        case 0x129: return "Movement_CheckEdges_IgnoreJumpTarget";
        case 0x12A: return "Movement_CheckEdges_RedirectVel";
        case 0x12B: return "Movement_WadeBlendLevel";
        case 0x12C: return "Movement_FallMaxZSpeed";
        case 0x12D: return "Movement_FallMaxXYSpeed";
        case 0x12E: return "Movement_FallMomentumMult";
        case 0x12F: return "Movement_SlopeLandingMomentumMult_Uphill";
        case 0x130: return "Movement_SlopeLandingMomentumMult_Downhill";
        case 0x131: return "Movement_SlopeLandingMomentumMult_Lateral";
        case 0x132: return "Movement_SetTranslationSource";
        case 0x133: return "Movement_SetRotationSource";
        case 0x134: return "Network_PositionContinuityBreak";
        case 0x135: return "Npc_RequestsAllowed";
        case 0x136: return "Npc_Mover";
        case 0x137: return "Npc_FollowGround";
        case 0x138: return "Npc_RotateToTarget_FramesInStateStart";
        case 0x139: return "Npc_RotateToTarget_FramesInStateStop";
        case 0x13A: return "Npc_RotateToTarget_NearestFrontBack";
        case 0x13B: return "Npc_RotateToTarget_NearestFrontBackLR";
        case 0x13C: return "Npc_RotateToTarget_PredictMovementFrames";
        case 0x13D: return "Npc_StunnedKnees";
        case 0x13E: return "Npc_StunnedProne";
        case 0x13F: return "Npc_StunnedFromDeathFromAbove";
        case 0x140: return "Npc_Stumbled";
        case 0x141: return "Npc_Stunned_IgnoreAttackerTraitCheck";
        case 0x142: return "Npc_Stunned_IgnoreMeleeTargetCheck";
        case 0x143: return "Npc_Finishable";
        case 0x144: return "Npc_DoNotConsiderForFinishableSenseRule";
        case 0x145: return "Npc_DeathFromAboveable";
        case 0x146: return "Npc_SeizeDeny";
        case 0x147: return "Npc_Action";
        case 0x148: return "Npc_ActionStatus";
        case 0x149: return "Npc_RequestStatusBoundToAnimGoal";
        case 0x14A: return "Npc_ScopedInputAction";
        case 0x14B: return "Npc_AbortRequests";
        case 0x14C: return "Npc_AbortActionPlan";
        case 0x14D: return "Npc_EnableBallistics";
        case 0x14E: return "Npc_EnableFallingDamage";
        case 0x14F: return "Npc_SendEventRadius";
        case 0x150: return "Npc_SendEvent_NoSendToMeleeTarget";
        case 0x151: return "Npc_AimEvade_AimEvadeChance";
        case 0x152: return "Npc_ReadyToPickup";
        case 0x153: return "Npc_ReadyToThrow";
        case 0x154: return "Npc_DropHeldObject";
        case 0x155: return "Npc_MarkupAttachTime";
        case 0x156: return "Npc_ReactiveDodgeParam";
        case 0x157: return "Npc_MeleeTargetDir_Front_MaxAngle";
        case 0x158: return "Npc_Jumping";
        case 0x159: return "Npc_JumpLaunchAnimPlaying";
        case 0x15A: return "Npc_PrepareForFalling_ThrowEnergy";
        case 0x15B: return "Npc_Attached";
        case 0x15C: return "Npc_AllowNavHelperProcessing";
        case 0x15D: return "Npc_CoverInvalidated";
        case 0x15E: return "Npc_DropWeaponClamp_CMperSec";
        case 0x15F: return "Npc_DropWeapon_DelayFrames";
        case 0x160: return "Npc_Death_DelayFrames";
        case 0x161: return "Npc_OverrideTurnRate";
        case 0x162: return "Npc_OverrideTurnDirWithDesiredDir";
        case 0x163: return "Npc_ClampToPlannerMesh";
        case 0x164: return "Npc_ClampToPlannerMeshCoverOverride";
        case 0x165: return "Npc_UseClientMotion";
        case 0x166: return "Npc_SeizeDefend";
        case 0x167: return "Npc_Dying";
        case 0x168: return "Npc_NoPlayerProxyHits";
        case 0x169: return "Npc_ProgramaticMovementOnly";
        case 0x16A: return "Npc_SideStepBlocked";
        case 0x16B: return "Npc_SuppressSensoryAwareness";
        case 0x16C: return "Npc_SuppressSenseEvents";
        case 0x16D: return "Npc_UseStealthDeathEvent";
        case 0x16E: return "Npc_IgnoreSensedInstances";
        case 0x16F: return "Npc_InDeathFromAbove";
        case 0x170: return "Npc_InFinisherDeathState";
        case 0x171: return "Npc_InHitReact";
        case 0x172: return "Npc_IsPanicking";
        case 0x173: return "Npc_CorpseStatus";
        case 0x174: return "Npc_InhibitSenses";
        case 0x175: return "Npc_CanOrientToSurface";
        case 0x176: return "Npc_ProjectMoverVelocityOnWorldTurnOrientation";
        case 0x177: return "Npc_IsPerformingFullbodyReaction";
        case 0x178: return "Threat_Amount_NpcWhenPanicked";
        case 0x179: return "Threat_Amount";
        case 0x17A: return "Threat_Analog";
        case 0x17B: return "Threat_CoverMult";
        case 0x17C: return "Threat_EyeContactMult";
        case 0x17D: return "Threat_RadiusDiminishing";
        case 0x17E: return "Threat_RadiusFull";
        case 0x17F: return "Threat_RepeatFrames";
        case 0x180: return "Threat_Reduction";
        case 0x181: return "Threat_SensitivityMult";
        case 0x182: return "Threat_HeadTracking";
        case 0x183: return "Turn_SteeringMode";
        case 0x184: return "Turn_SteeringCurve";
        case 0x185: return "Turn_SteeringResetContinuity";
        case 0x186: return "Turn_SteeringRate";
        case 0x187: return "Turn_SteeringRateZeroMeansInstant";
        case 0x188: return "Turn_SteeringDirection";
        case 0x189: return "Turn_SteeringTimeLimit";
        case 0x18A: return "Turn_SteeringRateAccel";
        case 0x18B: return "Turn_SteeringRateDecel";
        case 0x18C: return "Turn_SteeringRateAccelDelayFrames";
        case 0x18D: return "Turn_SteeringSetDisableDuration";
        case 0x18E: return "Turn_During_Transition";
        case 0x18F: return "Turn_During_Animation";
        case 0x190: return "Turn_ResetForward";
        case 0x191: return "Turn_Offset";
        case 0x192: return "Turn_FacingOffset";
        case 0x193: return "Turn_UpdateGoal";
        case 0x194: return "Turn_UpdateGoal_BeforeNumFrames";
        case 0x195: return "Turn_UpdateGoal_AfterNumFrames";
        case 0x196: return "Turn_UpdateGoal_UpToNumDegrees";
        case 0x197: return "Turn_UpdateGoal_WhenPastNumDegrees";
        case 0x198: return "Turn_UpdateGoal_WhenPastNumDegrees_NoEntryRotate";
        case 0x199: return "Turn_UpdateGoal_WhenPastNumDegrees_DoClamp";
        case 0x19A: return "Turn_ResetVertical";
        case 0x19B: return "Turn_OrientUpwards";
        case 0x19C: return "Turn_FallFacesAwayFromCamera";
        case 0x19D: return "Turn_RotationExpectedFromAnimation";
        case 0x19E: return "Turn_RespectScriptedSpeedMult";
        case 0x19F: return "Turn_ScriptedSpeedMultModifier";
        case 0x1A0: return "Turn_OrientationLogicalMode";
        case 0x1A1: return "Turn_OrientationLogicalSpeedMax";
        case 0x1A2: return "Turn_OrientationLogicalInterpolate";
        case 0x1A3: return "Turn_WiggleThresholdFrames";
        case 0x1A4: return "Turn_WiggleToleranceAngle";
        case 0x1A5: return "Turn_WiggleAllowanceCount";
        case 0x1A6: return "Turn_WiggleSmoothingFraction";
        case 0x1A7: return "Turn_Turn_TargetDirSubmitsDirection";
        case 0x1A8: return "Turn_CameraDirWiggleRoom";
        case 0x1A9: return "Turn_CameraDirOffset";
        case 0x1AA: return "Turn_TurnToCameraDirRate";
        case 0x1AB: return "Turn_TurnType";
        case 0x1AC: return "Turn_DampFactorResetVertical";
        case 0x1AD: return "GPS_ShowOccludedInstances";
        case 0x1AE: return "GPS_SetScanRange";
        case 0x1AF: return "VisionMode_HighlightRadius";
        case 0x1B0: return "VisionMode_SetAllowed";
        case 0x1B1: return "VisionMode_AutoPingAllowed";
        case 0x1B2: return "VisionMode_TurnOff_IfEnabled";
        case 0x1B3: return "VisionMode_RemainOn";
        case 0x1B4: return "Grapple_JumpRequested";
        case 0x1B5: return "Grapple_FireRequested";
        case 0x1B6: return "Grapple_SetAllowed";
        case 0x1B7: return "Grapple_SetAscendDescendAllowed";
        case 0x1B8: return "Grapple_SetSwingAllowed";
        case 0x1B9: return "Grapple_SetRetractInterruptAllowed";
        case 0x1BA: return "Grapple_SetImmediateFireAllowed";
        case 0x1BB: return "Grapple_SetDisableVerticalInput";
        case 0x1BC: return "Grapple_JumpOffMode";
        case 0x1BD: return "Grapple_ContactDataType";
        case 0x1BE: return "Grapple_OrientTowardVelocity";
        case 0x1BF: return "Grapple_SwingForwardForceLocked";
        case 0x1C0: return "Grapple_VelocityLocked";
        case 0x1C1: return "Grapple_IgnoreGravity";
        case 0x1C2: return "Grapple_IgnoreDetachOnContact";
        case 0x1C3: return "Grapple_EnableAimDraw";
        case 0x1C4: return "Grapple_SetAttachToMeAllowed";
        case 0x1C5: return "Grapple_GrappleGun_Allowed";
        case 0x1C6: return "GrappleAxe_Allowed";
        case 0x1C7: return "GrappleAxeSwing_Attached";
        case 0x1C8: return "GrappleAxeClimb_Attached";
        case 0x1C9: return "GrappleAxe_ThrowDirection";
        case 0x1CA: return "GrappleAxe_ThrowVertical";
        case 0x1CB: return "GrappleAxe_RopeTransitionLength";
        case 0x1CC: return "GrappleAxe_NoScrape";
        case 0x1CD: return "GrappleAxe_ClimbDirectionUpwards";
        case 0x1CE: return "GrappleAxe_ClimbDirectionDownwards";
        case 0x1CF: return "GrappleAxe_AutoClimb_ClimbDownQuick";
        case 0x1D0: return "GrappleAxe_AutoClimb_ClimbUpQuick";
        case 0x1D1: return "GrappleAxe_ClimbSettle_DesiredLength";
        case 0x1D2: return "GrappleAxe_ClimbUpStopOnTopWallDetection";
        case 0x1D3: return "Water_Submerged";
        case 0x1D4: return "Water_HoldBreath";
        case 0x1D5: return "Water_PauseBreathProcess";
        case 0x1D6: return "Water_PitchAdjustment";
        case 0x1D7: return "Water_IgnoreCurrent";
        case 0x1D8: return "Water_InTransitionSwimSubmergedToSurface";
        case 0x1D9: return "Water_InTransitionSwimSurfaceToSubmerged";
        case 0x1DA: return "UI_HoldHealthBarOn";
        case 0x1DB: return "UI_Permitted";
        case 0x1DC: return "UI_PermitObjectives";
        case 0x1DD: return "UI_PermitTutorials";
        case 0x1DE: return "UI_StatusMenuUp";
        case 0x1DF: return "UI_StatusMenuState";
        case 0x1E0: return "InScriptedInteractiveSequence";
        case 0x1E1: return "ControlMode";
        case 0x1E2: return "CheckWaterLevel";
        case 0x1E3: return "CheckSnow";
        case 0x1E4: return "Gameplay_CanPickup";
        case 0x1E5: return "Gameplay_TimeLimit";
        case 0x1E6: return "Gameplay_ModeModifier";
        case 0x1E7: return "Gameplay_SetMoveSet";
        case 0x1E8: return "Gameplay_SetStance";
        case 0x1E9: return "Gameplay_PlayerBreathDeltaMult";
        case 0x1EA: return "Gameplay_DodgeTimeLimit";
        case 0x1EB: return "Gameplay_Notification";
        case 0x1EC: return "Gameplay_IncrementNumWallJumps";
        case 0x1ED: return "Gameplay_AllowWallJump";
        case 0x1EE: return "Gameplay_AllowWallJumpSideAttach";
        case 0x1EF: return "Gameplay_BBeamHandsOverlayAllowed";
        case 0x1F0: return "Gameplay_TranslationSpeed";
        case 0x1F1: return "Gameplay_TimeDilation";
        case 0x1F2: return "Gameplay_TimeDilationNoPlayer";
        case 0x1F3: return "Gameplay_MortalWoundAffectsMechanics";
        case 0x1F4: return "Gameplay_RescueAllowed";
        case 0x1F5: return "Gameplay_SprintAllowed";
        case 0x1F6: return "Gameplay_AnticipationAllowed";
        case 0x1F7: return "Gameplay_InStrongWaterCurrent";
        case 0x1F8: return "Gameplay_InSprint";
        case 0x1F9: return "Gameplay_InAnIdleState";
        case 0x1FA: return "Gameplay_MarkMantleOrHurdleMountTime";
        case 0x1FB: return "Gameplay_MarkMantleOrHurdleCancelTime";
        case 0x1FC: return "Gameplay_StaffActive";
        case 0x1FD: return "Gameplay_MagicRollyBallAllowed";
        case 0x1FE: return "Gameplay_AllowSwanDive";
        case 0x1FF: return "Gameplay_AllowCannonball";
        case 0x200: return "Gameplay_AllowMarkupArrowAdd";
        case 0x201: return "Gameplay_Paraglide";
        case 0x202: return "Gameplay_ParaglidePossible";
        case 0x203: return "Gameplay_DeathToReloadTime";
        case 0x204: return "Input_SincePressedTimeLimit";
        case 0x205: return "Input_SinceReleasedTimeLimit";
        case 0x206: return "Input_SincePressedTimeLimit2";
        case 0x207: return "Input_SinceReleasedTimeLimit2";
        case 0x208: return "Input_UnlockAngle";
        case 0x209: return "Input_AnalogReleaseRateLimit";
        case 0x20A: return "Input_AnalogPressRateLimit";
        case 0x20B: return "Input_AnalogAmountLessThanLimit";
        case 0x20C: return "Input_AnalogAmountMoreThanLimit";
        case 0x20D: return "Input_AnalogMaxStickVelocity";
        case 0x20E: return "Input_EnableActionType";
        case 0x20F: return "Combat_AccuracyMax";
        case 0x210: return "Combat_AccuracyMin";
        case 0x211: return "Combat_AccuracyPerPosition";
        case 0x212: return "Combat_AccuracyPerRotation";
        case 0x213: return "Combat_AccuracyRecoveryCooldown";
        case 0x214: return "Combat_AccuracyRecoveryRate";
        case 0x215: return "Combat_LockOnAllowed";
        case 0x216: return "Combat_SnapTargetingAllowed";
        case 0x217: return "Combat_SnapTargetingWithoutSnapWeapon";
        case 0x218: return "Combat_DisableSnapTargetingSCActivityIfHardDifficulty";
        case 0x219: return "Combat_MeleeAllowed";
        case 0x21A: return "Combat_CombatAllowed";
        case 0x21B: return "Combat_PostCombatAllowed";
        case 0x21C: return "Combat_DualGunsAllowed";
        case 0x21D: return "Combat_MeleeMove";
        case 0x21E: return "Combat_MeleeChargeAllowed";
        case 0x21F: return "Combat_MeleeCharging";
        case 0x220: return "Combat_MeleeFullyCharged";
        case 0x221: return "Combat_ContinueMeleeMoveFromPreviousState";
        case 0x222: return "Combat_SetAimLag";
        case 0x223: return "Combat_UseLeftGunWhenMirrored";
        case 0x224: return "Combat_GymnasticMoveType";
        case 0x225: return "Combat_AccurateAim";
        case 0x226: return "Combat_ActionResponseOwner";
        case 0x227: return "Combat_Aim_At_GrappleJumpTarget";
        case 0x228: return "Combat_Aim_Check";
        case 0x229: return "Combat_Aim_Magnet_Active";
        case 0x22A: return "Combat_Aim_Attraction_Active";
        case 0x22B: return "Combat_KickBack_Rising";
        case 0x22C: return "Combat_IncomingMeleeDamageForwardingDisabled";
        case 0x22D: return "Combat_KickBack_Timer";
        case 0x22E: return "Combat_AimCamZoomed";
        case 0x22F: return "Combat_AimCamZoomedLevel2";
        case 0x230: return "Combat_AimCamSwitched";
        case 0x231: return "Combat_AimCamNextAimShouldLookAtSameTargetPosition";
        case 0x232: return "Combat_InAimCamera";
        case 0x233: return "Combat_AnimSet";
        case 0x234: return "Combat_BinocularsAllowed";
        case 0x235: return "Combat_ButtonInitiatedAdrenalineEnabled";
        case 0x236: return "Combat_CanMeleeFinishTarget";
        case 0x237: return "Combat_CanMeleeFinishDFATarget";
        case 0x238: return "Combat_CanMeleeFinishTarget_OverrideTargetFinishableProperty";
        case 0x239: return "Combat_DisableFinishersVar";
        case 0x23A: return "Combat_InRangedState";
        case 0x23B: return "Combat_InRangedDodgeState";
        case 0x23C: return "Combat_InSwitchWeaponState";
        case 0x23D: return "Combat_RangedMoveActive";
        case 0x23E: return "Combat_ShouldUseAimCamera";
        case 0x23F: return "Combat_DualTargetingAllowed";
        case 0x240: return "Combat_EnableNPCPerfectShot";
        case 0x241: return "Combat_FireWeapon";
        case 0x242: return "Combat_SenseUnit_FocusFire";
        case 0x243: return "Combat_SenseUnit_DualFire";
        case 0x244: return "Combat_SenseUnit_Melee";
        case 0x245: return "Combat_SenseUnit_Ranged";
        case 0x246: return "Combat_InventoryPause";
        case 0x247: return "Combat_GearAllowed";
        case 0x248: return "Combat_HideHUD";
        case 0x249: return "Combat_SetLockTimer";
        case 0x24A: return "Combat_ShowReticle";
        case 0x24B: return "Combat_SetAccuracyType";
        case 0x24C: return "Combat_ProceduralAimAllowed";
        case 0x24D: return "Combat_PortableThrow";
        case 0x24E: return "Combat_PrimaryOverrideVar";
        case 0x24F: return "Combat_ReactiveDodgeVar";
        case 0x250: return "Combat_PostCombatFireWeapon";
        case 0x251: return "Combat_FireTurretAllowed";
        case 0x252: return "Combat_IsHelpless";
        case 0x253: return "Combat_TwoHandedGunsAllowed";
        case 0x254: return "Combat_UnequipItemInInvPause";
        case 0x255: return "Combat_InForcedAimState";
        case 0x256: return "Combat_InSeizeState";
        case 0x257: return "Combat_InTurretState";
        case 0x258: return "Combat_InMeleeStepNumber";
        case 0x259: return "Combat_InVegetationCutStepNumber";
        case 0x25A: return "Combat_InVegetationCut";
        case 0x25B: return "Combat_InMeleeFollowthroughState";
        case 0x25C: return "Combat_InMeleeArmorHitReactState";
        case 0x25D: return "Combat_InHitReact";
        case 0x25E: return "Combat_JumpEscapeInProgress";
        case 0x25F: return "Status_InThrownOrLandingState";
        case 0x260: return "Combat_Parry";
        case 0x261: return "Combat_Dodge";
        case 0x262: return "Combat_Dodge_Overruled";
        case 0x263: return "Combat_QuickTurn_ForcedLeft";
        case 0x264: return "Combat_QuickTurn_StopAngle";
        case 0x265: return "Combat_Rope_Maintain";
        case 0x266: return "Combat_UsingFinisher";
        case 0x267: return "Combat_FinisherInProgressFramesBetweenBroadcasts";
        case 0x268: return "Combat_RopeArrowAllowed";
        case 0x269: return "Combat_SetSenseTypeForSnapTargetCache";
        case 0x26A: return "Combat_ShownAccuracySpeed";
        case 0x26B: return "Combat_SnapTargetRequestTime";
        case 0x26C: return "Combat_SnapTargetTimeOverride";
        case 0x26D: return "Combat_StuckInTrap";
        case 0x26E: return "Combat_SupressSnapTargetingTime";
        case 0x26F: return "Combat_TargetSetAimAllowed";
        case 0x270: return "Combat_Turret_Interact";
        case 0x271: return "Combat_UnsafeInCover";
        case 0x272: return "Combat_CacheCurrentSnapTarget";
        case 0x273: return "Combat_CacheCurrentSnapTargetTimeLimit";
        case 0x274: return "Combat_UseDeathFromAboveHostedGraph";
        case 0x275: return "Combat_EnableContextKill";
        case 0x276: return "Combat_CombatTurnDone";
        case 0x277: return "Combat_AvoidWeaponClipping_PushRate";
        case 0x278: return "Combat_ConcealmentAllowed";
        case 0x279: return "Combat_CombatProxyAllowed";
        case 0x27A: return "Combat_CombatProxyEnabled";
        case 0x27B: return "Combat_WeaponProxyAllowed";
        case 0x27C: return "Combat_InRapidFire";
        case 0x27D: return "Combat_WeaponCharged";
        case 0x27E: return "Combat_InFireDrawnState";
        case 0x27F: return "Combat_ConcealedByEnvironmentalPose";
        case 0x280: return "Combat_AccumulatedDamageDecrementPerSecond";
        case 0x281: return "Combat_InCanopy";
        case 0x282: return "Combat_EnemiesShouldTargetMyHands";
        case 0x283: return "Combat_PlayerJumpBonusForNPCs";
        case 0x284: return "NonCombat_Dodge";
        case 0x285: return "NonCombat_Dodge_Respected";
        case 0x286: return "Camera_Shake";
        case 0x287: return "Camera_SetComponentData";
        case 0x288: return "Camera_SetTransitionType";
        case 0x289: return "Camera_SetTransitionTime";
        case 0x28A: return "Camera_SyncTypePan";
        case 0x28B: return "Camera_SyncTypeTilt";
        case 0x28C: return "Camera_MatchEffects";
        case 0x28D: return "Camera_MatchDefaultStackDolly";
        case 0x28E: return "Camera_MatchDefaultStackTruckHoriz";
        case 0x28F: return "Camera_PauseOtherCameraProcessing";
        case 0x290: return "Camera_OutTransitionType";
        case 0x291: return "Camera_OutTransitionTime";
        case 0x292: return "Camera_OutSyncTypePan";
        case 0x293: return "Camera_OutSyncTypeTilt";
        case 0x294: return "Camera_OutPauseOtherCameraProcessing";
        case 0x295: return "Camera_Override";
        case 0x296: return "Camera_ActivationDelay";
        case 0x297: return "Camera_ShakeDelay";
        case 0x298: return "Camera_ShakeScale";
        case 0x299: return "Camera_AllowExplorationCameraClimbFollow";
        case 0x29A: return "Camera_AllowExplorationCameraWaterVolumeCollision";
        case 0x29B: return "Camera_AllowExplorationCameraFocusCollision";
        case 0x29C: return "Camera_AllowClimbSplineCamScripting";
        case 0x29D: return "Camera_UseChooseClosestComponent_WithCollideCheck";
        case 0x29E: return "Camera_UseChooseClosestComponent_WithoutCollideCheck";
        case 0x29F: return "Camera_UseChooseClosestComponent_SegmentIndex";
        case 0x2A0: return "Camera_SetComponentData_ChooseClosest_Option1";
        case 0x2A1: return "Camera_SetComponentData_ChooseClosest_Option2";
        case 0x2A2: return "Camera_SetComponentData_ChooseClosest_Option3";
        case 0x2A3: return "Camera_SetComponentData_ChooseClosest_Option4";
        case 0x2A4: return "Physics_ProxyShape";
        case 0x2A5: return "Physics_ProxyShapeForCover";
        case 0x2A6: return "Physics_ProxyShapeForIncapacitated";
        case 0x2A7: return "Physics_NoGravity";
        case 0x2A8: return "Physics_NoCollision";
        case 0x2A9: return "Physics_AllowProcessingWithLinkedParent";
        case 0x2AA: return "Physics_Damping";
        case 0x2AB: return "Physics_Buoyancy";
        case 0x2AC: return "Physics_Enable";
        case 0x2AD: return "Physics_Reset";
        case 0x2AE: return "Physics_NoProxyCollision";
        case 0x2AF: return "Physics_NoProxyCollisionOnDuplica";
        case 0x2B0: return "Physics_NoProxyCollisionOffsetPush";
        case 0x2B1: return "Physics_NoDownwardProxyPush";
        case 0x2B2: return "Physics_NoCharacterCollision";
        case 0x2B3: return "Physics_NoMeleeTargetCollision";
        case 0x2B4: return "Physics_NoMeleeTargetOffensiveCollision";
        case 0x2B5: return "Physics_NoMeleeTargetOffensiveCollision_Overruled";
        case 0x2B6: return "Physics_NoMeleeTargetDamageVolumeCollision";
        case 0x2B7: return "Physics_NoSeizePartnerCollision";
        case 0x2B8: return "Physics_NoTerrainCollision";
        case 0x2B9: return "Physics_TargetDepth";
        case 0x2BA: return "Physics_IgnoreFallMessage";
        case 0x2BB: return "Physics_RotateProxyType";
        case 0x2BC: return "Physics_RespondToCollideProxySupport";
        case 0x2BD: return "Physics_LandingDamageFactor";
        case 0x2BE: return "Physics_FallHeightOverride";
        case 0x2BF: return "Physics_PushSpeed";
        case 0x2C0: return "Physics_PushMomentumMax";
        case 0x2C1: return "Physics_PushForcePerKilogram";
        case 0x2C2: return "Physics_PushForceMin";
        case 0x2C3: return "Physics_PushForceMax";
        case 0x2C4: return "Physics_DoProximityCheckOnCollision";
        case 0x2C5: return "Physics_SetGravityProbeLowerOffset";
        case 0x2C6: return "Physics_DisableGravityProbeStickyDownOverride";
        case 0x2C7: return "Line_Probe_Direction";
        case 0x2C8: return "Physics_NoAdditionalProxyCollision";
        case 0x2C9: return "Physics_StickyFloor";
        case 0x2CA: return "Physics_GravityProbe";
        case 0x2CB: return "Physics_GravityForce";
        case 0x2CC: return "Physics_PopToFloorOnEntry";
        case 0x2CD: return "Physics_PushProbe";
        case 0x2CE: return "Physics_ResetJumpLanding";
        case 0x2CF: return "Physics_MaxThrowVelXY";
        case 0x2D0: return "Physics_MaxThrowVelZ";
        case 0x2D1: return "Physics_ThrowOnlyAffectVelocity";
        case 0x2D2: return "Physics_BodyDrag_MarkerID";
        case 0x2D3: return "Physics_AllowProxyShiftCancel";
        case 0x2D4: return "Physics_ProxyShift_MoveToContactPointOnExclusivelyPositiveZOffset";
        case 0x2D5: return "Physics_ProxyShift_PreventVerticalOffset";
        case 0x2D6: return "Physics_ProxyShift_Method";
        case 0x2D7: return "Detection_SetSenseProfile";
        case 0x2D8: return "Detection_SetSensibleProfile";
        case 0x2D9: return "Detection_SetThreatProfile";
        case 0x2DA: return "LookAt_EnableArbitrator";
        case 0x2DB: return "Sense_ActivateCone";
        case 0x2DC: return "Sense_DeactivateType";
        case 0x2DD: return "Sense_SenseTypeForLockTarget";
        case 0x2DE: return "Sense_SenseTypeForLockTarget_Additional";
        case 0x2DF: return "Sense_Lock_GetBestTargetIfNull";
        case 0x2E0: return "Sense_Lock_AllowPreviousTarget";
        case 0x2E1: return "Sense_ForceConcealment";
        case 0x2E2: return "Sense_ForceScrambling";
        case 0x2E3: return "Engagement_LockTarget";
        case 0x2E4: return "Portable_Allowed";
        case 0x2E5: return "Portable_Allowed_MainHand";
        case 0x2E6: return "Portable_Allowed_OffHand";
        case 0x2E7: return "Portable_TwoHanded_Allowed";
        case 0x2E8: return "Portable_ThrowAiming";
        case 0x2E9: return "Portable_IsThrowing";
        case 0x2EA: return "Portable_ThrowAllowed";
        case 0x2EB: return "Portable_UseActiveAnimation";
        case 0x2EC: return "Portable_DropOnProxyHit";
        case 0x2ED: return "Portable_CriticalSection";
        case 0x2EE: return "Effect_TrackDrawGroup";
        case 0x2EF: return "Effect_ScreenZBiasValue";
        case 0x2F0: return "Script_ContextualAnimAllowed";
        case 0x2F1: return "Effect_ClothConfig";
        case 0x2F2: return "Effect_FadeDelay";
        case 0x2F3: return "Effect_FadeOutTime";
        case 0x2F4: return "Effect_FadeInTime";
        case 0x2F5: return "Inventory_Equip";
        case 0x2F6: return "Inventory_Urgency";
        case 0x2F7: return "Inventory_Priority";
        case 0x2F8: return "Inventory_Release";
        case 0x2F9: return "Inventory_SetStateTimer";
        case 0x2FA: return "Inventory_EquipItem";
        case 0x2FB: return "Inventory_SetUIChosenItem";
        case 0x2FC: return "Inventory_DisableUIChosenWeaponSelect";
        case 0x2FD: return "Inventory_TorchEquip";
        case 0x2FE: return "Inventory_TorchUse_Allowed";
        case 0x2FF: return "Inventory_UsingLeft";
        case 0x300: return "Inventory_MoveToReady";
        case 0x301: return "Inventory_PlayItemAnimation";
        case 0x302: return "Inventory_PlayAltItemAnimation";
        case 0x303: return "Inventory_UseAltProjectile";
        case 0x304: return "Inventory_DrawTrajectory";
        case 0x305: return "Inventory_HideProjectileForThisWeapon";
        case 0x306: return "Inventory_ItemForMultiEquip";
        case 0x307: return "Inventory_MultiUnEquipOnExit";
        case 0x308: return "Inventory_ResourceSet";
        case 0x309: return "Inventory_InventoryStateForSetAct";
        case 0x30A: return "Inventory_WeaponSelectionChangedForceProcess";
        case 0x30B: return "Inventory_FlashlightPlayerAnimAllowed";
        case 0x30C: return "Vehicle_CrashBrace";
        case 0x30D: return "Vehicle_BrakeDismount";
        case 0x30E: return "Vehicle_LinkPlayer";
        case 0x30F: return "Line_Probe_Length";
        case 0x310: return "Line_Probe_ConditionalUsedFor";
        case 0x311: return "Pillar_TranslationSpeed";
        case 0x312: return "Pillar_RotationSpeed";
        case 0x313: return "Ladder_TranslationSpeed";
        case 0x314: return "EventData_Type";
        case 0x315: return "EventData_Time";
        case 0x316: return "EventData_Target";
        case 0x317: return "EventData_Interval";
        case 0x318: return "Status_SetSwimming";
        case 0x319: return "Status_SetMovingAlongMarkup";
        case 0x31A: return "Bark";
        case 0x31B: return "Development_Identity";
        case 0x31C: return "Development_Progress";
        case 0x31D: return "Hpole_FacingDesiredDeterminedByAttachedMarkupZRotOffset";
        case 0x31E: return "Script_SendEvent";
        case 0x31F: return "EventSenderActivity_OnEntry";
        case 0x320: return "EventSenderActivity_OnExit";
        case 0x321: return "EventSenderActivity_OnFrameInState";
        case 0x322: return "EventSenderActivity_OnFrameInState_FrameNum";
        case 0x323: return "EventSenderActivityToCurrentWeapon_OnEntry";
        case 0x324: return "Combat_SetDesiredWeaponCameraData_Type";
        case 0x325: return "Prototype_RecordLocation";
        case 0x326: return "Prototype_TeleportLocation";
        case 0x327: return "Prototype_MarkupDetectionWait";
        case 0x328: return "Prototype_Bouldering_PreConnectTransferWindowFrames";
        case 0x329: return "Prototype_Bouldering_PostConnectTransferWindowFrames";
        case 0x32A: return "Prototype_Bouldering_PreConnectPenaltyWindowFrames";
        case 0x32B: return "Combat_SetSeizeAttackAllowed";
        case 0x32C: return "Combat_SetSeizeDefendAllowed";
        case 0x32D: return "Combat_SeizeAttack";
        case 0x32E: return "Net_UpdatePosition";
        case 0x32F: return "Net_UpdateRotation";
        case 0x330: return "Net_UpdateHorizontalAim";
        case 0x331: return "IncomingAttack_SeizeDisabled";
        case 0x332: return "IncomingAttack_MeleeDisabled";
        case 0x333: return "IncomingAttack_RangeDisabled";
        case 0x334: return "IncomingAttack_DeathSeizeDisabled";
        case 0x335: return "IncomingAttack_MeleeLungeDisabled";
        case 0x336: return "SeizeTarget_UseLastContactInstance";
        case 0x337: return "SeizeTarget_UseSpatialProbeTarget";
        case 0x338: return "SeizeTarget_ProbeHeightOverride";
        case 0x339: return "DeathFromAbove_SyncAnimPosOffset";
        case 0x33A: return "Combat_SynchronizedMeleeUseLastSpatialProbeTarget";
        case 0x33B: return "Multiplayer_RequestHelpAllowed";
        case 0x33C: return "Multiplayer_RespawnDelayMs";
        case 0x33D: return "Multiplayer_KillerCameraDurationMs";
        case 0x33E: return "Multiplayer_PlayerProne";
        case 0x33F: return "Multiplayer_PlayerIncapacitated";
        case 0x340: return "Multiplayer_PlayerRevivingTeammate";
        case 0x341: return "Multiplayer_PlayerDead";
        case 0x342: return "Multiplayer_PlayerIndicatorDisabled";
        case 0x343: return "Multiplayer_PlayerStunned";
        case 0x344: return "Multiplayer_PlayerExecuted";
        case 0x345: return "Multiplayer_PlayerRequestingFinisher";
        case 0x346: return "Multiplayer_DelayDeath";
        case 0x347: return "Multiplayer_PlayerStealthKillable";
        case 0x348: return "Multiplayer_PlayerCanFinish";
        case 0x349: return "Multiplayer_PlayerCanTransitionToFinisherVictim";
        case 0x34A: return "Multiplayer_PlayerGround";
        case 0x34B: return "Multiplayer_RespawnFadeInDurationMs";
        case 0x34C: return "Multiplayer_RespawnFadeInEndOpacityPercentage";
        case 0x34D: return "Multiplayer_KilledByDeathPlane";
        case 0x34E: return "Movement_MoveToGround_Frequency";
        case 0x34F: return "Movement_MoveToGround_SpatialProbe";
        case 0x350: return "Movement_MoveToGround_cmPerSec";
        case 0x351: return "Movement_Zipline_Climbing";
        case 0x352: return "Movement_Zipline_Descending";
        case 0x353: return "Movement_Zipline_DeadeyeAchievementIfShot";
        case 0x354: return "Movement_ForcedMarkupMovement";
        case 0x355: return "Movement_DownwardVelocityAngle";
        case 0x356: return "Status_InSlopeState";
        case 0x357: return "Status_InSlopeForcedStumbleState";
        case 0x358: return "Awareness_EdgeDeflectionSearchType";
        case 0x359: return "Status_InEvadeState";
        case 0x35A: return "CoverToCover_ShowJumpTarget";
        case 0x35B: return "Combat_FlairMoveAllowed";
        case 0x35C: return "Combat_SetFlairMoveRequest";
        case 0x35D: return "Combat_ArmsCrossed";
        case 0x35E: return "Grapple_ResetOrientation";
        case 0x35F: return "Movement_Jump_Takeoff_Vel";
        case 0x360: return "Prototype_Slope_DriftSpeed_Max";
        case 0x361: return "Prototype_MarkUp_SlopeAngle_Mid";
        case 0x362: return "MarkupDetection_Potential_Frequency";
        case 0x363: return "Combat_MedHitDamageType";
        case 0x364: return "Combat_HeavyHitDamageType";
        case 0x365: return "WetDirty_Mode";
        case 0x366: return "Combat_ObeyFlag_PlayerOrientEnemyWhenHit";
        case 0x367: return "Physics_SpatialProbeHit_StoreInfoFromLastQuery";
        case 0x368: return "MAX";
        case 0x369: return "Combat_HideReloadPrompt";
        case 0x36A: return "Proxy_CollisionProfile_Requested";
        case 0x36B: return "Npc_Interrupt_Using_Request_Handled_At_Entry";
        case 0x36C: return "Npc_Aware_Of_Player";
        case 0x36D: return "UseObjectReaction";
        case 0x36E: return "CollisionReactionLevelOverride";
        default: return Str("%d", property);
    }
}
