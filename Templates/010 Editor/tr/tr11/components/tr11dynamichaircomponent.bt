//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: tr11dynamichaircomponent.bt
//   Authors: arc_
//   Purpose: Parse .tr11dtp files storing DYNAMICHAIR components
//  Category: SOTTR
//------------------------------------------------

#define TR_VERSION 11
#include "../../trcommon.bt"

enum <uint> HAIRGROUP
{
    BACKFRINGE = 0x96B059CA,
    BANGS      = 0x4B90B0E,
    CAP        = 0x11C46,
    FRINGE     = 0x955D65B8,
    PONYTAIL   = 0xBDF135C1
};

typedef struct
{
    ubyte refType;
    FSkip(1);
    ushort boneId;
} ModelBoneOrMarkerReference <optimize=false, read=boneId>;

typedef struct
{
    unsigned int hairSplineObject;
    ModelBoneOrMarkerReference playerBoneMarker;
} HairSplineData <optimize=false>;

typedef struct
{
    unsigned int simulationProfileDtpId;
    HAIRGROUP groupNameHash;
} HairSimulationProfileGroup <read=Str("%s -> %d.tr11dtp", EnumToString(groupNameHash), simulationProfileDtpId), optimize=false>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    ushort numGroups;
    FSkip(6);
    Ref groupsRef;
    if (CanSeekTo(groupsRef))
    {
        SeekToRef(groupsRef);
        HairSimulationProfileGroup groups[numGroups];
        ReturnFromRef();
    }
    byte defaultSetting;
    FSkip(7);
} HairSimulationProfile <read=name, optimize=false>;

typedef struct
{
    unsigned int hairProfileDtpId;
    HAIRGROUP groupNameHash;
    float interpMaxDistance;
    float interpMinMasterDistance;
    float interpMaxMasterDistance;
    float interpScaleCurve[8];
} HairRenderProfileGroup <read=Str("%s -> %d.tr11dtp", EnumToString(groupNameHash), hairProfileDtpId), optimize=false>;

typedef struct
{
    Ref diffuseOpacityTexRef;
    Ref barbTexRef;
    float alphaThreshold;
    float motionScale;
} HairRenderProfileFeather <optimize=false>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    unsigned int numGroups;
    FSkip(4);
    Ref groupsRef;
    if (CanSeekTo(groupsRef))
    {
        SeekToRef(groupsRef);
        HairRenderProfileGroup groups[numGroups];
        ReturnFromRef();
    }
    unsigned int hairTexProfile;
    FSkip(4);
    Ref hairDirtTextureRef;
    byte enableDirt;
    ubyte dirtColorR;
    ubyte dirtColorG;
    ubyte dirtColorB;
    float dirtStrength;
    float dirtCoordScale;
    FSkip(4);
    HairRenderProfileFeather feather;
    byte defaultSetting;
    FSkip(7);
} HairRenderProfile <read=name, optimize=false>;

typedef struct
{
    ubyte rootColor0R;
    ubyte rootColor0G;
    ubyte rootColor0B;
    ubyte tipColor0R;
    ubyte tipColor0G;
    ubyte tipColor0B;
    ubyte rootColor1R;
    ubyte rootColor1G;
    ubyte rootColor1B;
    ubyte tipColor1R;
    ubyte tipColor1G;
    ubyte tipColor1B;
    float frequency;
} HairStrandColors <optimize=false>;

typedef struct
{
    float thickness;
    float shapeCurve[8];
    float alphaCurve[8];
    float noiseFrequency;
    float noiseStrength;
    unsigned int numHairStrandColors;
    Ref hairStrandColorsRef;
    if (CanSeekTo(hairStrandColorsRef))
    {
        SeekToRef(hairStrandColorsRef);
        HairStrandColors hairStrandColors[numHairStrandColors];
        ReturnFromRef();
    }
    HAIRGROUP groupNameHash;
    FSkip(4);
} HairGroupConstants <read=EnumToString(groupNameHash), optimize=false>;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    unsigned int lodProfileDtpId;
    FSkip(4);
} HairLodOverride <read=Str("%s -> %d.tr11dtp", name, lodProfileDtpId), optimize=false>;

typedef struct
{
    float targetUpdateRate;
    float multiStepUpdateRateThreshold;
    unsigned int numResetRelaxSteps;
} SimUpdateRateSettings <optimize=false>;

typedef struct
{
    byte hairEnabled;
    FSkip(3);
    HairSplineData hairSplineData;
    float gravityUnderWater;
    float dampingUnderWater;
    
    ushort numSimulationProfiles;
    FSkip(2);
    Ref simulationProfilesRef;
    if (CanSeekTo(simulationProfilesRef))
    {
        SeekToRef(simulationProfilesRef);
        HairSimulationProfile simulationProfiles[numSimulationProfiles];
        ReturnFromRef();
    }
    
    ushort numRenderProfiles;
    FSkip(6);
    Ref renderProfilesRef;
    if (CanSeekTo(renderProfilesRef))
    {
        SeekToRef(renderProfilesRef);
        HairRenderProfile renderProfiles[numRenderProfiles];
        ReturnFromRef();
    }
    
    ushort numGroupConstants;
    FSkip(6);
    Ref groupConstantsRef;
    if (CanSeekTo(groupConstantsRef))
    {
        SeekToRef(groupConstantsRef);
        HairGroupConstants groupConstants[numGroupConstants];
        ReturnFromRef();
    }
    
    ushort numLodProfileOverrides;
    FSkip(6);
    Ref lodProfileOverridesRef;
    if (CanSeekTo(lodProfileOverridesRef))
    {
        SeekToRef(lodProfileOverridesRef);
        HairLodOverride lodProfileOverrides[numLodProfileOverrides];
        ReturnFromRef();
    }
    
    byte useSourcePosNormal;
    FSkip(3);
    SimUpdateRateSettings simUpdateRateSettings;
    unsigned int lodProfileDtpId;
    unsigned int cinematicLodProfileDtpId;
    unsigned int combatLodProfileDtpId;
    float headRadius;
    float headFalloff;
    float headOffset[3];
} DynamicHairComponent <optimize=false>;

RefDefinitions refDefinitions;
DynamicHairComponent root <open=true>;