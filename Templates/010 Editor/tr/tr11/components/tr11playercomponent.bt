//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: tr11interactablecomponent.bt
//   Authors: arc_
//   Purpose: Parse .tr11dtp files storing PLAYER components
//  Category: SOTTR
//------------------------------------------------

#define TR_VERSION 11
#include "../../trcommon.bt"

typedef struct
{
    ushort version;
    ushort family;
    ushort id;
    ushort type;
} PlayerProp__data;

typedef struct
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReference__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReference__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReference;

typedef struct
{
    ushort fragment;
} AnimReference__AnimReferenceUnion;

typedef struct
{
    ushort referenceType;
    AnimReference__AnimReferenceUnion index;
} AnimReference;

typedef struct
{
    AnimReference animRef;
    float minTime;
    float maxTime;
    float delay;
    int chance;
    float loopTime;
    short numLoops;
    short idleClass;
    int context;
    short framesout;
    ushort pad_0 : 11;
    ushort moodEndCombat : 1;
    ushort moodCombat : 1;
    ushort moodSpooky : 1;
    ushort moodSuspicious : 1;
    ushort moodSafe : 1;
} PlayerProp__idleanim;

typedef struct
{
    float height;
    float crouchHeight;
    ModelBoneOrMarkerReference targetPosition_Standing;
    ModelBoneOrMarkerReference targetPosition_Aiming;
    ModelBoneOrMarkerReference targetPosition_Crouching;
    ModelBoneOrMarkerReference targetPosition_Hanging;
    ModelBoneOrMarkerReference targetPosition_ForMelee;
    ModelBoneOrMarkerReference targetPosition_TreadingWater;
    float aimCamOffset[3];
    float ankleUpperOffset;
    float ankleLowerOffset;
    float ankleLength;
    float mass;
    float analogWalkSpeed;
    float runSpeed;
    float slideLandDecel;
    float heightTweak;
    char gender;
    FSkip(3);
    Ref idleListRef;
    if (CanSeekTo(idleListRef))
    {
        SeekToRef(idleListRef);
        PlayerProp__idleanim idleList;
        ReturnFromRef();
    }
    unsigned int idleListCount;
} PlayerProp__general_attributes;

typedef struct
{
    void moveQuietEvent_concealed;
    void moveQuietEvent;
    void moveMediumEvent;
    void potatoEvent;
    void moveLoudEvent;
    void moveRunningEvent;
    float fRunningEventMinVelocity;
    FSkip(4);
    void moveLandingEvent;
    float fLandingEventMinVelocity;
    float fLandingEventMinVelocityInConcealment;
    float suppressLedgeDropSoundEventForTimeInSec;
    ushort silentRunningEventTrait;
    ushort silentLandingEventTrait;
} PlayerProp__event_broadcast_attributes;

typedef struct
{
    ushort extraHitPointsTrait;
    FSkip(2);
    int extraHitPoints;
    float extraHitPoints_easyMult;
    float extraHitPoints_hardMult;
    float extraHitPoints_survivorMult;
} HealthComponent__HealthUps;

typedef struct
{
    ubyte weatherType;
    FSkip(3);
    float regenRateModifier;
} HealthComponent__WeatherEffect;

typedef struct
{
    ushort trait;
    FSkip(2);
    int not;
} PlayerTraitListIndexComparison;

typedef struct
{
    int damageType;
    float damageModify;
    Ref requiredTraitsRef;
    if (CanSeekTo(requiredTraitsRef))
    {
        SeekToRef(requiredTraitsRef);
        PlayerTraitListIndexComparison requiredTraits;
        ReturnFromRef();
    }
    unsigned int requiredTraitsCount;
} HealthComponent__ArmorModifier;

typedef struct
{
    int angleOption;
    float angleUpper;
    float angleLower;
    float damageMultiplier;
} HealthComponent__ArmorModifierHitPosition;

typedef struct
{
    float rangeFrom;
    float rangeTo;
    float damageMultiplier;
} HealthComponent__ArmorModifierDistance;

typedef struct
{
    float absorbPercent;
    float absorbPercentPassLeftover;
} HealthComponent__ArmorDamageOptionUnion;

typedef struct
{
    int damageType;
    int armorDamageOption;
    HealthComponent__ArmorDamageOptionUnion armorDamageOptionUnion;
    PlayerTraitListIndexComparison requiredTrait;
} HealthComponent__DamageTypeDistributionOVerride;

typedef struct
{
    byte hasMultiplier;
    FSkip(3);
    int multiplierPriority;
    unsigned int numDamageTypes;
    FSkip(4);
    Ref damageTypesRef;
    if (CanSeekTo(damageTypesRef))
    {
        SeekToRef(damageTypesRef);
        HealthComponent__ArmorModifier damageTypes;
        ReturnFromRef();
    }
    unsigned int hitPositionTypesCount;
    FSkip(4);
    Ref hitPositionTypesRef;
    if (CanSeekTo(hitPositionTypesRef))
    {
        SeekToRef(hitPositionTypesRef);
        HealthComponent__ArmorModifierHitPosition hitPositionTypes;
        ReturnFromRef();
    }
    unsigned int distanceTypesCount;
    FSkip(4);
    Ref distanceTypesRef;
    if (CanSeekTo(distanceTypesRef))
    {
        SeekToRef(distanceTypesRef);
        HealthComponent__ArmorModifierDistance distanceTypes;
        ReturnFromRef();
    }
    byte hasHealth;
    FSkip(3);
    int maxHealth;
    int armorDamageOption;
    HealthComponent__ArmorDamageOptionUnion armorDamageOptionUnion;
    byte showHealthOnIndicator;
    FSkip(3);
    unsigned int damageTypeDistributionOVerrideListCount;
    FSkip(4);
    Ref damageTypeDistributionOVerrideListRef;
    if (CanSeekTo(damageTypeDistributionOVerrideListRef))
    {
        SeekToRef(damageTypeDistributionOVerrideListRef);
        HealthComponent__DamageTypeDistributionOVerride damageTypeDistributionOVerrideList;
        ReturnFromRef();
    }
    byte ignoreHealthState;
    FSkip(7);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
    byte debugArmorDraw;
    byte bDamageCanNotKill;
    FSkip(2);
    float bDamageCanNotKillForTimeSec;
} HealthComponent__ArmorDefinition;

typedef struct
{
    unsigned int box;
    unsigned int capsule;
    unsigned int sphere;
    unsigned int geom;
} PrimRef;

typedef struct
{
    int primType;
    PrimRef primRef;
    unsigned int zoneContext;
} HealthComponent__OnPrimStruct;

typedef struct
{
    Ref primListRef;
    if (CanSeekTo(primListRef))
    {
        SeekToRef(primListRef);
        HealthComponent__OnPrimStruct primList;
        ReturnFromRef();
    }
    unsigned int primListCount;
} HealthComponent__OnPrimList;

typedef struct
{
} EmptyStruct;

typedef struct
{
    HealthComponent__OnPrimList onPrim;
    int onHPrimNumber;
    EmptyStruct onAll;
} HealthComponent__ApplyArmorUnion;

typedef struct
{
    int angleOption;
    float angleUpper;
    float angleLower;
} HealthComponent__ArmorValidHitPosition;

typedef struct
{
    unsigned int armorIndex;
    byte enabled;
    FSkip(3);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
    Ref debugNameAssociatedHealthPrimRef;
    if (CanSeekTo(debugNameAssociatedHealthPrimRef))
    {
        SeekToRef(debugNameAssociatedHealthPrimRef);
        string debugNameAssociatedHealthPrim;
        ReturnFromRef();
    }
    unsigned int drawgroupHideListCount;
    FSkip(4);
    Ref drawgroupHideListRef;
    if (CanSeekTo(drawgroupHideListRef))
    {
        SeekToRef(drawgroupHideListRef);
        int drawgroupHideList;
        ReturnFromRef();
    }
    unsigned int drawgroupUnhideListCount;
    FSkip(4);
    Ref drawgroupUnhideListRef;
    if (CanSeekTo(drawgroupUnhideListRef))
    {
        SeekToRef(drawgroupUnhideListRef);
        int drawgroupUnhideList;
        ReturnFromRef();
    }
    float enabledPercentage;
    unsigned int hitMaterialOverride;
    unsigned int validPositionTypesCount;
    FSkip(4);
    Ref validPositionTypesRef;
    if (CanSeekTo(validPositionTypesRef))
    {
        SeekToRef(validPositionTypesRef);
        HealthComponent__ArmorValidHitPosition validPositionTypes;
        ReturnFromRef();
    }
    int ropeArrowAttachOverrideOption;
    unsigned int excludeDamageTypesCount;
    Ref excludeDamageTypesRef;
    if (CanSeekTo(excludeDamageTypesRef))
    {
        SeekToRef(excludeDamageTypesRef);
        int excludeDamageTypes;
        ReturnFromRef();
    }
    byte excludeDamageTypesByArmorDefListInstead;
} HealthComponent__ArmorReference;

typedef struct
{
    byte enableHealthPrim;
    FSkip(3);
    int applyType;
    HealthComponent__ApplyArmorUnion applyData;
    unsigned int armorListCount;
    FSkip(4);
    Ref armorListRef;
    if (CanSeekTo(armorListRef))
    {
        SeekToRef(armorListRef);
        HealthComponent__ArmorReference armorList;
        ReturnFromRef();
    }
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} HealthComponent__HealthPrim;

typedef struct
{
    unsigned int fxaReact;
    int hitReactType;
    int hitReactTypeMed;
    int hitReactTypeLow;
    int damageType;
    float damageMin;
    float damageMax;
    float hitReactPercentChance;
    float cooldown;
    byte bPlayOncePerAttackerInstance;
} HealthComponent__HitReactTranslationItem;

typedef struct
{
    unsigned int hash;
} EventEnum;

typedef struct
{
    byte clamp;
    FSkip(3);
    float coolDownTimeInSec;
    EventEnum onEnterEvent;
    EventEnum onExitEvent;
} HealthComponent__HealthStateTransitionData;

typedef struct
{
    float regenDelayInSec;
    float regenDelayInSec_easy;
    float regenDelayInSec_hard;
    float regenDelayInSec_survivor;
    float regenTimeInSec;
    float regenTimeInSec_easy;
    float regenTimeInSec_hard;
    float regenTimeInSec_survivor;
    byte regenBlockedInCombat;
    byte regenBlockedInCombat_easy;
    byte regenBlockedInCombat_hard;
    byte regenBlockedInCombat_survivor;
    unsigned int regenBlockedInStealthLoopStateListSize;
    Ref regenBlockedInStealthLoopStateListRef;
    if (CanSeekTo(regenBlockedInStealthLoopStateListRef))
    {
        SeekToRef(regenBlockedInStealthLoopStateListRef);
        int regenBlockedInStealthLoopStateList;
        ReturnFromRef();
    }
    unsigned int regenBlockedInStealthLoopStateListSize_Easy;
    FSkip(4);
    Ref regenBlockedInStealthLoopStateList_EasyRef;
    if (CanSeekTo(regenBlockedInStealthLoopStateList_EasyRef))
    {
        SeekToRef(regenBlockedInStealthLoopStateList_EasyRef);
        int regenBlockedInStealthLoopStateList_Easy;
        ReturnFromRef();
    }
    unsigned int regenBlockedInStealthLoopStateListSize_Hard;
    FSkip(4);
    Ref regenBlockedInStealthLoopStateList_HardRef;
    if (CanSeekTo(regenBlockedInStealthLoopStateList_HardRef))
    {
        SeekToRef(regenBlockedInStealthLoopStateList_HardRef);
        int regenBlockedInStealthLoopStateList_Hard;
        ReturnFromRef();
    }
    unsigned int regenBlockedInStealthLoopStateListSize_Survivor;
    FSkip(4);
    Ref regenBlockedInStealthLoopStateList_SurvivorRef;
    if (CanSeekTo(regenBlockedInStealthLoopStateList_SurvivorRef))
    {
        SeekToRef(regenBlockedInStealthLoopStateList_SurvivorRef);
        int regenBlockedInStealthLoopStateList_Survivor;
        ReturnFromRef();
    }
} HealthComponent__RegenParams;

typedef struct
{
    Ref traitsRef;
    if (CanSeekTo(traitsRef))
    {
        SeekToRef(traitsRef);
        ushort traits;
        ReturnFromRef();
    }
    unsigned int traitsCount;
    HealthComponent__RegenParams regenParams;
} HealthComponent__RegenParamsByTrait;

typedef struct
{
    byte enabledByDefault;
    FSkip(3);
    float percentHealthMin;
    HealthComponent__HealthStateTransitionData transitionFromHealing;
    HealthComponent__HealthStateTransitionData transitionFromDamage;
    byte regenPastCurrentLevel;
    byte regenPastCurrentLevel_IgnoreLaterRegenDelay;
    byte displayHealthIndicatorOnDuplicas;
    FSkip(1);
    unsigned int regenparamsByTraitListSize;
    Ref regenParamsByTraitListRef;
    if (CanSeekTo(regenParamsByTraitListRef))
    {
        SeekToRef(regenParamsByTraitListRef);
        HealthComponent__RegenParamsByTrait regenParamsByTraitList;
        ReturnFromRef();
    }
    byte enabled;
    FSkip(7);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} HealthComponent__HealthState;

typedef struct
{
    int xp;
    ushort trait;
} ExperienceByTrait;

typedef struct
{
    int count;
    int xp;
    int health;
    int adrenaline;
    byte bGiveXPOnlyWhenEarningAchivement;
    byte bGiveHealthOnlyWhenEarningAchivement;
    byte bGiveAdrenalineOnlyWhenEarningAchivement;
    byte retroSave;
    byte bAlwaysSendPlatformEvent;
    FSkip(3);
    unsigned int achievementHash;
    int modifierRequired;
    Ref validTraitListRef;
    if (CanSeekTo(validTraitListRef))
    {
        SeekToRef(validTraitListRef);
        PlayerTraitListIndexComparison validTraitList;
        ReturnFromRef();
    }
    unsigned int validTraitListCount;
    FSkip(4);
    uquad awardUIName;
    Ref bonusXpListRef;
    if (CanSeekTo(bonusXpListRef))
    {
        SeekToRef(bonusXpListRef);
        ExperienceByTrait bonusXpList;
        ReturnFromRef();
    }
    unsigned int bonusXpListCount;
} ExperienceAward;

typedef struct
{
    ushort trait;
} FriendlyFire__ForceFriendlyFireByAttackerTrait;

typedef struct
{
    byte enabled;
    FSkip(3);
    float damageMultiplier;
    EventEnum attackerEvent;
    EventEnum victimEvent;
    unsigned int excludeDamageTypesCount;
    FSkip(4);
    Ref excludeDamageTypesRef;
    if (CanSeekTo(excludeDamageTypesRef))
    {
        SeekToRef(excludeDamageTypesRef);
        int excludeDamageTypes;
        ReturnFromRef();
    }
    unsigned int forceFriendlyFireByAttackerTraitSize;
    FSkip(4);
    Ref forceFriendlyFireByAttackerTraitRef;
    if (CanSeekTo(forceFriendlyFireByAttackerTraitRef))
    {
        SeekToRef(forceFriendlyFireByAttackerTraitRef);
        FriendlyFire__ForceFriendlyFireByAttackerTrait forceFriendlyFireByAttackerTrait;
        ReturnFromRef();
    }
} FriendlyFire;

typedef struct
{
    char team;
    FSkip(3);
    float fScalar;
} TeamBasedScalar;

typedef struct
{
    ushort trait;
    byte checkAttacker;
    FSkip(1);
    int damageType;
    byte ignoreHealthState;
    FSkip(3);
    float damageMultiplier;
} HealthComponent__SimpleTraitBasedDamageModifier;

typedef struct
{
    int pointsToAward;
    byte bCanCountAsStealthKill;
} HealthComponent__ScoreAttackRewardData;

typedef struct
{
    int damageClass;
    float debugBarZOffset;
    int initialHitPoints;
    float initialHitPoints_easyMult;
    float initialHitPoints_hardMult;
    float initialHitPoints_survivorMult;
    int maximumHitPoints;
    float maximumHitPoints_easyMult;
    float maximumHitPoints_hardMult;
    float maximumHitPoints_survivorMult;
    unsigned int numHealthUps;
    FSkip(4);
    Ref healthUpsRef;
    if (CanSeekTo(healthUpsRef))
    {
        SeekToRef(healthUpsRef);
        HealthComponent__HealthUps healthUps;
        ReturnFromRef();
    }
    unsigned int weatherEffectsListSize;
    FSkip(4);
    Ref weatherEffectsListRef;
    if (CanSeekTo(weatherEffectsListRef))
    {
        SeekToRef(weatherEffectsListRef);
        HealthComponent__WeatherEffect weatherEffectsList;
        ReturnFromRef();
    }
    unsigned int numArmors;
    FSkip(4);
    Ref armorListRef;
    if (CanSeekTo(armorListRef))
    {
        SeekToRef(armorListRef);
        HealthComponent__ArmorDefinition armorList;
        ReturnFromRef();
    }
    unsigned int numPrims;
    FSkip(4);
    Ref primListRef;
    if (CanSeekTo(primListRef))
    {
        SeekToRef(primListRef);
        HealthComponent__HealthPrim primList;
        ReturnFromRef();
    }
    byte useHitReactSelectCooldown;
    FSkip(3);
    float hitReactSelectDefaultCooldown;
    byte bDoHitReactTranslation;
    FSkip(3);
    unsigned int uHitReactTranslationListCount;
    Ref hitReactTranslationListRef;
    if (CanSeekTo(hitReactTranslationListRef))
    {
        SeekToRef(hitReactTranslationListRef);
        HealthComponent__HitReactTranslationItem hitReactTranslationList;
        ReturnFromRef();
    }
    int hitReactDefaultType;
    float lowHpPercent;
    float medHpPercent;
    byte bSetArmorHitReactType;
    FSkip(3);
    int armorHitReactType;
    unsigned int numHealthStates;
    Ref healthStatesListRef;
    if (CanSeekTo(healthStatesListRef))
    {
        SeekToRef(healthStatesListRef);
        HealthComponent__HealthState healthStatesList;
        ReturnFromRef();
    }
    byte bHasInjuredHealthStates;
    FSkip(3);
    unsigned int numInjuredHealthStates;
    Ref injuredHealthStatesListRef;
    if (CanSeekTo(injuredHealthStatesListRef))
    {
        SeekToRef(injuredHealthStatesListRef);
        HealthComponent__HealthState injuredHealthStatesList;
        ReturnFromRef();
    }
    Ref experienceAwardListRef;
    if (CanSeekTo(experienceAwardListRef))
    {
        SeekToRef(experienceAwardListRef);
        ExperienceAward experienceAwardList;
        ReturnFromRef();
    }
    unsigned int experienceAwardCount;
    FriendlyFire friendlyFire;
    FSkip(4);
    Ref teamBasedDamageModifiersRef;
    if (CanSeekTo(teamBasedDamageModifiersRef))
    {
        SeekToRef(teamBasedDamageModifiersRef);
        TeamBasedScalar teamBasedDamageModifiers;
        ReturnFromRef();
    }
    unsigned int teamBasedDamageModifiersCount;
    unsigned int headPrim;
    unsigned int helmetIndex;
    byte fallingDamageArmorOverride;
    byte useHeartProbe;
    FSkip(2);
    HealthComponent__OnPrimStruct heartPrim;
    float heartProbeDistance;
    PlacementPath heartObject;
    byte useHeadshotProbe;
    FSkip(3);
    HealthComponent__OnPrimStruct headshotPrim;
    float headshotProbeDistance;
    FSkip(4);
    Ref simpleDamageModifiersRef;
    if (CanSeekTo(simpleDamageModifiersRef))
    {
        SeekToRef(simpleDamageModifiersRef);
        HealthComponent__SimpleTraitBasedDamageModifier simpleDamageModifiers;
        ReturnFromRef();
    }
    unsigned int simpleDamageModifiersCount;
    HealthComponent__ScoreAttackRewardData scoreAttackRewardData;
    FSkip(3);
    int healthRestore;
    int regenTime;
} HealthComponent;

typedef struct
{
    unsigned int value;
    unsigned int hash;
} CharacterClassComponent__CharacterClass;

typedef struct
{
    CharacterClassComponent__CharacterClass class;
} CharacterClassComponent;

typedef struct
{
    unsigned int hash;
    FSkip(4);
    Ref enumFileNameRef;
    if (CanSeekTo(enumFileNameRef))
    {
        SeekToRef(enumFileNameRef);
        string enumFileName;
        ReturnFromRef();
    }
} MovesetProfile_MoveTypeEnum;

typedef struct
{
    float lightDamageDist;
    float heavyDamageDist;
    float deathDist;
    float savingGrabDist;
    float noMarkupConnectDist;
    float reattachDistance;
    float savingGrabTimeInAir;
    float savingGrabFallSpeed;
    float injuredLightDamageDist;
    float injuredHeavyDamageDist;
    float injuredDeathDist;
    float injuredSavingGrabDist;
    float injuredSavingGrabTimeInAir;
    float injuredSavingGrabFallSpeed;
    byte bUseOldAttachedMarkupOfffset;
    FSkip(7);
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} FallHeightSetItem;

typedef struct
{
    Ref healthComponentEasyRef;
    if (CanSeekTo(healthComponentEasyRef))
    {
        SeekToRef(healthComponentEasyRef);
        HealthComponent healthComponentEasy;
        ReturnFromRef();
    }
    Ref healthComponentNormalRef;
    if (CanSeekTo(healthComponentNormalRef))
    {
        SeekToRef(healthComponentNormalRef);
        HealthComponent healthComponentNormal;
        ReturnFromRef();
    }
    Ref healthComponentHardRef;
    if (CanSeekTo(healthComponentHardRef))
    {
        SeekToRef(healthComponentHardRef);
        HealthComponent healthComponentHard;
        ReturnFromRef();
    }
    char dbDebugDontDie;
    FSkip(3);
    float dFallDistLight;
    float dFallDistHeavy;
    float dDeathFallDist;
    float dFallDamageLight;
    float dFallDamageHeavy;
    float dSaveFallDamageMult;
    int dSaveFallButtonWindow;
    MovesetProfile_MoveTypeEnum dHeavySnowModifier;
    float dInjuredFallDistLight;
    float dInjuredFallDistHeavy;
    float dInjuredDeathFallDist;
    float dInjuredFallDamageLight;
    float dInjuredFallDamageHeavy;
    int dInvincibilityGracePeriod;
    short dDamageHeavyThreshold;
    short dDamageMediumThreshold;
    ushort dMinRespawnHealthpackCount;
    FSkip(2);
    float fHelplessTimePad;
    float fMinHealthRestore;
    float fMaxRegenHealthRatio;
    float fMaxRegenFrames;
    float fRegenDelayFrames;
    float fRegenCurveBlend;
    float fMaxExtraHealthRatio;
    float fMaxExtraHealthDecayFrames;
    float fMortalWoundMaxVeerAngle;
    float fMortalWoundMaxStaggerAngle;
    float fMortalWoundUnbalanceRate;
    float fMortalWoundRecoverRate;
    float fMortalWoundRandomFluctuation;
    float fMortalWoundMomentum;
    float strongWaterCurrent_CollisionDamage;
    int strongWaterCurrent_CollisionDamageType;
    unsigned int listCount_FallHeightList;
    FSkip(4);
    Ref fallHeightListRef;
    if (CanSeekTo(fallHeightListRef))
    {
        SeekToRef(fallHeightListRef);
        FallHeightSetItem fallHeightList;
        ReturnFromRef();
    }
} health_tune_data;

typedef struct
{
    unsigned int uWaterSurfacingGaspSound;
    unsigned int uWaterSurfacingOkSound;
} PlayerProp__sound_tune_data;

typedef struct
{
    int barkType;
    unsigned int bark;
    unsigned int grunt;
    char subtitleMode;
    byte enabled;
    byte doRMScalcForAnim;
    byte overridePriority;
    int priority;
    byte playAfterDeath;
} VocalRef;

typedef struct
{
    VocalRef helpVocalRef;
} PlayerProp__multiplayer_sound;

typedef struct
{
    float min;
    float max;
} DefaultDATCurveWithLimits__YAxisValue;

typedef struct
{
    float min;
    float max;
} DefaultDATCurveWithLimits__XAxisValue;

typedef struct
{
    float x;
    float y;
} DATCurvePoint;

typedef struct
{
    DefaultDATCurveWithLimits__YAxisValue xAxis;
    DefaultDATCurveWithLimits__XAxisValue yAxis;
    unsigned int numPoints;
    FSkip(4);
    Ref pointsRef;
    if (CanSeekTo(pointsRef))
    {
        SeekToRef(pointsRef);
        DATCurvePoint points;
        ReturnFromRef();
    }
} DefaultDATCurveWithLimits;

typedef struct
{
    ushort dExtraBreathTrait;
    FSkip(2);
    float dExtraBreathDuration;
} PlayerProp__ExtraBreath;

typedef struct
{
    short dSwimTreadLevelOcean;
    short dSwimTreadLevelNonOcean;
    short dWadeDepth;
    short dSwimDepth;
    short dTreadDepth;
    short dDiveDepth;
    short dDeepDepth;
    short dMaximumSwimUnderDepth;
    short dAirLevelEnoughToBreath;
    short dAirLevelEnoughToSurface;
    float dSinkRate;
    float dFloatRate;
    FSkip(4);
    Ref decelRateCurveRef;
    if (CanSeekTo(decelRateCurveRef))
    {
        SeekToRef(decelRateCurveRef);
        DefaultDATCurveWithLimits decelRateCurve;
        ReturnFromRef();
    }
    float minFloorPitchLevellingAngle;
    float floorPitchLevellingDistance;
    float pitchLevellngRate;
    float pitchBlendRate;
    float triggerPitchBlendRate;
    float triggerPitchForwardCutOffRate;
    float triggerPitchMinSpeed;
    float triggerReleasedZDecelerationRate;
    float triggerTimeBeforePitchAdjust;
    float deepDiveDecelRate;
    float avoidWallImmediatelyPitchRate;
    float avoidWallPitchRate;
    float wallStickyAngleTolerance;
    byte dUseBobbing;
    FSkip(3);
    float dDrowningDamage;
    float dBreathDuration;
    float dBreathRefillTime;
    float dDrowningInterval;
    float dCurrentMultiplier;
    float againstWaterCurrentMaxMultiplier;
    Ref curveAgainstWaterCurrentDirAngleToSpeedMultiplierRef;
    if (CanSeekTo(curveAgainstWaterCurrentDirAngleToSpeedMultiplierRef))
    {
        SeekToRef(curveAgainstWaterCurrentDirAngleToSpeedMultiplierRef);
        DefaultDATCurveWithLimits curveAgainstWaterCurrentDirAngleToSpeedMultiplier;
        ReturnFromRef();
    }
    Ref extraBreathListRef;
    if (CanSeekTo(extraBreathListRef))
    {
        SeekToRef(extraBreathListRef);
        PlayerProp__ExtraBreath extraBreathList;
        ReturnFromRef();
    }
    unsigned int numExtraBreath;
    float floorSwimOffset;
    float floorRestOffset;
    float ceilingRestOffset;
    float closeToCeilingThreshold;
    float closeToFloorThreshold;
    float minTurnAngle;
    float minTiltAngle;
    float minTiltAngleDelta;
    float minSwimAccel;
    float recentCollisionTimer;
    float waveFollowSpeed;
    float waveSurfaceOffset;
    ushort groundProbe;
    ushort groundAlignedProbe;
    ushort groundBehindProbe;
    ushort groundAheadProbe;
    ushort ceilingProbe;
    ushort ceilingAboveProbe;
    ushort ceilingAheadProbe;
    ushort ceilingBehindProbe;
    ushort forwardProbe;
    ushort leftWallProbe;
    ushort rightWallProbe;
    ushort collisionInFrontProbe;
    ushort collisionAheadProbe;
    ushort collisionAheadDownProbe;
    ushort collisionAheadUpProbe;
    FSkip(6);
    Ref triggerPitchBlendRateCurveRef;
    if (CanSeekTo(triggerPitchBlendRateCurveRef))
    {
        SeekToRef(triggerPitchBlendRateCurveRef);
        DefaultDATCurveWithLimits triggerPitchBlendRateCurve;
        ReturnFromRef();
    }
    Ref triggerPitchDistanceFromColRateCurveRef;
    if (CanSeekTo(triggerPitchDistanceFromColRateCurveRef))
    {
        SeekToRef(triggerPitchDistanceFromColRateCurveRef);
        DefaultDATCurveWithLimits triggerPitchDistanceFromColRateCurve;
        ReturnFromRef();
    }
    Ref triggerSpeedDistanceFromColRateCurveRef;
    if (CanSeekTo(triggerSpeedDistanceFromColRateCurveRef))
    {
        SeekToRef(triggerSpeedDistanceFromColRateCurveRef);
        DefaultDATCurveWithLimits triggerSpeedDistanceFromColRateCurve;
        ReturnFromRef();
    }
    Ref forwardDistanceToSpeedCurveRef;
    if (CanSeekTo(forwardDistanceToSpeedCurveRef))
    {
        SeekToRef(forwardDistanceToSpeedCurveRef);
        DefaultDATCurveWithLimits forwardDistanceToSpeedCurve;
        ReturnFromRef();
    }
} PlayerProp__swim_tune_data;

typedef struct
{
    short transSegment;
    short rootSegment;
    short waistSegment;
    short leftHipSegment;
    short leftKneeSegment;
    short leftAnkleSegment;
    short leftBallSegment;
    short leftToeSegment;
    short rightHipSegment;
    short rightKneeSegment;
    short rightAnkleSegment;
    short rightBallSegment;
    short rightToeSegment;
    short spine0Segment;
    short spine1Segment;
    short manuSegment;
    short backAttachSegment;
    short neck1Segment;
    short neck2Segment;
    short headSegment;
    short leftClavicalJoint;
    short leftShoulderSegment;
    short leftElbowSegment;
    short leftWristSegment;
    short leftIndexSegment;
    short rightClavicalJoint;
    short rightShoulderSegment;
    short rightElbowSegment;
    short rightWristSegment;
    short rightIndexSegment;
    short rightGrabPivotSegment;
    short rightGrabJointSegment;
    short leftGrabPivotSegment;
    short leftGrabJointSegment;
    short leftForearm;
    short rightForearm;
    short markupBone;
    short cameraJoint;
    float dAnkleHeightAboveGround;
    float dBallHeightAboveGround;
    float dToeHeightAboveGround;
    byte isConvertedToBoneIndex;
} bone_tune_data;

typedef struct
{
    float dDefaultMarkupZBias;
    float dStickVelocityLimit;
    float dRunOffLedgeSafeGrabHeight;
    short dMovingTurnRate;
    FSkip(2);
    float dPhysicsWaterFriction;
    float dMaxXVel;
    float dMaxYVel;
    float dMaxZVel;
    short dGrabYDistance;
    short dGrabZDistance;
    short dDropOffDefaultHeight;
    short dFallDefaultZVelocity;
    short dAnalogWalkTrigger;
    short dBubbleSpread;
    short dBubbleSlowMinZVelocity;
    short dBubbleFastMinZVelocity;
    short dBubbleFastAcclRange;
    short dBubbleFastStartScale;
    short dBubbleFastStartScaleRange;
    short dBubbleSlowStartScale;
    short dBubbleSlowStartScaleRange;
    short dBubbleMaxSpeed;
    short dBubbleMaxSpeedRange;
    short dBubbleScaleRate;
    short dBubbleScaleRateRange;
    short dBubblesUniqueBubbles;
    short dBubbleDisperseFrames;
    short dBubbleKillScale;
    short dBubbleMinSplashSize;
} PlayerProp__tune_data;

typedef struct
{
    float stamina;
    float staminaRecoveryRate;
    float cooldownTemperatureChange;
    float cooldownSurfaceChange;
    float cooldownWoundRecover;
    float cooldownFatigueRecover;
} ConditionStatus;

typedef struct
{
    char gameTeam;
    FSkip(3);
    int combatStatus;
} ForcedCombatStatus;

typedef struct
{
    float radius;
    float closeRadius;
    float cooldownNonViolentToThreatening;
    float cooldownNonViolentToDeadly;
    float cooldownThreateningToDeadly;
    float cooldownThreateningToNonViolent;
    float cooldownDeadlyToThreatening;
    float cooldownDeadlyToNonViolent;
    ForcedCombatStatus forcedCombatStatus;
} CombatStatus;

typedef struct
{
    CombatStatus combatStatus;
    ubyte uHolsterTime;
    FSkip(1);
    ushort uKillTime;
    short iCombatTargetInvalidTimeout;
    short hitDodgeSwitchStart;
    short hitDodgeSwitchEnd;
    ushort fSecondaryTargetChangeDelay;
    float fMaxAimLeftAngle;
    float fMaxAimRightAngle;
    float fMaxAimVertAngle;
    float fMinLookatDist;
    float fMaxLookatAdjustmentAngleDegrees;
    float fLookatDistWhenMin;
    ubyte dCombatLockTime;
    ubyte dMeleeLockTime;
    ubyte dGrenadeLockTime;
    FSkip(1);
    float dCombatFlickAngleThreshold;
    ushort uMeleeStickAngleRange;
    ushort uMaxSimpleAttacks;
    ushort uMaxStunAttacks;
    FSkip(2);
    float fStunAttackCooldown;
    float fStealthKillMeleeAngle;
    float fStealthKillMeleeAngleAiming;
    float fStealthKillMeleeDistance;
    float fLedgeKillMeleeAngle;
    float fStealthKillMeleeForwardAngle;
    float fChargeKillMeleeAngle;
    float fChargeKillMeleeDistance;
    float fMeleeExecutionHeight;
    float fMaxLowMeleeHeight;
    float fMaxMidMeleeHeight;
    float fMaxHighMeleeHeight;
    float fFrontMeleeAngle;
    unsigned int fMaxPersistentProjectiles;
    float fProjectileCelebrationCooldownSec;
    byte bFadeReticle;
    FSkip(3);
    float fMinFadeDistance;
    float fMaxFadeDistance;
    float fMinAlphaValue;
    float flickTargetInputThreshold;
    float cancelSnapTargetInputThreshold;
    float snapTargetLockTimeUnarmed;
    float snapTargetArrivalDeg;
    float snapTargetMaxDeg;
    float snapTargetNearArrivalDeg;
    float snapTargetCloseAttackerPriorityScalar;
    float closeAttackerRange;
    float closeAttackerDurationInSec;
    float meleeActiveEnemyRange;
    float meleeActiveTimeInSec;
    float fSecondaryMaxAimLeftAngle;
    float fSecondaryMaxAimRightAngle;
    float fDualTargetingInterpTime;
    float fArmChangeInterpTime;
    float fTargetChangeInterpTime;
    float fAimIKDelay;
    float fDualTargetChangeInterpTime;
    float fFlairMoveConeAngle;
    float fCameraTargetingHandednessFudge;
    float fConFireTimeDilation;
    unsigned int uBulletMissSound;
    float npcRepulsionRadius;
    float npcRepulsionOuterCushion;
    float npcRepulsionInnerCushion;
    float fAimProbeWallStopSmoothingTime;
    float fAimProbeWallStopSmoothingDist;
    unsigned int meleeEffect;
} PlayerProp__combat_tune_data;

typedef struct
{
    byte dEnabled;
    FSkip(3);
    float dBestJitter;
    float dJitterIncPerJump;
    float dJitterIncPerRoll;
    ubyte dFadeInTime;
    ubyte dFadeOutTime;
    ushort dFadeLockOffset;
    float dFadeIndScale;
    float dAPSCursorSpeed;
    float dAPSCursorScreenPadX;
    float dAPSCursorScreenPadY;
    ushort ropeSwingProbe;
} PlayerProp__reticle_tune_data;

typedef struct
{
    uint pad_0 : 22;
    uint raycastFromCamera : 1;
    uint raycastFromInstance : 1;
    uint standingOnInvalid : 1;
    uint trashInvalid : 1;
    uint raycastAcquire : 1;
    uint raycastKeep : 1;
    uint raycastFromPlayer : 1;
    uint useCameraReferenceFrame : 1;
    uint requiresHealth : 1;
    uint raycastMeleeCheck : 1;
    uint sendMessages : 1;
    int __bitfieldpadding11 : 31;
    int overrideRuleSourceInstanceWithSenseTypeTarget;
    EventEnum msgOnTargetAcquired;
    EventEnum msgOnTargetLost;
    EventEnum msgOnTargetChanged;
    uint allowPrevTargetIfNoCurrentTarget : 1;
    int __bitfieldpadding16 : 31;
    float allowPrevTargetIfNoCurrentTargetTime;
    unsigned int uNumTiers;
    FSkip(4);
    void tierList;
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
    unsigned int waitTime;
} SenseUnit;

typedef struct
{
    Ref rangedCombatSenseDataRef;
    if (CanSeekTo(rangedCombatSenseDataRef))
    {
        SeekToRef(rangedCombatSenseDataRef);
        SenseUnit rangedCombatSenseData;
        ReturnFromRef();
    }
    Ref manualLockAcquireRef;
    if (CanSeekTo(manualLockAcquireRef))
    {
        SeekToRef(manualLockAcquireRef);
        SenseUnit manualLockAcquire;
        ReturnFromRef();
    }
    Ref meleeCombatSenseDataRef;
    if (CanSeekTo(meleeCombatSenseDataRef))
    {
        SeekToRef(meleeCombatSenseDataRef);
        SenseUnit meleeCombatSenseData;
        ReturnFromRef();
    }
    Ref meleeCombatSecondarySenseDataRef;
    if (CanSeekTo(meleeCombatSecondarySenseDataRef))
    {
        SeekToRef(meleeCombatSecondarySenseDataRef);
        SenseUnit meleeCombatSecondarySenseData;
        ReturnFromRef();
    }
    Ref deathFromAboveSenseDataRef;
    if (CanSeekTo(deathFromAboveSenseDataRef))
    {
        SeekToRef(deathFromAboveSenseDataRef);
        SenseUnit deathFromAboveSenseData;
        ReturnFromRef();
    }
    Ref manualLockAutoaimPlayerRef;
    if (CanSeekTo(manualLockAutoaimPlayerRef))
    {
        SeekToRef(manualLockAutoaimPlayerRef);
        SenseUnit manualLockAutoaimPlayer;
        ReturnFromRef();
    }
    Ref adrenalineSenseDataRef;
    if (CanSeekTo(adrenalineSenseDataRef))
    {
        SeekToRef(adrenalineSenseDataRef);
        SenseUnit adrenalineSenseData;
        ReturnFromRef();
    }
    Ref headLookAtSenseDataRef;
    if (CanSeekTo(headLookAtSenseDataRef))
    {
        SeekToRef(headLookAtSenseDataRef);
        SenseUnit headLookAtSenseData;
        ReturnFromRef();
    }
    Ref grappleSenseDataRef;
    if (CanSeekTo(grappleSenseDataRef))
    {
        SeekToRef(grappleSenseDataRef);
        SenseUnit grappleSenseData;
        ReturnFromRef();
    }
    float fSenseOffset;
    float fLedgeSenseOffset;
    float fSeizeClearanceProbeOffset;
    float fBalanceBeamSeizeClearanceProbeOffset;
    float fSeizeUnreachablePlatformHeightDiff;
    unsigned int stealthFinisherMeleeMove;
    unsigned int stealthFinisherMeleeMoveHold;
    unsigned int stealthFinisherMeleeMoveChained;
} PlayerProp__sense_system;

typedef struct
{
    byte smoothRideAffectsCameraBone;
    FSkip(3);
    float smoothRideDampingRatio;
    float smoothRideHertz;
    float smoothRideNonLinearSpringMult;
    float smoothRideVelFactor;
    float smoothRideDeltaZFactor;
    float smoothLimitUp;
    float smoothLimitDown;
} SmoothRideTune;

typedef struct
{
    float clearanceHeight;
    float clearanceDist;
} HurdleClearanceCheckData;

typedef struct
{
    int vPlatformOffsetDist[3];
    int ledgeOffsetDist[3];
    int sideClearance[3];
    HurdleClearanceCheckData clearanceCheckStanding;
    HurdleClearanceCheckData clearanceCheckCrouch;
    HurdleClearanceCheckData clearanceCheckFloor;
    float fLineProbePadding;
    float fAttachOffsetDist;
    ushort forwardProbe;
} HurdleTuneData;

typedef struct
{
    unsigned int material;
    float multiplier;
} MaterialGroundSpeed;

typedef struct
{
    float walkMag;
    float trotMag;
    float runMag;
    float idleWalkHistGapSize;
    float walkTrotHistGapSize;
    float trotRunHistGapSize;
    float minWalkSpeedAdj;
    float maxWalkSpeedAdj;
    float minTrotSpeedAdj;
    float maxTrotSpeedAdj;
    float minRunSpeedAdj;
    float maxRunSpeedAdj;
    float minSprintSpeedAdj;
    float maxSprintSpeedAdj;
    float groundChangeZoneDelay;
    float interpoBlendTurnAngleHist;
    float interpoBlendLeanAdjustRate;
    float interpoBlendUpDownAdjustRate;
    float interpoBlendTorsoAdjustRate;
    float slewAdjustRate;
    float slewRadius;
    float slewExaggeration;
    float slewMaxSpeed;
    SmoothRideTune smoothRide;
    float footPlantDampingRatio;
    float footPlantHertz;
    float fSprintMaxTime;
    float fSprintMinTime;
    float fSprintRechargeDelayTime;
    float fSprintRechargeTime;
    HurdleTuneData hurdleData;
    FSkip(2);
    float fTorsoTwistSpineFrac;
    float fTorsoTwistNeck1Frac;
    float fTorsoTwistNeck2Frac;
    Ref materialGroundSpeedMapRef;
    if (CanSeekTo(materialGroundSpeedMapRef))
    {
        SeekToRef(materialGroundSpeedMapRef);
        MaterialGroundSpeed materialGroundSpeedMap;
        ReturnFromRef();
    }
    unsigned int iMaterialGroundSpeedMapCount;
    ushort groundProbe;
    ushort groundAheadProbe;
    ushort snowProbe;
    ushort ceilingProbe;
    ushort ceilingProbeAhead;
    ushort wallTouchLeftProbe;
    ushort wallTouchRightProbe;
    FSkip(2);
    float groundStickyDistanceDown;
    float groundStickyDistanceUp;
    float wallTouchForce;
    int wallTouchContactRank;
    float groundSteeringWiggleThreshold;
    float groundSteeringWiggleTolerance;
    float groundSteeringWiggleSmoothing;
    int groundSteeringWiggleAllowance;
    float groundStepHeight;
    float groundStepDistance;
    float groundStepIdleSpeed;
    float groundSteeringWallDeflectNoContactTime;
    float groundSteeringWallDeflectRampStartTimeNoStick;
    float groundSteeringWallDeflectRampStartTimeFullStick;
    float groundSteeringWallDeflectTurnRate;
    float groundSteeringWallDeflectParallelFudgeFactor;
    float groundSteeringWallDeflectMaxGroundSpeed;
    float rollCooldownTimer;
} ground_move_tune_data;

typedef struct
{
    ushort animAlarmEvent;
    FSkip(2);
    int lockMode;
    int ikMode;
    float probeOffsetStart;
    float probeOffsetEnd;
    int frames2Ramp;
    unsigned int endBoneIndex;
    float endOffsetOverride[3];
    byte bIKChainOn : 1;
    byte bLeaveFootprint : 1;
    byte bOrientToNormal : 1;
    byte bCheckFootPlant : 1;
    byte __bitfieldpadding8 : 4;
    FSkip(7);
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} LimbLockProc;

typedef struct
{
    unsigned int ikChain;
    int defaultLockMode;
    int ikMode;
    ushort animAlarmActivate;
    ushort animAlarmDeactivate;
    float minimumSlopeNormalZ;
    float probeOffsetStart;
    float probeOffsetEnd;
    float endOffset[3];
    int frames2RampOn;
    int frames2RampOff;
    Ref ikChainCancelListRef;
    if (CanSeekTo(ikChainCancelListRef))
    {
        SeekToRef(ikChainCancelListRef);
        unsigned int ikChainCancelList;
        ReturnFromRef();
    }
    unsigned int footprintBoneIndex;
    unsigned int endBoneIndex;
    unsigned int animIKBoneIndex;
    FSkip(4);
    Ref limbLockProcListRef;
    if (CanSeekTo(limbLockProcListRef))
    {
        SeekToRef(limbLockProcListRef);
        LimbLockProc limbLockProcList;
        ReturnFromRef();
    }
    ushort miNumCancelIKChains;
    ushort miNumLimbLockProcs;
    byte bGUIEnabled : 1;
    byte bEnableByDefault : 1;
    byte bCheckFootPlant : 1;
    byte bLeaveFootprint : 1;
    byte bOrientToNormal : 1;
    byte bLeaveFootprintsButDontIK : 1;
    byte __bitfieldpadding18 : 2;
    FSkip(3);
    float orientMaxAngleDiff;
    FSkip(4);
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} GenericLimbLockParams;

typedef struct
{
    ushort miNumLimbLocks;
    FSkip(6);
    Ref msLimbLocksRef;
    if (CanSeekTo(msLimbLocksRef))
    {
        SeekToRef(msLimbLocksRef);
        GenericLimbLockParams msLimbLocks;
        ReturnFromRef();
    }
} LimbLockSet;

typedef struct
{
    ushort miNumLimbLocks;
    FSkip(6);
    Ref msLimbLocksRef;
    if (CanSeekTo(msLimbLocksRef))
    {
        SeekToRef(msLimbLocksRef);
        unsigned int msLimbLocks;
        ReturnFromRef();
    }
} LimbLockGroup;

typedef struct
{
    ushort edgeProbeUp;
    ushort edgeProbeDown;
    float edgeRejectDist;
    float edgeIdealDist;
    float edgeParallelAngle;
    float edgePerpendicularAngle;
} EdgeDeflectionData;

typedef struct
{
    float up[3];
    float pad_0;
    float right[3];
    float pad_1;
    float upWorldOffset[3];
    float pad_2;
    float rightWorldOffset[3];
    float pad_3;
    ubyte modeType;
    ubyte isUpCharacterBased;
    ubyte isRightCharacterBased;
    FSkip(1);
    float thresholdAngle;
    float upThreshold[3];
    float pad_0Threshold;
    float rightThreshold[3];
    float pad_1Threshold;
    float idleThreshold;
    byte preventHorizonFlip;
} ControlMode;

typedef struct
{
    Ref controlModeListRef;
    if (CanSeekTo(controlModeListRef))
    {
        SeekToRef(controlModeListRef);
        ControlMode controlModeList;
        ReturnFromRef();
    }
    ubyte ground;
    ubyte horizontalPole;
    ubyte ladder;
    ubyte ledge;
    ubyte rope;
    ubyte swimming;
    ubyte verticalPole;
    ubyte inAir;
    float axisVelocity;
    float relockStickMag;
} PlayerProp__controls_data;

typedef struct
{
    char dRopePumpBehavior;
    char dRopeHangBehavior;
    char dRopePumpControls;
    ubyte dRopeReverseRotationDirection;
    float dRopeClimberLengthScale;
    float dRopeClimberRadius;
    float dRopeClimbSpeed;
    float dRopeDescendSpeed;
    float dRopeRotateSpeed;
    float dRopePumpLiftSpeed;
    float dRopePumpLiftAcc;
    float dRopePumpDropSpeed;
    float dRopePumpDropAcc;
    float dRopeAttachmentVelScale;
    float dRopeAttachmentVelScale2;
    float dRopeAttachmentVelScaleChangeOver;
    float dRopeJumpPeturbationAmount;
    float dRopeAttachControlsTimer;
    float dRopeMinMarkUpLength;
    int dRopeDragDetachTime;
    float dRopeSwingDeadZone;
    short dRopeSwingBackwardAngle;
    short dRopeSwingForwardAngle;
    float dRopeSwingTurnAngleScale;
    short dRopeSwingTurnAngleMin;
    short dRopeTNodeToMarkupY;
    short dRopeTNodeToMarkupZ;
    short dRopeTNodeToHandY;
    short dRopeTNodeToHandZ;
    ushort useNewJumpDetachTuning;
    float designerVelOut;
    float designerVelUp;
    float designerVelOutCoeff;
    float designerVelUpCoeff;
    float physicsVelOutCoeff;
    float physicsVelUpCoeff;
    float firstSwingGravityCoeff;
} PlayerProp__rope_tune_data;

typedef struct
{
    short ledgeMinDistFromEnd;
    short ledgeMinDistFromCornerBraced;
    short ledgeMinDistFromCornerUnbraced;
    short ledgeFlairMoveHoldTime;
    short nonBracedLedgeZOffset;
    short nonBracedLedgeForwardClearance;
    short bracedClearanceHysteresis;
    short surfaceStandableStartProbeBackFromWallDist;
    short surfaceStandableRequiredForwardClearance;
    short surfaceStandableRequiredForwardClearanceAngle;
    short surfaceEdgeRequiredForwardClearance;
    short surfaceNarrowRequiredForwardClearance;
    short surfaceProbeAboveLedgeOffset;
    short ledgeLookaheadDistBraced;
    short ledgeLookaheadDistUnbraced;
    short ledgeBlockageProbeExtraDist;
    short ledgeBlockageProbeZOffset;
    short ledgeBlockageProbeYOffset;
    short convexTurnStartDistFromCornerBraced;
    short convexTurnStartDistFromCornerUnbraced;
    short concaveTurnStartDistFromCornerBraced;
    short concaveTurnStartDistFromCornerUnbraced;
    short bracedUnbracedTraverseProbeDist;
    short cornerTurnStartDistHustleScalar;
    short ledgeTurnAngularLimit;
    short verticalBlockageProbeDist;
    ushort savingGrabPromptObjectID;
    FSkip(2);
    float bracedLedgeAngleLimit;
    float ledgeBlendAngleLimit;
    float hangClearanceDown;
    float hurdleClearanceDown;
    ushort hangProbe;
    ushort climbUpProbe;
    ushort standAtopProbe;
    ushort hurdleOverProbe;
    ushort bracedProbe;
} ledge_tune_data;

typedef struct
{
    float laraOffsetX;
    float laraOffsetY;
    float laraOffsetZ;
    float minLedgeSpace;
    float lookaheadDist;
    float minDistFromEnd;
    float jumpAttachToWallHugTolerance;
    float startAboveLedge;
    float startInFrontOfLedge;
    float probeLength;
} wall_hug_tune_data;

typedef struct
{
    float hPoleZDistance;
    float hPoleMaxSwingingAttachAngle;
    float hPoleLimitedDistToEnd;
    float hPoleDeadSpotMag;
    float hPoleLockAngle;
    short hPoleBadAttachRecoverInterpFrames;
    FSkip(2);
    float sideWallHPoleProbeDownFromHPole;
    float sideWallHPoleProbeBackFromHPole;
    float sideWallHPoleProbeSideFromHPole;
    float sideWallHPoleProbeLen;
    float ceilingHPoleProbeDownFromHPole;
    float ceilingHPoleProbeLen;
} hpole_tune_data;

typedef struct
{
    float distanceToFirstRung;
    float distanceBetweenRungs;
    ubyte lowestAllowedRung;
    ubyte attachMaxAngle;
    FSkip(2);
    float tNodeToMarkupY;
    float tNodeToMarkupZ;
    float tNodeToHandY;
    float tNodeToHandZ;
    short offTopProbeLength;
    short upProbeLength;
    short upProbeYOffset;
    short upProbeZOffset;
    short downProbeLength;
    short downProbeYOffset;
    short downProbeZOffset;
    FSkip(2);
    float handYOffset;
    float handZOffset;
    float footZOffset;
    short debugXOffset;
    short debugYOffset;
    ubyte debugColorR;
    ubyte debugColorG;
    ubyte debugColorB;
    ubyte debugColorA;
} ladder_tune_data;

typedef struct
{
    short tNodeToMarkupY;
    short tNodeToMarkupZ;
    short tNodeToHandY;
    short tNodeToHandZ;
    short offTopProbeLength;
    short offBottomProbeLength;
    short outwardFromWall;
    short offTopDistance;
    short offBottomDistance;
} wallvertpole_tune_data;

typedef struct
{
    float fastTraversalDistance;
    short tNodeToMarkupY;
    short tNodeToMarkupZ;
    short tNodeToHandY;
    short tNodeToHandZ;
    short offTopProbeLength;
    short offBottomProbeLength;
    short offBottomProbeOffset;
    short aboveMarkupTNodeZBoost;
} vertpole_tune_data;

typedef struct
{
    short radius;
    short jumpTargetYOffset;
    short jumpTargetZOffset;
    short tNodeAttachYOffset;
    short tNodeAttachZOffset;
    short handAttachYOffset;
    short handAttachZOffset;
    short attachGroundZOffset;
    short detachGroundYOffset;
    short upProbeLength;
    short upProbeYOffset;
    short upProbeZOffset;
    short downProbeLength;
    short downProbeYOffset;
    short downProbeZOffset;
} pillar_tune_data;

typedef struct
{
    float pipeHorizontalZDistance;
    float pipeHorizontalMaxSwingingAttachAngle;
    float pipeHorizontalLimitedDistToEnd;
    float pipeHorizontalDeadSpotMag;
    float pipeHorizontalLockAngle;
    short pipeHorizontalBadAttachRecoverInterpFrames;
    FSkip(2);
    float sideWallPipeHorizontalProbeDownFromPipeHorizontal;
    float sideWallPipeHorizontalProbeBackFromPipeHorizontal;
    float sideWallPipeHorizontalProbeSideFromPipeHorizontal;
    float sideWallPipeHorizontalProbeLen;
    float ceilingPipeHorizontalProbeDownFromPipeHorizontal;
    float ceilingPipeHorizontalProbeLen;
} pipehorizontal_tune_data;

typedef struct
{
    float distanceToFirstRung;
    float distanceBetweenRungs;
    ubyte lowestAllowedRung;
    ubyte attachMaxAngle;
    FSkip(2);
    float tNodeToMarkupY;
    float tNodeToMarkupZ;
    float tNodeToHandY;
    float tNodeToHandZ;
    short offTopProbeLength;
    short upProbeLength;
    short upProbeYOffset;
    short upProbeZOffset;
    short downProbeLength;
    short downProbeYOffset;
    short downProbeZOffset;
    FSkip(2);
    float handYOffset;
    float handZOffset;
    float footZOffset;
    short debugXOffset;
    short debugYOffset;
    ubyte debugColorR;
    ubyte debugColorG;
    ubyte debugColorB;
    ubyte debugColorA;
} pipevertical_tune_data;

typedef struct
{
    float collisionProbeDistCheck;
    float collisionProbeSphereRadius;
    float collisionProbeZOffsetFromTNode;
} pushpull_tune_data;

typedef struct
{
    float minRadius;
    float maxRadius;
    float jumpTargetYOffset;
    float jumpTargetZOffset;
    float tNodeAttachYOffset;
    float tNodeAttachZOffset;
    float downProbeLength;
    float downProbeZOffset;
} perch_tune_data;

typedef struct
{
    ushort wallJumpProbeHandsLeft;
    ushort wallJumpProbeHandsRight;
    ushort wallJumpProbeFeetLeft;
    ushort wallJumpProbeFeetRight;
    ushort wallJumpProbeLeft;
    ushort wallJumpProbeRight;
    ushort wallJumpProbeHeight;
    ushort wallJumpProbeMarkupArrow;
    int detectionHandZOffset;
    int detectionFootZOffset;
    ubyte anticipationFrames;
    ubyte detectionFrames;
    ubyte collideFrames;
    ubyte maxCollideAngle;
    ubyte maxWallAngle;
    ubyte maxFacingAngle;
    ubyte maxVelocityAngle;
    ubyte preApexFrames;
    ubyte postApexFrames;
    FSkip(3);
    int minHeight;
    float maxHorizDist;
    int attachDist;
    int yOffset;
    ushort zRotSpeed;
    FSkip(2);
    float maxAdjustment;
    float smoothing;
    ubyte numMaxWallJumps;
    ubyte numWallJumps1;
    ubyte numWallJumps2;
} wall_jump_tune_data;

typedef struct
{
    float linearSoftness;
    float angularSoftness;
} SimpleSoftness;

typedef struct
{
    float linearSoftness[3];
    float angularSoftness[3];
} AdvancedSoftness;

typedef struct
{
    float linearDamping;
    float linearFrequency;
    float angularDamping;
    float angularFrequency;
} SimpleSpringSoftness;

typedef struct
{
    float linearDamping[3];
    float linearFrequency[3];
    float angularDamping[3];
    float angularFrequency[3];
} AdvancedSpringSoftness;

typedef struct
{
    SimpleSoftness simple;
    AdvancedSoftness advanced;
    SimpleSpringSoftness simpleSpring;
    AdvancedSpringSoftness advancedSpring;
} SoftnessUnion;

typedef struct
{
    int softnessType;
    SoftnessUnion softness;
    float relaxation;
    char numIterations;
    byte collideConnectedBodies : 1;
    byte smoothLimits : 1;
    byte globalRelocate : 1;
    byte __bitfieldpadding4 : 5;
    byte baumgarteOverride;
    FSkip(1);
    float baumgarte;
} CommonJointProp;

typedef struct
{
    float value;
} DensityTuning;

typedef struct
{
    DensityTuning density;
    float mass;
} PhysTuningData;

typedef struct
{
    int type;
    PhysTuningData data;
} PhysTuning;

typedef struct
{
} IHighlightableResource;

typedef struct
{
    IHighlightableResource __parent;
} IMaterial;

typedef struct
{
    float renderRadius;
    FSkip(4);
    Ref ropeMaterialRef;
    if (CanSeekTo(ropeMaterialRef))
    {
        SeekToRef(ropeMaterialRef);
        IMaterial ropeMaterial;
        ReturnFromRef();
    }
    float vLength;
    float uWidth;
    byte bSmoothRope;
    FSkip(3);
    float maxSmoothDistFromPoint;
    byte bRenderHighlight;
    byte bCastShadows;
    FSkip(2);
    unsigned int siRenderType;
} RopeRenderData;

typedef struct
{
    float bendingStiffness;
    float beta;
    float damping;
    float gravity;
    int iterations;
    float linearDensity;
    float minSegmentLength;
    float mu;
    int sleepTime;
    float sleepVelocity;
    float softness;
    float taper;
    float massTaper;
} ParticleTuneData;

typedef struct
{
    float grappleAxeAttachedThrowSpeed;
    float grappleAxeRecoverSpeed;
    float grappleAxeThrowSpeed;
    float grappleAxeThrowAngle;
    float grappleAxeVerticalThrowAngle;
    float grappleAxeGravityMult;
    float grappleAxeThrowMaxLength;
    float grappleAxeThrowInputThreshold;
    float grappleAxeThrowMaxDeviation;
    float grappleAxeThrowExtraProbeForward;
    byte grappleAxeCanAttachOnWallCrawlSurface;
    FSkip(3);
    float grappleAxeClimbWobbleMinLength;
    float grappleAxeClimbWobbleMaxLength;
    float grappleAxeWallRunMinRopeLength;
    Ref grappleAxeWallRunMaxSwingAngleCurveRef;
    if (CanSeekTo(grappleAxeWallRunMaxSwingAngleCurveRef))
    {
        SeekToRef(grappleAxeWallRunMaxSwingAngleCurveRef);
        DefaultDATCurveWithLimits grappleAxeWallRunMaxSwingAngleCurve;
        ReturnFromRef();
    }
    Ref grappleAxeWallRunStickPushForceCurveRef;
    if (CanSeekTo(grappleAxeWallRunStickPushForceCurveRef))
    {
        SeekToRef(grappleAxeWallRunStickPushForceCurveRef);
        DefaultDATCurveWithLimits grappleAxeWallRunStickPushForceCurve;
        ReturnFromRef();
    }
    float grappleAxeWallRunStickFirstPushForce;
    float grappleAxeWallRunStickFirstPushMaxArcLen;
    float grappleAxeWallRunStickFirstPushMaxSpeed;
    float grappleAxeWallRunStickPushMinX;
    float grappleAxeWallRunApexTrackingMinArcLen;
    float grappleAxeWallRunJumpApexLeniencyTime;
    float grappleAxeWallRunMoveDownQuickMaxArcLen;
    float grappleAxeWallRunMoveDownQuickMaxSpeed;
    float grappleAxeWallRunHoldPositionMaxDuration;
    float grappleAxeWallRunHoldPositionLastApexMinTime;
    float grappleAxeWallRunHoldPositionLastApexMaxTime;
    CommonJointProp grappleAxeWallRunPhysJointCommonProp;
    float grappleAxeWallRunPhysGeoRadius;
    PhysTuning grappleAxeWallRunPhysTuning;
    float grappleAxeWallRunPhysGravityScale;
    FSkip(4);
    Ref grappleAxeWallRunPhysGravityScaleCurveRef;
    if (CanSeekTo(grappleAxeWallRunPhysGravityScaleCurveRef))
    {
        SeekToRef(grappleAxeWallRunPhysGravityScaleCurveRef);
        DefaultDATCurveWithLimits grappleAxeWallRunPhysGravityScaleCurve;
        ReturnFromRef();
    }
    float grappleAxeWallRunPhysLinearDamping;
    float grappleAxeWallRunPhysAngularDamping;
    float grappleAxeWallRunPhysFriction;
    float grappleAxeWallRunPhysRestitution;
    float grappleAxeWallRunStickReleasedFriction;
    float grappleAxeWallRunTimeStickReleasedFriction;
    float grappleAxeWallRunClimbFriction;
    float grappleAxeWallRunStartRestSettleDownMinArcLen;
    float grappleAxeWallRunStartRestSettleDownMinSpeed;
    float grappleAxeWallRunDefaultRestAngleStabilizationRate;
    float grappleAxeWallRunDefaultRestSpeedStabilizationRate;
    float grappleAxeWallRunTopRestAngleStabilizationRate;
    float grappleAxeWallRunTopRestSpeedStabilizationRate;
    float grappleAxeWallRunClimbUpDownMaxStickAngle;
    float grappleAxeWallRunJumpDetachSpeedTwoOrMoreSwing;
    float grappleAxeWallRunJumpDetachSpeedOneSwing;
    float grappleAxeWallRunJumpDetachSpeedNoSwing;
    float grappleClimbRappelSwingFirstStickPushForwardMultiplier;
    float grappleClimbRappelSwingStickPushForwardMultiplier;
    float grappleClimbRappelSwingJumpImpulseSwingForward;
    float grappleClimbRappelSwingJumpImpulseSwingBackward;
    float grappleClimbRappelSwingJumpForwardMinAngleTolerance;
    float grappleClimbRappelSwingJumpForwardLeniencyTime;
    float grappleClimbRappelSwingClampedMaxSpeed;
    float grappleClimbRappelSwingRestMaxSpeed;
    float grappleClimbRappelSwingRestMaxAngle;
    float grappleClimbRappelSwingStrongCollisionHitDuration;
    float grappleClimbRappelSwingStrongCollisionAngleFromNormal;
    float grappleClimbRappelSwingStrongCollisionPhysLinVel;
    float grappleClimbRappelSwingStickPushForce;
    float grappleClimbRappelSwingStickFirstPushForce;
    float grappleClimbRappelSwingStickInitialAngleMaxForwardRealign;
    float grappleClimbRappelSwingMinAngleToForceCameraRealign;
    float grappleClimbRappelSwingStickDesiredDirDampingSpeed;
    float grappleClimbRappelSwingFastRealignDirDampingSpeed;
    CommonJointProp grappleClimbRappelSwingPhysJointCommonProp;
    float grappleClimbRappelSwingPhysGeoRadius;
    FSkip(4);
    Ref grappleClimbRappelSwingPhysGravityScaleCurveRef;
    if (CanSeekTo(grappleClimbRappelSwingPhysGravityScaleCurveRef))
    {
        SeekToRef(grappleClimbRappelSwingPhysGravityScaleCurveRef);
        DefaultDATCurveWithLimits grappleClimbRappelSwingPhysGravityScaleCurve;
        ReturnFromRef();
    }
    PhysTuning grappleClimbRappelSwingPhysTuning;
    float grappleClimbRappelSwingPhysLinearDamping;
    float grappleClimbRappelSwingPhysAngularDamping;
    float grappleClimbRappelSwingPhysFriction;
    float grappleClimbRappelSwingPhysRestitution;
    byte grappleAxePreCheck;
    FSkip(3);
    float grappleAxePreCheckOffsetY;
    float grappleAxePreCheckOffsetZ;
    float grappleAxePreCheckExtraZVel;
    float grappleAxePreCheckMaxTime;
    ushort grappleAxeObjectID;
    ModelBoneOrMarkerReference grappleAxeHandleMarkerReference;
    ModelBoneOrMarkerReference grappleAxePivotMarkerReference;
    ModelBoneOrMarkerReference grappleAxeGrabMarkerReference;
    ModelBoneOrMarkerReference grappleAxeTipMarkerReference;
    ModelBoneOrMarkerReference grappleAxeFallbackMarkerReference;
    ushort unbracedSwingWallProbe;
    ushort wallCrawlDetectFromAxe;
    ushort grappleAxeClimbTopWallProbe;
    ushort grappleAxeBracedProbeHigh;
    ushort grappleAxeBracedProbeFoot;
    ushort grappleAxeBracedProbeKnee;
    ushort wallrunFrontWallProbe;
    ushort wallrunSideWallProbe;
    ushort grappleAxeBracedProbeToGround;
    ushort bracedClimbDownWallLimitProbe;
    ushort bracedClimbDownRappelSwingPossible;
    float grappleSwingTargetLineLength;
    float grappleSwingExitAngle;
    float grappleSwingLineLengthInterpEndAngle;
    float grappleSwingDeviationInterpEndAngle;
    float grappleSwingAngularAcceleration;
    float grappleSwingMaxAngularSpeed;
    float grappleSwingDetachSpeed;
    float grappleSwingZRotSpeed;
    float grappleSwingWallStopDistance;
    float grappleArrowSwingTargetLineLength;
    float grappleArrowSwingExitAngle;
    float grappleArrowSwingMaxAngularSpeed;
    float grappleArrowSwingDetachSpeed;
    Ref grappleAxeClimbUpSpeedCurveRef;
    if (CanSeekTo(grappleAxeClimbUpSpeedCurveRef))
    {
        SeekToRef(grappleAxeClimbUpSpeedCurveRef);
        DefaultDATCurveWithLimits grappleAxeClimbUpSpeedCurve;
        ReturnFromRef();
    }
    Ref grappleAxeClimbDownSpeedCurveRef;
    if (CanSeekTo(grappleAxeClimbDownSpeedCurveRef))
    {
        SeekToRef(grappleAxeClimbDownSpeedCurveRef);
        DefaultDATCurveWithLimits grappleAxeClimbDownSpeedCurve;
        ReturnFromRef();
    }
    float grappleClimbMinLineLengthToInclined;
    float grappleClimbMinLineLength;
    float grappleClimbMaxLineLength;
    float grappleClimbLineLengthCorrectionSpeed;
    float grappleClimbAngularAcceleration;
    float grappleClimbAngularDampen;
    float grappleClimbDeviationCorrectionSpeed;
    float grappleClimbZRotSpeed;
    float grappleAxeBracedClimbCollisionDeactAngle;
    float grappleAxeUnbracedClimbCollisionDeactAngle;
    float grappleAxeBracedClimbUpSpeed;
    float grappleAxeClimbUpDownMaxStickAngle;
    float grappleAxeBracedClimbDownSpeed;
    float grappleAxeBracedClimbYOffset;
    float grappleAxeUnbracedClimbYOffset;
    float grappleAxeAutoClimbDownQuickSpeed;
    float grappleAxeAutoClimbUpQuickSpeed;
    float grappleAxeAutoClimbDownQuickRopeLengthDelta;
    float grappleAxeUnbracedClimbUpSpeed;
    float grappleAxeUnbracedClimbDownSpeed;
    float grappleClimbSettleFromWallCrawlLength;
    RopeRenderData grappleSwingRopeData;
    byte grappleSwingUseParticleString;
    FSkip(3);
    ParticleTuneData grappleSwingParticleStringData;
    byte grappleRappelUseRopeBending;
    FSkip(3);
    float grappleRappelRopePartPhysCapsuleLength;
    float grappleRappelRopePartPhysCapsuleRadius;
    float grappleRappelRopePartPhysLinearDamping;
    float grappleRappelRopePartPhysAngularDamping;
    float grappleRappelRopePartPhysFriction;
    float grappleRappelRopePartPhysRestitution;
    PhysTuning grappleRappelRopePartPhysTuning;
    CommonJointProp grappleRappelRopePartPhysJointCommonProp;
    CommonJointProp grappleRappelRopePlayerAttachedPhysJointCommonProp;
    float zipLineFrontDist;
    float zipLineBackDist;
    float zipLineOffset[3];
    float maxFallDistance;
    float animBlendDeltaMax;
    AnimReference fireRecoilAnimRef;
    float pullDistanceMin;
    float pullForceInitial;
    float pullForceStandard;
    float pullSpeedMin;
    int pullFailureTicksAllowed;
    int pad2;
    AnimReference pullFailureAnimRef;
    float pullAnimBlendDeltaMax;
    float pullAnimSpeedMultMin;
    float pullAnimSpeedMultMax;
    float pullAnimSpeedVelCap;
    float rappelGroundDetectionDistance;
    float rappelLateralWallDetectionDistance;
    float rappelGravity;
    PhysTuning rappelPhysTuning;
    float rappelLinearDamping;
    float rappelAngularDamping;
    float rappelRopeLengthShort;
    float rappelRopeLengthMedium;
    float rappelVelocityAngleUp;
    float rappelVelocityAngleDown;
    float rappelWallLedgeVerticalDetectionMinOffset;
    float rappelWallLedgeVerticalDetectionMaxOffset;
    float rappelAnimBlendDeltaMax;
    float rappelWalkAnimSpeedMultMin;
    float rappelWalkAnimSpeedMultMax;
    float rappelRunAnimSpeedMultMin;
    float rappelRunAnimSpeedMultMax;
    float rappelAscendAnimSpeedMultMin;
    float rappelAscendAnimSpeedMultMax;
    float rappelDescendAnimSpeedMultMin;
    float rappelDescendAnimSpeedMultMax;
    float rappelClimbAnimSpeedMultMin;
    float rappelClimbAnimSpeedMultMax;
    float rappelStickMagnitudeMin;
    float rappelAscendDescendStickAngle;
    float rappelAscendSpeed;
    float rappelDescendSpeed;
    float rappelIdleDampening;
    int rappelIdleDampeningTicks;
    float rappelWallRunSpeedSlow;
    float rappelWallRunSpeedMedium;
    float rappelWallRunSpeedFast;
    float rappelWallRunMaxSpeed;
    float rappelWallRunMaxAngle;
    float rappelWallRunMaxAngleDampening;
    float rappelWallRunStumbleAngle;
    float rappelWallRunRecoverAngle;
    int rappelWallRunStumbleFrames;
    float rappelWallRunStopDamping;
    float rappelWallRunForceShortMin;
    float rappelWallRunForceShortMax;
    float rappelWallRunForceMediumMin;
    float rappelWallRunForceMediumMax;
    float rappelWallRunForceLongMin;
    float rappelWallRunForceLongMax;
    float rappelBarrierDetectionProbeLength;
    float rappelFlailDetectionOffset;
    float rappelFlailDetectionProbeLength;
    float rappelOverhangDetectionZOffset;
    float rappelOverhangDetectionLength;
    float rappelOverhangPushForce;
    float rappelOverhangDescendSpeed;
    int rappelOverhangDescendFrames;
    float rappelJumpoffLateralMinVelOut;
    float rappelJumpoffLateralMinVelUp;
    float rappelJumpoffLateralMaxVelOut;
    float rappelJumpoffLateralMaxVelUp;
    float rappelJumpoffLateralMultOut;
    float rappelJumpoffLateralMultUp;
    float rappelJumpoffBackMinVelOut;
    float rappelJumpoffBackMinVelUp;
    float rappelJumpoffBackMaxVelOut;
    float rappelJumpoffBackMaxVelUp;
    float rappelJumpoffBackMultOut;
    float rappelJumpoffBackMultUp;
    float rappelJumpoffDynamicMinVelOut;
    float rappelJumpoffDynamicMinVelUp;
    float rappelJumpoffDynamicMaxVelOut;
    float rappelJumpoffDynamicMaxVelUp;
    float rappelJumpoffDynamicMultOut;
    float rappelJumpoffDynamicMultUp;
    float rappelFreeWallLandAnimSpeedVelCap;
    float rappelFreeStickMagnitudeMin;
    float rappelFreeSwingStickAngle;
    float rappelFreeAscendDescendStickAngle;
    float rappelFreeRotationStickAngle;
    int rappelFreeForwardToBackSwingIdleBufferTime;
    int rappelFreeHeldBackToIdleTime;
    float rappelFreeSwingIdleDamping;
    float rappelFreeAscendSpeed;
    float rappelFreeDescendSpeed;
    float rappelFreeAutoAdjustSpeed;
    float rappelFreeMaxRopeAngleClimb;
    float rappelFreeRopeAngleClimbDelay;
    float rappelFreeRotateSpeed;
    byte bRappelFreeReverseRotDir;
    FSkip(3);
    int rappelFreeRotationFrames;
    float rappelFreeSwingMaxSpeed;
    float rappelFreeSwingMaxAngle;
    float rappelFreeMaxAngleDampening;
    float rappelFreeSwingLateralDamping;
    float rappelFreeSwingForwardForceShortMin;
    float rappelFreeSwingForwardForceShortMax;
    float rappelFreeSwingBackwardForceShortMin;
    float rappelFreeSwingBackwardForceShortMax;
    float rappelFreeSwingForwardForceMediumMin;
    float rappelFreeSwingForwardForceMediumMax;
    float rappelFreeSwingBackwardForceMediumMin;
    float rappelFreeSwingBackwardForceMediumMax;
    float rappelFreeSwingForwardForceLongMin;
    float rappelFreeSwingForwardForceLongMax;
    float rappelFreeSwingBackwardForceLongMin;
    float rappelFreeSwingBackwardForceLongMax;
    float rappelFreeOverhangDetectionZOffset;
    float rappelFreeOverhangDetectionLength;
    float rappelFreeJumpoffMinVelOut;
    float rappelFreeJumpoffMinVelUp;
    float rappelFreeJumpoffMaxVelOut;
    float rappelFreeJumpoffMaxVelUp;
    float rappelFreeJumpoffMultOut;
    float rappelFreeJumpoffMultUp;
    float minStumbleVel;
    float minHardLandVel;
    float minDamageVel;
    float minHalfDamageVel;
    float minDeathVel;
    float rappelGroundStepOnHorizDist;
    float rappelGroundStepOnForwardDist;
    float rappelGroundStepOnAngle;
    int boltToSpawnLoadoutIndex;
} grapple_tune_data;

typedef struct
{
    ushort wallCrawlProbeCenter;
    ushort wallCrawlProbeLeftHand;
    ushort wallCrawlProbeRightHand;
    ushort wallCrawlProbeLeftFoot;
    ushort wallCrawlProbeRightFoot;
    ushort wallCrawlProbeUp;
    ushort wallCrawlProbeDown;
    ushort wallCrawlProbeLeft;
    ushort wallCrawlProbeRight;
    ushort wallCrawlProbeLeftHandOrientation;
    ushort wallCrawlProbeRightHandOrientation;
    ushort wallCrawlProbeLeftFootOrientation;
    ushort wallCrawlProbeRightFootOrientation;
    ushort wallCrawlDetectProbeFeetLeft;
    ushort wallCrawlDetectProbeFeetRight;
    ushort wallCrawlDetectProbeHandLeft;
    ushort wallCrawlDetectProbeHandRight;
    ushort wallCrawlDetectProbeLeft;
    ushort wallCrawlDetectProbeRight;
    ushort wallCrawlProbeAxe;
    ushort wallCrawlProbeMarkupArrow;
    short wallCrawlRemovePitonRadius;
    float wallCrawlOmniJumpVel[3];
    float wallCrawlSavingGrabPromptZOffset;
    float wallCrawlJumpUpHelperAngle;
    float wallCrawlEdgeDetectDist;
    ushort wallCrawlDetectFromRope;
    FSkip(2);
    float wallCrawlFromRopeZOffset;
    short wallBlockageProbeLength;
    short wallBlockageProbeZOffset;
    short wallBlockageProbeYOffset;
    FSkip(2);
    float wallCrawlBlockageStickAngle;
    float wallCrawlBlockageStickPersistAngle;
    float wallCrawlBlockageSpeed;
    float wallCrawlBlockagePersistSpeed;
    short wallCrawlOldBlockagePersistTime;
    FSkip(2);
    float wallCrawlOldBlockagePersistDist;
    float wallCrawlMaintainDeflectedSpeed;
    float wallCrawlInclinedMinAngle;
    float wallCrawlInclinedMaxAngle;
    ushort wallCrawlInclinedRequiredTrait;
} WallCrawlTuneData;

typedef struct
{
    float tNodeOffset[3];
    float maxAimingAngleDiffFromNormalForClamping;
    float maxLateralDistanceForModifiedAiming;
    float maxFrontalDistanceForModifiedAiming;
} WallConcealmentTuneData;

typedef struct
{
    float handAttachZDistance;
    float aimingTreeClimbMarkUpDirDistOffset;
} TreeClimbTuneData;

typedef struct
{
    float innerRadius;
    float outerRadius;
    float minAngleDeg;
    float maxAngleDeg;
} PlayerProp__TR9Proto_AnalogStickZoneData;

typedef struct
{
    float maxDuration;
    float maxFwdDuration;
    float maxBackDuration;
    float maxLeftDuration;
    float maxRightDuration;
} PlayerProp__TR9Proto_RadialFlickData;

typedef struct
{
    float maxDuration;
    float maxFwdDuration;
    float maxBackDuration;
    float maxLeftDuration;
    float maxRightDuration;
} PlayerProp__TR9Proto_ChordFlickData;

typedef struct
{
    float maxDuration;
    float maxFwdDuration;
    float maxBackDuration;
    float maxLeftDuration;
    float maxRightDuration;
    float angleDeg;
    float fwdAngleDeg;
    float backAngleDeg;
    float leftAngleDeg;
    float rightAngleDeg;
} PlayerProp__TR9Proto_CircleFlickData;

typedef struct
{
    PlayerProp__TR9Proto_AnalogStickZoneData standardPainZone;
    PlayerProp__TR9Proto_AnalogStickZoneData fwdPainZone;
    PlayerProp__TR9Proto_AnalogStickZoneData backPainZone;
    PlayerProp__TR9Proto_AnalogStickZoneData leftPainZone;
    PlayerProp__TR9Proto_AnalogStickZoneData rightPainZone;
} PlayerProp__TR9Proto_StuckPainData;

typedef struct
{
    PlayerProp__TR9Proto_AnalogStickZoneData innerZone;
    PlayerProp__TR9Proto_AnalogStickZoneData outerZone;
    PlayerProp__TR9Proto_RadialFlickData radialFlick;
    PlayerProp__TR9Proto_ChordFlickData chordFlick;
    PlayerProp__TR9Proto_CircleFlickData circleFlick;
    PlayerProp__TR9Proto_StuckPainData stuckPain;
} PlayerProp__TR9Proto_StickFlickAttackData;

typedef struct
{
    PlayerProp__TR9Proto_StickFlickAttackData stickFlickAttack;
} PlayerProp__tr9_prototype_melee_tune_data;

typedef struct
{
    float xFreq;
    float yFreq;
    float xMag;
    float yMag;
    float phase;
} PlayerProp__Prototype_AccurateAim_HarmonicJitterData;

typedef struct
{
    char type;
    FSkip(3);
    PlayerProp__Prototype_AccurateAim_HarmonicJitterData harmonic;
} PlayerProp__Prototype_AccurateAim_JitterData;

typedef struct
{
    PlayerProp__Prototype_AccurateAim_JitterData jitter;
} PlayerProp__Prototype_AccurateAimData;

typedef struct
{
    PlayerProp__Prototype_AccurateAimData accurateAim;
    float fEoNTargetRadius;
    float fHuntedTimeoutSeconds;
    float fHuntedRangeBehind;
    float fHuntedAngleBehind;
    float dARCombatCursorSpeed;
    float fARCombatTargetRadius;
    float dARCombatUntargetedCursorSpeed;
    float dCameraLagShpereRadius;
    float dCameraLagboxHalfWidth;
    float dCameraLagboxHalfHeight;
    float fCameraLagboxMoveSpeed;
    float fARCombatReticuleMovementRadius;
    ubyte fCameraLagStrength[64];
} PlayerProp__prototypeTuneData;

typedef struct
{
    float min;
    float max;
} InputTracker__StickMagnitudeZone;

typedef struct
{
    ushort source;
    FSkip(2);
    float angle;
    unsigned int magnitude;
    FSkip(4);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} InputTracker__StickTrackingPin;

typedef struct
{
    unsigned int nextMove;
    int inventoryAnim;
    short minTime;
    short maxTime;
    short resetTime;
    short staleResetTime;
    short minRange;
    short maxRange;
    short priority;
    ushort enabled : 1;
    ushort strictMove : 1;
    ushort upperBodyCombo : 1;
    ushort debugPad : 13;
    unsigned int numPriorMoves;
    FSkip(4);
    Ref priorMoveListRef;
    if (CanSeekTo(priorMoveListRef))
    {
        SeekToRef(priorMoveListRef);
        unsigned int priorMoveList;
        ReturnFromRef();
    }
    unsigned int numNextMoves;
    FSkip(4);
    Ref nextMoveListRef;
    if (CanSeekTo(nextMoveListRef))
    {
        SeekToRef(nextMoveListRef);
        unsigned int nextMoveList;
        ReturnFromRef();
    }
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} InputTracker__StickComboMove;

typedef struct
{
    Ref mpStickMagnitudesRef;
    if (CanSeekTo(mpStickMagnitudesRef))
    {
        SeekToRef(mpStickMagnitudesRef);
        InputTracker__StickMagnitudeZone mpStickMagnitudes;
        ReturnFromRef();
    }
    Ref mpStickTrackingPinsRef;
    if (CanSeekTo(mpStickTrackingPinsRef))
    {
        SeekToRef(mpStickTrackingPinsRef);
        InputTracker__StickTrackingPin mpStickTrackingPins;
        ReturnFromRef();
    }
    Ref mpStickComboMovesRef;
    if (CanSeekTo(mpStickComboMovesRef))
    {
        SeekToRef(mpStickComboMovesRef);
        InputTracker__StickComboMove mpStickComboMoves;
        ReturnFromRef();
    }
    short miComboResetTime;
    short miComboStaleResetTime;
    ushort miNumMags;
    ushort miNumPins;
    ushort miNumCombos;
} InputTracker;

typedef struct
{
    float aPThreshold;
    float aPDecaySec;
    float aPDecaySec_WhileAdrenaline;
    float aP_upperCap;
    float cooldownWindowSec;
    EventEnum eventAdrenalineStart;
    EventEnum eventAdrenalineEnd;
} PlayerProp__adrenaline_tune_data;

typedef struct
{
    ubyte curve[16];
} SteeringCurveType;

typedef struct
{
    float frames;
    float degrees;
    float velocityFraction;
} SteeringCurveNode;

typedef struct
{
    unsigned int listCount_CurveList;
    FSkip(4);
    Ref curveListRef;
    if (CanSeekTo(curveListRef))
    {
        SeekToRef(curveListRef);
        SteeringCurveNode curveList;
        ReturnFromRef();
    }
} SteeringCurveChain;

typedef struct
{
    SteeringCurveType interpolated;
    SteeringCurveChain procedural;
} SteeringCurveTypeUnion;

typedef struct
{
    int curveType;
    SteeringCurveTypeUnion curveEntry;
    FSkip(4);
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} SteeringCurveOption;

typedef struct
{
    unsigned int listCount_CurvesList;
    FSkip(4);
    Ref curvesListRef;
    if (CanSeekTo(curvesListRef))
    {
        SeekToRef(curvesListRef);
        SteeringCurveOption curvesList;
        ReturnFromRef();
    }
} SteeringTuneData;

typedef struct
{
    unsigned int byType;
    unsigned int byIndex;
} HostedModelRefUnion;

typedef struct
{
    unsigned int objectID;
    ushort objectLoadDep;
    FSkip(2);
    int refType;
    HostedModelRefUnion refData;
    byte useAltMaterialSet;
    FSkip(3);
    unsigned int altMaterialSetType;
} HostedModelRef;

typedef struct
{
    ushort objectLoadDep;
    FSkip(2);
    unsigned int modelSlotIndex;
} ModelSlotRefByIndex;

typedef struct
{
    unsigned int byType;
    ModelSlotRefByIndex byIndex;
} ModelSlotRefUnion;

typedef struct
{
    int refType;
    ModelSlotRefUnion refData;
} ModelSlotRef;

typedef struct
{
    float dAimAnchorOffset;
    float dAimBoom[3];
    float dAimPanHRate;
    float dAimPanVRate;
    float dAimMinPitch;
    float dAimMaxPitch;
    float dAimFov;
    float dAimFovSpeed;
    float dAimCursorXOff;
    float dAimCursorYOff;
    float dAimInterpIn;
    float dAimInterpCtrl1;
    float dAimInterpCtrl2;
    float dAimProjDistFactor;
    float dAimMinRange;
    float dAimMaxRange;
    float dAimSwingDelay;
    char dAimStick;
    ubyte dAimProjInterpIn;
    char aimPad_1;
    char aimPad_2;
    float dAimAssistInnerRadius;
    float dAimAssistOuterWidth;
    float dAimAssistOuterHeight;
    float dAimAssistTimeSlowH;
    float dAimAssistTimeSlowV;
    ubyte dHorizontalAxis[32];
    ubyte dVerticalAxis[32];
    float dAimAssistUpOffset;
    float dAimAssistDownOffset;
    float dAimAssistHorizontalOffset;
    float dAimAssistHorizontalWeight;
    float dAimAssistVerticalWeight;
    float dAimAssist3DDistanceWeight;
    float dAimAssistAutofaceRotSpeed;
    Ref dAimCameraSensitivityRef;
    if (CanSeekTo(dAimCameraSensitivityRef))
    {
        SeekToRef(dAimCameraSensitivityRef);
        float dAimCameraSensitivity;
        ReturnFromRef();
    }
    unsigned int dAimSensitivityCount;
} PlayerProp__aim_tune_data;

typedef struct
{
    ushort aimProbeGun;
    ushort aimProbeCamera;
    ushort aimFlammableProbeCamera;
    ushort aimProbeCameraOverride1;
    ushort aimProbeCameraOverride2;
    ushort aimProbeCameraOverride3;
    ushort aimProbeCameraOverride4;
    ModelBoneOrMarkerReference fireFromMarkerRef;
    FSkip(2);
    float defaultSnapTime;
} AimDataUser;

typedef struct
{
    ushort forwardProbe;
    ushort sideProbe;
    int startOffset[3];
    int startOffsetCover[3];
    float distPerProbe;
    int numProbes;
    float lrSlop;
    float probeLen;
    float minContact;
    int narrowTestHits;
    float extraCamDist;
} PlayerProp__CameraSwitchTuneData;

typedef struct
{
    unsigned int weaponProbe;
    int wpnStartOffset[3];
    unsigned int clearanceProbe;
    int clrStartOffset[3];
    float probeSlack;
    float probeSlackHysteresis;
    float probeAvoidClippingMaxMove;
    byte mirror;
    FSkip(3);
    float extraEdgeDistance;
    float attackerDistThreshold;
    float distanceCheckHysteresis;
    float distFromLeftForSwitch;
    float minLenForSwitch;
    float cornerAngle;
    short leftShoulder;
    short rightShoulder;
    float distBehindLShoulder;
    float distBehindRShoulder;
    int handOffset[3];
    float distPastCornerToStepBackCrouch;
    float distPastCornerToStepBackFromAimCrouch;
    float distBeforeCornerToStepBackCrouch;
    float distBeforeCornerToStepBackFromAimCrouch;
    float distFromCoverForStepBackCrouch;
    float distFromCoverForStepBackFromAimCrouch;
    float distPastCornerToStepBackStand;
    float distPastCornerToStepBackFromAimStand;
    float distBeforeCornerToStepBackStand;
    float distBeforeCornerToStepBackFromAimStand;
    float distFromCoverForStepBackStand;
    float distFromCoverForStepBackFromAimStand;
    float backFacingAngleToStepBack;
    float backFacingAngleToStepBackFromAim;
    float frontFacingAngleToStepBack;
    float frontFacingAngleToStepBackFromAim;
    float backCameraFacingAngleToStepBack;
    float frontCameraFacingAngleToStepBack;
    int offsetFromLCCorner[3];
    int offsetFromRCCorner[3];
    int offsetFromLSCorner[3];
    int offsetFromRSCorner[3];
    float wallLeanFacingAngle;
    int offsetFromCornerForLean[3];
    float cameraFacingThresholdForStepIntoLean;
    float cameraFacingThresholdForStepIntoLeanFacingCorner;
    float minSegLenToStepBack;
} PlayerProp__CoverTuneData;

typedef struct
{
    unsigned int probe;
    ushort reqTrait;
    ushort advTrait;
    unsigned int reqMeleeMove;
    unsigned int reqMeleeMoveHold;
} PlayerProp__DeathFromAboveTuneData;

typedef struct
{
    float maxTurnAngle;
    float velocity;
    float delaySteeringFrames;
} PlayerProp__JumpEscapeTuneData;

typedef struct
{
    float offset[3];
    float horizWeight;
    float vertWeight;
    uint useOffsetFromMaya : 1;
    int __bitfieldpadding3 : 31;
} OrientControllerWeight;

typedef struct
{
    float facingAngle;
    float blendValue1;
    float blendValue2;
    FSkip(4);
    Ref orientControllerWeightListRef;
    if (CanSeekTo(orientControllerWeightListRef))
    {
        SeekToRef(orientControllerWeightListRef);
        OrientControllerWeight orientControllerWeightList;
        ReturnFromRef();
    }
    unsigned int numOrientControllerWeights;
} OrientControllerWeightSet;

typedef struct
{
    float rampOnControllerTime;
    float rampOffControllerTime;
    float rampOnChainTime;
    float rampOffChainTime;
    unsigned int leftHandTargetMarkerIndex;
    int leftArmIKChainIndex;
    float oneHandTransitionAngle;
    uint useProceduralAim : 1;
    uint useLeftHandIK : 1;
    int __bitfieldpadding8 : 30;
    Ref weightSetListRef;
    if (CanSeekTo(weightSetListRef))
    {
        SeekToRef(weightSetListRef);
        OrientControllerWeightSet weightSetList;
        ReturnFromRef();
    }
    unsigned int numWeightSets;
} ProceduralAnimParams;

typedef struct
{
    float dOE_MaxWet;
    float dOE_MaxDirty;
    float dOE_DryOffSpeed;
    float dOE_CleanOffSpeed;
    float dOE_WashOffSpeed;
    float dOE_WetSpeed;
    float dOE_DirtySpeed;
    float dOE_SweatSpeed;
} PlayerProp__overlay_effects;

typedef struct
{
    uint unused00 : 1;
    uint unused01 : 1;
    uint unused02 : 1;
    uint unused03 : 1;
    uint unused04 : 1;
    uint unused05 : 1;
    uint unused06 : 1;
    uint unused07 : 1;
    uint unused08 : 1;
    uint unused09 : 1;
    uint unused10 : 1;
    uint unused11 : 1;
    uint unused12 : 1;
    uint dDisableMarkupAimIk : 1;
    uint dDebugLedgePlayerRelativeControls : 1;
    uint dDebugPatternFlag9 : 1;
    uint dDebugPatternFlag8 : 1;
    uint dDebugPatternFlag7 : 1;
    uint dDebugPatternFlag6 : 1;
    uint dDebugPatternFlag5 : 1;
    uint dDebugPatternFlag4 : 1;
    uint dDebugPatternFlag3 : 1;
    uint dDebugPatternFlag2 : 1;
    uint dDebugPatternFlag1 : 1;
    uint dDebugPatternFlag0 : 1;
    uint dDebugLedgeNonBraced : 1;
    uint dDebugAllowCrawl : 1;
    uint dDebugAllowIdle180 : 1;
    uint dDebugAllowRunLeaning : 1;
    uint dDebugAllowRun180 : 1;
    uint dDebugAllowRun90 : 1;
    int __bitfieldpadding0 : 1;
    char dDebugPullupSurfaceType;
} PlayerProp__debug_mechanic_tune_data;

typedef struct
{
    float electrifiedThrowAngle;
    float electrifiedThrowEnergy;
    AnimReference electrifiedAnimRef;
    AnimReference hitLightAnimRef;
    AnimReference hitMediumAnimRef;
    AnimReference hitLightSwimAnimRef;
    AnimReference hitSwimChokeAnimRef;
    AnimReference hitFireAnimRef;
    AnimReference hitPoisonAnimRef;
    AnimReference unbalanceAnimRef;
} PlayerProp__hit_reaction_tune_data;

typedef struct
{
    unsigned int defaultJumpAirSteerTuneData;
    float maxVel;
    float defaultSavingGrabDist;
    float defaultSavingGrabHorizDist;
    float defaultSavingGrabTimeInAir;
    float defaultSavingGrabFallSpeed;
    unsigned int defaultSavingGrabRandom;
    unsigned int defaultJumpDetectionTime;
    MovesetProfile_MoveTypeEnum savingGrabChanceModifier;
    float defaultReattachDist;
    short inairNumPosIterations;
    short initialNumPosInterations;
    short noPosUpdateFrameBeforeConnect;
    FSkip(2);
    float maxUpVel;
    float upDownChangeOverVel;
    float maxDownVel;
    float maxForwardVel;
    float worldGravity;
    float airFriction;
    float airFrictionSprint;
    float maxLocalVelocityForward;
    float maxLocalVelocityBackwards;
    float maxLocalVelocityLeftRight;
    float gutAttachHeight;
    float shinAttachHeight;
    float gutAttachHeightRising;
    float shinAttachHeightRising;
    float attachHysteresis;
    byte timeDilatedHysteresis;
    FSkip(3);
    float highHurdleClearance;
    float markupMagnetismMaxDist;
    float swanDiveRadius;
    ushort traitRequirementSavingGrab;
    ushort savingGrabExtraTime;
} in_air_tune_data;

typedef struct
{
    int key;
    unsigned int value;
} TargetingType;

typedef struct
{
    unsigned int listCount_MarkupDetection;
    FSkip(4);
    Ref markupDetectionMap_listRef;
    if (CanSeekTo(markupDetectionMap_listRef))
    {
        SeekToRef(markupDetectionMap_listRef);
        TargetingType markupDetectionMap_list;
        ReturnFromRef();
    }
} MarkupDetectionTable;

typedef struct
{
    byte bAllowReactionToPlayer;
    byte bAllowReactionToNpc;
    FSkip(2);
    float proximityDistanceMin;
    float proximityDistanceMax;
    float reactionDistanceMin;
    float reactionDistanceMax;
    float playerLandingReactionHeightMax;
    float playerLandingReactionDistanceRatioMin;
    float playerLandingCollisionDistanceMax;
    float playerLandingAnticipationAddedDistanceMax;
    float playerLandingPreAnticipationAddedDistanceMax;
    float awarenessDistanceMinToFriendlyNpc;
    float awarenessDistanceMaxToFriendlyNpc;
    float awarenessFieldOfViewToFriendlyNpc;
    float awarenessSpeedMaxToFriendlyNpc;
    float awarenessCooldownTimeOfFriendlyNpc;
    int awarenessRandomizerOfFriendlyNpc;
    float proximityDistanceFacingMin;
    float proximityDistanceFacingMax;
    float preProximityDistanceRatio;
    float reactionDistanceFacingMin;
    float reactionDistanceFacingMax;
    float speedForMinDistance;
    float speedForMaxDistance;
    float reactionAnticipationSpeedThreshold;
    float reactionLowSpeedThreshold;
    float reactionHighSpeedThreshold;
    byte useDistanceAndSpeedSettingsFromPlayer;
    byte bHasProximityReaction;
    byte bHasLowReaction;
    byte bHasHighReaction;
    byte bHasForcedReaction;
    FSkip(3);
    float weightThresholdToTriggerReaction;
    byte hasOpponentIndependentReaction;
    FSkip(3);
    float speedForLowLevelReaction;
    float speedForHighLevelReaction;
    float distanceForLowPushReaction;
    float distanceForHighPushReaction;
    float frontDistanceProjectionForLowPushReaction;
    float frontDistanceProjectionForHighPushReaction;
    byte triggerForcedReactionInOpponent;
    FSkip(3);
    float fieldOfView;
} CollisionReactionTune;

typedef struct
{
    ushort remainAttachedToMarkupSymbol;
    ushort remainAttachedToTreeMarkupSymbol;
    ushort remainAttachedToWallCrawlSymbol;
    ushort endInCombatAimSymbol;
    ushort endInSwimWadingSymbol;
    ushort endInSwimSurfaceSymbol;
    ushort endInSwimSubmergedSymbol;
    ushort endInCoverCrouchSymbol;
    ushort endInRappelSymbol;
    ushort endInWallConcealmentIdleSymbol;
    ushort endInWallCrawlSymbol;
    ushort endInHostedSequenceSymbol;
    ushort endInPostCombatSymbol;
} ScriptedGameplayCineNamedValues;

typedef struct
{
    ushort remainAttachedToMarkupSymbol;
    ushort remainAttachedToWallCrawlSymbol;
    ushort endInCombatAimSymbol;
    ushort endInSwimWadingSymbol;
    ushort endInRappelSymbol;
    ushort endInWallCrawlSymbol;
    ushort endInAirSymbol;
    ushort endInSlopeSymbol;
    ushort canEnterFromBasicLedgeStatesSymbol;
    ushort canEnterFromReachingLedgeStatesSymbol;
    ushort enablePhysicsProxySymbol;
} ScriptedGameplayISSNamedValues;

typedef struct
{
    unsigned int cineFXintroID;
} PlayerProp__CinematicData;

typedef struct
{
    ScriptedGameplayCineNamedValues scripteGameplayCineNamedValues;
    ScriptedGameplayISSNamedValues scripteGameplayISSNamedValues;
    PlayerProp__CinematicData cinematicData;
} PlayerProp__scripted_gameplay_tune_data;

typedef struct
{
    short dMarkUpMovementDetectXYDist;
    short dMarkUpMovementDetectZDist;
    short dMarkUpMovementDetectZOffset;
    short dMarkUpWaterDetectXYDist;
    short dMarkUpWaterDetectZDist;
    short dMarkUpWaterDetectZOffset;
    short dLedgeSafeGrabCatchMinZDist;
    short dLedgeSafeGrabCatchZDist;
    short dLedgeSafeGrabCatchXYDist;
    short dMinDistToOtherPlayers;
} PlayerProp__markup_detection_tune_data;

typedef struct
{
    char impulsePositionType;
    char impulseDirectionType;
    char impulseMagnitudeType;
    FSkip(1);
    float horizontalImpulseMed;
    float horizontalImpulseLow;
    float verticalImpulseMed;
    float verticalImpulseLow;
    float maxFollowThroughVel;
    ubyte kickFrameMed;
    ubyte kickFrameLow;
    FSkip(2);
    float medLowKickThreshold;
} PlayerProp__physics_kick_tune_data;

typedef struct
{
    float animationSpeedCap;
    float animationMultiplierMin;
    float animationMultiplierMax;
    float pushSpeed;
    float pushMomentum;
    float pushMaxForcePerKilogram;
    float pushMaxForce;
    float forwardWedgeAngle;
    float backwardWedgeAngle;
    float proxyRadius;
    float proxyMassPercentage;
    int weldJointStepIterations;
    float maxXYSpeed;
    float maxZSpeed;
    float maxForwardTiltAngle;
    float maxBackwardTiltAngle;
    float maxSidewaysTiltAngle;
    float maxAngularSpeed;
    float pullForceMagnitude;
    unsigned int pushProbe;
} PlayerProp__push_pull_tune_data;

typedef struct
{
    float maxSenseDistance;
    float maxEngageVelocity;
    float senseAngleMult;
    float senseDistMult;
    float lookAtOverrideProbeTolerance;
    float lookAtOverrideYCone;
    float lookAtOverrideZCone;
    float lookAtMaxHeadHorizontal;
    float lookAtMaxHeadVertical;
    float lookAt_ReferencePointZOffset;
    ModelBoneOrMarkerReference lookAt_ReferencePoint;
    ModelBoneOrMarkerReference lookAt_TestPoint;
} PlayerProp__physics_sense_tune_data;

typedef struct
{
    ushort eTrait;
    FSkip(2);
    float fScale;
} PlayerProp__InstinctScale;

typedef struct
{
    byte pulseEnabled;
    FSkip(3);
    float pulseOuterRadius;
    short pulseOuterTimer;
    short pulseOuterValue;
    float pulseInnerRadius;
    short pulseInnerTimer;
    short pulseInnerValue;
    float timeForAutoDisable;
    ubyte bDebugDraw : 1;
    byte __bitfieldpadding8 : 7;
    FSkip(1);
    ushort nRequired;
    FSkip(4);
    Ref aRequiredRef;
    if (CanSeekTo(aRequiredRef))
    {
        SeekToRef(aRequiredRef);
        PlayerProp__InstinctScale aRequired;
        ReturnFromRef();
    }
} PlayerProp__instinct_mode;

typedef struct
{
    float physicsJumpingWeight;
    float physicsJumpingFrames;
    float physicsLandingWeight;
    float physicsLandingFrames;
} PlayerProp__physics_jumping_landing_tune_data;

typedef struct
{
    ModelBoneOrMarkerReference attachPoint;
    float attachDistThreshold;
    Ref debugNameRef;
    if (CanSeekTo(debugNameRef))
    {
        SeekToRef(debugNameRef);
        string debugName;
        ReturnFromRef();
    }
} PlayerProp__zipline_tune_data__attachmentPointData;

typedef struct
{
    unsigned int attachmentPointDataIndex;
} PlayerProp__zipline_tune_data__attachmentPointDataRef;

typedef struct
{
    float deflectionDelay;
    float deflectionRate;
    float maxDeflection;
    float ropeShimmyOffsetCurve[45];
    float distFromEnd;
    float attachDistFromEnd;
    Ref attachmentPointsRef;
    if (CanSeekTo(attachmentPointsRef))
    {
        SeekToRef(attachmentPointsRef);
        PlayerProp__zipline_tune_data__attachmentPointData attachmentPoints;
        ReturnFromRef();
    }
    unsigned int numAttachPoints;
    PlayerProp__zipline_tune_data__attachmentPointDataRef rappelRightHandAttachmentPoint;
    PlayerProp__zipline_tune_data__attachmentPointDataRef rappelLeftHandAttachmentPoint;
    PlayerProp__zipline_tune_data__attachmentPointDataRef rappelIGCRightHandAttachmentPoint;
    PlayerProp__zipline_tune_data__attachmentPointDataRef rappelIGCLeftHandAttachmentPoint;
    char ropeRappelEndAttachmentPtIndex;
    FSkip(3);
    float ropePointMaxVel;
    float ropeInterpSnapDistance;
    float fBlockageProbeZOffset;
    float minDistanceFromPost;
    float speedToCorrectFromPost;
} PlayerProp__zipline_tune_data;

typedef struct
{
    Ref defaultIdleRef;
    if (CanSeekTo(defaultIdleRef))
    {
        SeekToRef(defaultIdleRef);
        PlayerProp__idleanim defaultIdle;
        ReturnFromRef();
    }
    float minCameraDistance;
} PlayerProp__idle_tune_data;

typedef struct
{
    float lagMeterDecayTimeSeconds;
    float lagMeterMaxDist;
    float lagMeterMaxSpeed;
    float lagForHPoleAttach;
    float lagForZipLineAttach;
    float lagForZipLineDetach;
    float lagForSlopeSlideStart;
    float lagForRopeSwing;
    float lagForRunStart;
    float runLagStartTimeSeconds;
    float lagForCombatRunStart;
    float combatRunLagStartTimeSeconds;
    float lagForEnterLOS;
    float lagMeterDecayTimeForLOSSeconds;
    float lagMeterDecayTimeForFlairChainFactorSeconds;
    unsigned int numFlairChainFactors;
    float flairChainLagFactor[8];
} PlayerProp__position_lag_tune_data;

typedef struct
{
    float animationTranslation[3];
    float lowProbeLength;
    float lowProbeHeight;
    float highProbeHeight;
    float flatSurfaceTolerance;
    ushort mantleOnTerrain : 1;
    ushort mantleOnAllGeoms : 1;
    ushort enableSteering : 1;
    short __bitfieldpadding5 : 13;
} PlayerProp__MantleStateTuneData;

typedef struct
{
    float fMaxWanderRange;
    float fMinDegPerFrame;
    float fMaxDegPerFrame;
    short iMinDirChangeFrames;
    short iMaxDirChangeFrames;
    short iMinSpeedChangeFrames;
    short iMaxSpeedChangeFrames;
    float fStableAngle;
    float fOverbalanceAngle;
    float fFiddleSensitivity;
    float fFiddleThreshold;
    float fFiddleFactor;
    float fWobbleBlendRateNearStable;
    float fWobbleBlendRateNearLimit;
    short iSafetyFrames;
    short iReactionFrames;
    short iMaxUnbalancedFrames;
    short iMinRecoveryFrames;
    short iMinAboutToFallFrames;
    ubyte bRecenterOnceRebalanced : 1;
    ubyte bAsymmetricalSafeZone : 1;
    byte __bitfieldpadding19 : 6;
} BalanceBeamParams;

typedef struct
{
    float fUnbalanceFromStick;
    float fUnbalanceFromTime;
    float fWobbleBlendAccel;
    float fWobbleBlendMaxRate;
    float fJumpOffUnbalancedAngleMin;
    float fJumpOffUnbalancedAngleMax;
    float fBlockageProbeZOffset;
    float fBlockageProbeDistance;
    ubyte bLandingUsesBalance : 1;
    ubyte bBalanceUsesXAxis : 1;
    ubyte bJumpOffWhileUnbalanced : 1;
    ubyte bUnbalanceFromVisual : 1;
    ubyte bIdleFacingPrefersBeamDir : 1;
    byte __bitfieldpadding8 : 3;
    FSkip(3);
    BalanceBeamParams hpoleData;
    FSkip(3);
    BalanceBeamParams bendyHpoleData;
    FSkip(3);
    BalanceBeamParams sprintData;
    FSkip(3);
    BalanceBeamParams idleRecoveryData;
    FSkip(1);
    ushort groundAheadProbe;
} BalanceBeamTuneData;

typedef struct
{
    float fFacingMomentum;
    float fSidewaysMomentum;
    float fJumpDirMomentum;
    float fJumpPerpMomentum;
    float fVerticalMomentum;
    short iTargetingTrailFrames;
    short iTargetingLeadFrames;
} PlayerProp__MovingPlatformTuneData;

typedef struct
{
    int miMoveType;
    int miDestMove;
    unsigned int miListCount_ActionList;
    FSkip(4);
    Ref mpActionListRef;
    if (CanSeekTo(mpActionListRef))
    {
        SeekToRef(mpActionListRef);
        unsigned int mpActionList;
        ReturnFromRef();
    }
    float mfTransFrameStart;
    float mfTransFrameEnd;
    int meMoveDir;
} GymnasticsChainMove;

typedef struct
{
    float maxHealthPercent;
    byte bEnabled;
    FSkip(3);
    unsigned int listCount_MoveList;
    FSkip(4);
    Ref moveListRef;
    if (CanSeekTo(moveListRef))
    {
        SeekToRef(moveListRef);
        GymnasticsChainMove moveList;
        ReturnFromRef();
    }
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} GymnasticsChain;

typedef struct
{
    unsigned int listCount_ChainList;
    FSkip(4);
    Ref chainListRef;
    if (CanSeekTo(chainListRef))
    {
        SeekToRef(chainListRef);
        GymnasticsChain chainList;
        ReturnFromRef();
    }
} GymnasticsTuneData;

typedef struct
{
    ushort traitToEnableInjury;
    ushort traitForInjury;
} PlayerProp__InjuryTuneData;

typedef struct
{
    float pingDuration;
    float cooldownDuration;
    float range;
} vision_mode_tune_data;

typedef struct
{
    float dolly;
    float truck[3];
    float pitch;
    float pitchOffset;
    float yaw;
    float yawOffset;
    float roll;
    float zoom;
} SimpleCamController__InitialValues;

typedef struct
{
    float dollyCoeff;
    float dollyMax;
    float dollyMin;
    float truckHorizCoeff;
    float truckHorizMax;
    float truckHorizMin;
    float truckVertCoeff;
    float truckVertMax;
    float truckVertMin;
    float pitchCoeff;
    float pitchMax;
    float pitchMin;
    float yawCoeff;
    float zoomCoeff;
    float zoomMax;
    float zoomMin;
} SimpleCamController__InputAdjustmentValues;

typedef struct
{
    byte enableDolly;
    byte enableHorizTruck;
    byte enableVertTruck;
    byte enablePitch;
    byte enableYaw;
    byte enableZoom;
} SimpleCamController__InputEnableValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float radius;
    float probeOffset;
    int lowSegment;
    int medSegment;
    int highSegment;
} SimpleCamController__CameraCollision;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} SimpleCamController__InvertInputValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float maxDist;
    float maxSpeed;
} SimpleCamController__CombatLockOn;

typedef struct
{
    int segment;
    SimpleCamController__InitialValues initializers;
    SimpleCamController__InputAdjustmentValues inputCoefficients;
    SimpleCamController__InputEnableValues enableInputs;
    SimpleCamController__CameraCollision collision;
    SimpleCamController__InvertInputValues invertControls;
    SimpleCamController__CombatLockOn combatLockOn;
} SimpleCamController;

typedef struct
{
    float truck[3];
    float dolly;
    float dollyYaw;
    float dollyPitch;
    float yaw;
    float pitch;
    float minFOV;
    float maxFOV;
    float horizontalFOVInterpStart;
    float horizontalFOVInterpEnd;
    float verticalFOVInterpStart;
    float verticalFOVInterpEnd;
    float maxHorizontalPlayerSeparation;
    float maxVerticalPlayerSeparation;
    float focusDampeningControl;
    float attractionWeight;
    float attractionMaxLength;
    float offsetDampeningControl;
} IsoCamController__InitialValues;

typedef struct
{
    int segment;
    float fOVLimit;
    IsoCamController__InitialValues initializers;
} IsoCamController;

typedef struct
{
    float focusPos[3];
    float truck[3];
    float dolly;
    float dollyYaw;
    float dollyPitch;
    float yaw;
    float pitch;
    float fov;
    float horizontalFOVInterpStart;
    float horizontalFOVInterpEnd;
    float verticalFOVInterpStart;
    float verticalFOVInterpEnd;
    float maxHorizontalPlayerSeparation;
    float maxVerticalPlayerSeparation;
    float focusDampeningControl;
} MapViewCamController__MapViewValues;

typedef struct
{
    MapViewCamController__MapViewValues mapViewValues;
} MapViewCamController;

typedef struct
{
} FreeCamController;

typedef struct
{
    float dolly;
    float truck[3];
    float pitch;
    float yaw;
    float roll;
    float zoom;
} ModelviewCamController__InitialValues;

typedef struct
{
    float dollyCoeff;
    float truckHorizCoeff;
    float truckVertCoeff;
    float pitchCoeff;
    float yawCoeff;
    float zoomCoeff;
} ModelviewCamController__InputAdjustmentValues;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} ModelviewCamController__InvertInputValues;

typedef struct
{
    int segment;
    ModelviewCamController__InitialValues initializers;
    ModelviewCamController__InputAdjustmentValues inputCoefficients;
    ModelviewCamController__InvertInputValues invertControls;
} ModelviewCamController;

typedef struct
{
    float dolly;
    float truck[2];
    float pitch;
    float yaw;
    float roll;
    float zoom;
    float focalLength;
    float targetPosDampFreq;
    float targetPosDampRatio;
    byte useInitialPos;
    byte useInitialRot;
    byte useWorldRelative;
    byte trackSelf;
    byte useInitialCamPos;
    byte useCumulativeRot;
} AnchoredCamController__InitialValues;

typedef struct
{
    float dollyCoeff;
    float dollyMax;
    float dollyMin;
    float truckHorizCoeff;
    float truckHorizMax;
    float truckHorizMin;
    float truckVertCoeff;
    float truckVertMax;
    float truckVertMin;
    float pitchCoeff;
    float pitchMax;
    float pitchMin;
    float yawCoeff;
    byte limitYaw;
    byte limitTilt;
    FSkip(2);
    float yawMin;
    float yawMax;
    float zoomCoeff;
    float zoomMax;
    float zoomMin;
} AnchoredCamController__InputAdjustmentValues;

typedef struct
{
    byte enableDolly;
    byte enableHorizTruck;
    byte enableVertTruck;
    byte enablePitch;
    byte enableYaw;
    byte enableZoom;
} AnchoredCamController__InputEnableValues;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} AnchoredCamController__InvertInputValues;

typedef struct
{
    byte enabled;
    byte useSpring;
    FSkip(2);
    float delay;
    float time;
    int easeType;
    float maxVel;
    float damp;
    float freq;
    float mass;
} AnchoredCamController__ReturnToCenter;

typedef struct
{
    int settingType;
    float filmApertureX;
    float filmApertureY;
} CameraViewAngleSetting;

typedef struct
{
    int segment;
    AnchoredCamController__InitialValues initializers;
    FSkip(2);
    AnchoredCamController__InputAdjustmentValues inputCoefficients;
    AnchoredCamController__InputEnableValues enableInputs;
    AnchoredCamController__InvertInputValues invertControls;
    AnchoredCamController__ReturnToCenter returnToCenter;
    CameraViewAngleSetting viewAngleSetting;
} AnchoredCamController;

typedef struct
{
    float max;
    float min;
    float inputCoeff;
    float restitution;
    byte enableInput;
    byte invertInput;
    byte useRelLimits;
} InputConfig;

typedef struct
{
    float leftLimit;
    float rightLimit;
    float ratio;
} SplineCamController__LateralOffset;

typedef struct
{
    byte enabled;
    byte useSpring;
    FSkip(2);
    float delay;
    float time;
    int easeType;
    float maxVel;
    float damp;
    float freq;
    float mass;
} ReturnToCenter;

typedef struct
{
    InputConfig panConfig;
    FSkip(1);
    InputConfig tiltConfig;
    FSkip(1);
    CameraViewAngleSetting viewAngleSetting;
    float focusOffset[3];
    float dolly;
    float pan;
    float tilt;
    float roll;
    float zoom;
    float focalLength;
    float orientationInterpRate;
    int segmentID;
    float rodDist;
    float dampening;
    float frequency;
    float mass;
    byte enableFollowPosdampening;
    FSkip(3);
    float collisionRadius;
    byte lookAtPlayer;
    byte useLateralDistance;
    FSkip(2);
    SplineCamController__LateralOffset lateralOffset;
    byte useScootBack;
    FSkip(3);
    float scootBackDist;
    float scootBackTime;
    float scootBackWaitTime;
    ReturnToCenter returnToCenter;
} SplineCamController;

typedef struct
{
    float dolly;
    float truck[3];
    float pitch;
    float pitchOffset;
    float yaw;
    float yawOffset;
    float roll;
    float zoom;
} HmdCamController__InitialValues;

typedef struct
{
    float dollyCoeff;
    float dollyMax;
    float dollyMin;
    float truckHorizCoeff;
    float truckHorizMax;
    float truckHorizMin;
    float truckVertCoeff;
    float truckVertMax;
    float truckVertMin;
    float pitchCoeff;
    float pitchMax;
    float pitchMin;
    float yawCoeff;
    float zoomCoeff;
    float zoomMax;
    float zoomMin;
} HmdCamController__InputAdjustmentValues;

typedef struct
{
    byte enableDolly;
    byte enableHorizTruck;
    byte enableVertTruck;
    byte enablePitch;
    byte enableYaw;
    byte enableZoom;
} HmdCamController__InputEnableValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float radius;
    float probeOffset;
    int lowSegment;
    int medSegment;
    int highSegment;
} HmdCamController__CameraCollision;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} HmdCamController__InvertInputValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float maxDist;
    float maxSpeed;
} HmdCamController__CombatLockOn;

typedef struct
{
    int segment;
    HmdCamController__InitialValues initializers;
    HmdCamController__InputAdjustmentValues inputCoefficients;
    HmdCamController__InputEnableValues enableInputs;
    HmdCamController__CameraCollision collision;
    HmdCamController__InvertInputValues invertControls;
    HmdCamController__CombatLockOn combatLockOn;
} HmdCamController;

typedef struct
{
} ForceCamController;

typedef struct
{
    ModelBoneOrMarkerReference segment;
    float zoom;
    byte useZoomFromCameraJointScale;
    FSkip(3);
    float axis[3];
    float angle;
    byte doCutDetection;
    FSkip(3);
    float cutAngleThreshold;
    float cutDistThreshold;
    byte enableInputModifiers;
    FSkip(3);
    InputConfig tiltConfig;
    ReturnToCenter returnToCenter;
} CameraBoneCamController;

typedef struct
{
    float pitch;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
    float focalLength;
} ExplorationCamController__ValueSet;

typedef struct
{
    float dolly;
    float truck[3];
    float zoom;
    float focalLength;
} ExplorationCamController__ModifiedCrouchValueSet;

typedef struct
{
    float dolly;
    float truck[3];
    float roll;
} ExplorationCamController__ModifiedTreePitonValueSet;

typedef struct
{
    float defaultPitch;
    float defaultYaw;
    byte defaultToBestCoverTarget;
    FSkip(3);
    ExplorationCamController__ValueSet high;
    ExplorationCamController__ValueSet mid;
    ExplorationCamController__ValueSet low;
    byte useCrouch3ptModifiers;
    FSkip(3);
    float crouch3ptModifierInterpTimeIn;
    float crouch3ptModifierInterpTimeOut;
    ExplorationCamController__ModifiedCrouchValueSet crouchHigh;
    ExplorationCamController__ModifiedCrouchValueSet crouchMid;
    ExplorationCamController__ModifiedCrouchValueSet crouchLow;
    ExplorationCamController__ModifiedCrouchValueSet camouflageCrouchHigh;
    ExplorationCamController__ModifiedCrouchValueSet camouflageCrouchMid;
    ExplorationCamController__ModifiedCrouchValueSet camouflageCrouchLow;
    ExplorationCamController__ModifiedCrouchValueSet concealedCrouchHigh;
    ExplorationCamController__ModifiedCrouchValueSet concealedCrouchMid;
    ExplorationCamController__ModifiedCrouchValueSet concealedCrouchLow;
    byte useTreePiton3ptModifiers;
    FSkip(3);
    ExplorationCamController__ModifiedTreePitonValueSet treePitonHigh;
    ExplorationCamController__ModifiedTreePitonValueSet treePitonMid;
    ExplorationCamController__ModifiedTreePitonValueSet treePitonLow;
    ubyte treePiton3PtModWeightCurve[16];
    byte useStandingConcealment3ptModifiers;
    FSkip(3);
    ExplorationCamController__ModifiedTreePitonValueSet standingConcealmentHigh;
    ExplorationCamController__ModifiedTreePitonValueSet standingConcealmentMid;
    ExplorationCamController__ModifiedTreePitonValueSet standingConcealmentLow;
    ubyte standingConcealment3PtModWeightCurve[16];
    float standCovTruckOffset;
    float standCovYawToBeginOffset;
    float standCovYawToMaxOffset;
    float standCovTruckOffsetDampFreq;
    float standCovTruckOffsetDampRatio;
    ubyte blendCurve_3ptInterp_HighToMid[8];
    ubyte blendCurve_3ptInterp_MidToLow[8];
} ExplorationCamController__InitialValues;

typedef struct
{
    byte enable;
    byte enableAvoidance;
    FSkip(2);
    float minSpeed;
    float minDistance;
    float forTolerance;
    float bakTolerance;
    float maxVelocity;
    float velocityScalar;
    float sideVelocityScalar;
    byte enableFollowYaw3DTracking;
    FSkip(3);
    float delayBeforeFollow;
    float inMaxVelocity;
    float inDampening;
    float outMaxVelocity;
    float outDampening;
    float maxVelAngle;
    byte pitchEnable;
    byte dontPitchUpInAir;
    byte followAvoidRisingWater;
    FSkip(1);
    float pitchMaxVelocity;
    float pitchVelScalar;
    byte usePitchSpecificMinSpeed;
    FSkip(3);
    float pitchSpecificMinSpeed;
    byte useYawSpecificMinSpeed;
    FSkip(3);
    float yawSpecificMinSpeed;
} ExplorationCamController__FollowCamValues;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float dollyStick;
    float truck[2];
    float tilt;
    float pan;
    float roll;
    float zoom;
    float focalLength;
} ExplorationCamController__InputMultipliers;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
    float focalLength;
} ExplorationCamController__MinimumValues;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
    float focalLength;
} ExplorationCamController__MaximumValues;

typedef struct
{
    byte doAltMaxPitchInLowCeiling;
    FSkip(3);
    float maxPitchInLowCeiling;
    float lowCeilingPitchDampInFreq;
    float lowCeilingPitchDampInRatio;
    float lowCeilingPitchDampOutFreq;
    float lowCeilingPitchDampOutRatio;
    int lowCeilingProbeInstanceSegment;
    byte lowCeilingProbeUseInstanceSegmentOffset;
    FSkip(3);
    float lowCeilingProbeInstanceSegmentOffset[3];
    short lowCeilingProbeInstanceSegmentOffsetOrientation;
    FSkip(2);
    float lowCeilingProbeVector[3];
    byte lowCeilingProbeDebugDraw;
} ExplorationCamController__AltMaxPitchInLowCeilingParams;

typedef struct
{
    byte doCameraSwitchAtLimits;
    FSkip(3);
    float triggerTime;
    float triggerMinInputStick;
    float triggerRangePitchMin;
    float triggerRangePitchMax;
    float transitionAngVelMin;
    float transitionAngVelMax;
    float transitionVelMin;
    float transitionVelMax;
    unsigned int cameraComponentID;
} ExplorationCamController__CameraSwitchAtLimitsParams;

typedef struct
{
    ExplorationCamController__InputMultipliers modifiers;
    ExplorationCamController__MinimumValues minValues;
    ExplorationCamController__MaximumValues maxValues;
    ubyte blendWeightDampening[16];
    ubyte nearYawLimitDampening[16];
    unsigned int pitchStickResponseIndex;
    float pitchDampening;
    float pitchStickDiagScale;
    unsigned int yawStickResponseIndex;
    float yawDampening;
    float yawStickDiagScale;
    byte yawLimitsDisable;
    byte yawRelativeToFacing;
    byte yawLimitOnlyOnSync;
    ExplorationCamController__AltMaxPitchInLowCeilingParams lowCeilingParams;
    ExplorationCamController__CameraSwitchAtLimitsParams cameraSwitchAtLimitsParams;
} ExplorationCamController__InputAdjustmentValues;

typedef struct
{
    byte enableDolly : 1;
    byte enableHorizTruck : 1;
    byte enableVertTruck : 1;
    byte enablePitch : 1;
    byte enableYaw : 1;
    byte enableZoom : 1;
    byte __bitfieldpadding0 : 2;
    FSkip(3);
    unsigned int actionDollyForward;
    unsigned int actionDollyBack;
    unsigned int actionDollyStick;
    unsigned int actionHorizTruck;
    unsigned int actionVertTruck;
    unsigned int actionPitch;
    unsigned int actionYaw;
    unsigned int actionZoomIn;
    unsigned int actionZoomOut;
} ExplorationCamController__InputEnableValues;

typedef struct
{
    byte enable;
    byte disableFocusCollision;
    byte enableWaterVolumeCollision;
    byte enableCollisionPrediction;
    byte enableKeepLowestDollyWhenInputAfterCollision;
    FSkip(3);
    float radius;
    float probeOffset;
    float probeOffsetFromCamPos;
    short lowSegment;
    short medSegment;
    short highSegment;
    byte enableSegmentAvoidanceZOffset;
    FSkip(1);
    short aboveHeadSeg;
    short aboveHeadSegmentOffset;
    short aboveHeadCloseCollideStart;
    short aboveHeadCloseCollideMax;
    byte doHandHearHeadCheck;
    FSkip(1);
    short handNearHeadSeg;
    short handNearHeadSegmentOffset;
    short handNearHeadCloseCollideStart;
    short handNearHeadCloseCollideMax;
    byte doBowNearHeadCheck;
    FSkip(1);
    short bowNearHeadSeg;
    short bowNearHeadSegmentOffset;
    short bowNearHeadCloseCollideStart;
    short bowNearHeadCloseCollideMax;
    float orbitMaxVelocity;
    float orbitDampeningControlOut;
    float orbitDampeningControlIn;
    float orbitDampeningControlInFast;
    byte useDollyOutSettings;
    FSkip(3);
    float dollyOutSettingsBlendOutDuration;
    float dollyOutMaxVelocity;
    float dollyOutDampeningControl;
} ExplorationCamController__CameraCollision;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} ExplorationCamController__InvertInputValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float tolerance;
    float time;
} ExplorationCamController__TankCamValues;

typedef struct
{
    float minSpeed;
    float minDistance;
    float maxVelocity;
    float inMaxVelocity;
    float inDampening;
    float outMaxVelocity;
    float outDampening;
} ExplorationCamController__ClimbFollowCamParameters;

typedef struct
{
    byte enable;
    byte usePlayerPitchRelativeTargetPitch;
    FSkip(2);
    float moveUp_targetPitch;
    ExplorationCamController__ClimbFollowCamParameters moveUp_params;
    float moveDown_targetPitch;
    ExplorationCamController__ClimbFollowCamParameters moveDown_params;
    float moveLR_targetYaw;
    ExplorationCamController__ClimbFollowCamParameters moveLR_params;
    byte moveLR_Enabled;
} ExplorationCamController__ClimbFollowCamValues;

typedef struct
{
    int segment;
    byte useInstanceSegmentOffset;
    FSkip(3);
    float segmentOffset[3];
    short segmentOffsetOrientationType;
    byte overrideFollowCameraInstanceSegment;
    FSkip(1);
    int followCameraInstanceSegmentOverride;
    ExplorationCamController__InitialValues initVals;
    ExplorationCamController__FollowCamValues followCam;
    ExplorationCamController__InputAdjustmentValues limits;
    ExplorationCamController__InputEnableValues enableInputs;
    ExplorationCamController__CameraCollision collision;
    ExplorationCamController__InvertInputValues invertControls;
    FSkip(2);
    CameraViewAngleSetting viewAngleSetting;
    ExplorationCamController__TankCamValues tankCam;
    ExplorationCamController__ClimbFollowCamValues climbFollowCam;
    byte doFocusDampening;
    FSkip(2);
    float xYDampFreq;
    float xYDampRatio;
    float zDampFreq;
    float zDampRatio;
    int zLowPassDelay;
    int zLowPassCycle;
    byte useFocusAlternativeXYDampening;
    FSkip(3);
    float altXYDampeningMaxVelocity;
    float altXYDampeningControl;
    byte bYawFromFacing;
    FSkip(3);
    float fYawFromFacingInterp;
} ExplorationCamController;

typedef struct
{
    Ref traitsRequiredRef;
    if (CanSeekTo(traitsRequiredRef))
    {
        SeekToRef(traitsRequiredRef);
        PlayerTraitListIndexComparison traitsRequired;
        ReturnFromRef();
    }
    unsigned int traitsRequiredCount;
    float zoomMultiplier;
} AimCamController__InitialValues__ZoomMultiplier;

typedef struct
{
    float pitchDefault;
    float yawDefault;
    float pitchMid;
    float dollyMid;
    float truckMid[3];
    float tiltMid;
    float panMid;
    float rollMid;
    float zoomMid;
    float focalLengthMid;
    float pitchLow;
    float dollyLow;
    float truckLow[3];
    float tiltLow;
    float panLow;
    float rollLow;
    float zoomLow;
    float focalLengthLow;
    float pitchHigh;
    float dollyHigh;
    float truckHigh[3];
    float tiltHigh;
    float panHigh;
    float rollHigh;
    float zoomHigh;
    float focalLengthHigh;
    Ref zoomMultipliersRef;
    if (CanSeekTo(zoomMultipliersRef))
    {
        SeekToRef(zoomMultipliersRef);
        AimCamController__InitialValues__ZoomMultiplier zoomMultipliers;
        ReturnFromRef();
    }
    unsigned int zoomMultipliersCount;
    ubyte blendCurve_3ptInterp_HighToMid[8];
    ubyte blendCurve_3ptInterp_MidToLow[8];
} AimCamController__InitialValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float yawToleranceAngle;
    float pitchToleranceAngle;
    float minInputRate;
} AimCamController__InputMovementTolerance;

typedef struct
{
    float dollyCoeff;
    float dollyMax;
    float dollyMin;
    float truckHorizCoeff;
    float truckHorizMax;
    float truckHorizMin;
    float truckVertCoeff;
    float truckVertMax;
    float truckVertMin;
    float pitchBaseSpeed;
    float pitchMaxSpeed;
    float pitchTimeToMaxSpeed;
    float pitchInputCircleToSquareScale;
    float pitchMax;
    float pitchMin;
    float yawBaseSpeed;
    float yawMaxSpeed;
    float yawTimeToMaxSpeed;
    float yawInputCircleToSquareScale;
    byte limitYaw;
    FSkip(3);
    float yawMax;
    float yawMin;
    byte yawRelativeToFacing;
    FSkip(3);
    float zoomCoeff;
    float zoomMax;
    float zoomMin;
    ubyte yawInputCurve[32];
    ubyte yawAccCurve[32];
    ubyte yawMaxAccCurve[32];
    ubyte pitchInputCurve[32];
    ubyte pitchAccCurve[32];
    ubyte pitchMaxAccCurve[32];
    ubyte pitchNearLimitInputDampening[16];
    ubyte yawNearLimitInputDampening[16];
    float stickOff_YawDampeningFreq;
    float stickOff_YawDampeningRatio;
    float stickOff_PitchDampeningFreq;
    float stickOff_PitchDampeningRatio;
    int inputDataType;
} AimCamController__InputAdjustmentValues;

typedef struct
{
    float minRange;
    float maxRange;
    float lateralMovementModifier;
    float inputMovementModifier;
    ubyte centerednessAccelerationCurve[32];
    float timer;
} AimCamController__AimAssistValues;

typedef struct
{
    byte enableDolly;
    byte enableHorizTruck;
    byte enableVertTruck;
    byte enablePitch;
    byte enableYaw;
    byte enableZoom;
} AimCamController__InputEnableValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float radius;
    float probeOffset;
    int lowSegment;
    int medSegment;
    int highSegment;
    float collideDollyInMaxSpeed;
    float collideDollyInDampening;
    float collideDollyOutMaxSpeed;
    float collideDollyOutDampening;
    byte bUseTruckCollideScales;
    FSkip(3);
    float truckCollideScales[3];
} AimCamController__CameraCollision;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} AimCamController__InvertInputValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float maxDist;
    float maxSpeed;
} AimCamController__CombatLockOn;

typedef struct
{
    byte useBaseRotations;
    FSkip(3);
    float baseYaw;
    float basePitch;
    float baseRoll;
} AimCamController__BaseRotation;

typedef struct
{
    unsigned int defaultMode_InputAdjustIndex;
    unsigned int frictionMode_InputAdjustIndex;
    unsigned int highGearMode_InputAdjustIndex;
    ubyte blendCurve_InputAdjust[16];
} AimCamController__InputAdjustmentBlending;

typedef struct
{
    int segment;
    AimCamController__InitialValues initializers;
    AimCamController__InputMovementTolerance inputMovementTolerance;
    AimCamController__InputAdjustmentValues inputCoefficients;
    AimCamController__AimAssistValues assistModifiers;
    AimCamController__InputEnableValues enableInputs;
    AimCamController__CameraCollision collision;
    AimCamController__InvertInputValues invertControls;
    AimCamController__CombatLockOn combatLockOn;
    CameraViewAngleSetting viewAngleSetting;
    AimCamController__BaseRotation baseRotations;
    AimCamController__InputAdjustmentBlending inputAdjustBlending;
    unsigned int inputAdjustMemberListCount;
    Ref inputAdjustMemberListRef;
    if (CanSeekTo(inputAdjustMemberListRef))
    {
        SeekToRef(inputAdjustMemberListRef);
        AimCamController__InputAdjustmentValues inputAdjustMemberList;
        ReturnFromRef();
    }
} AimCamController;

typedef struct
{
    float pitch;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
} StealthCamController__ValueSet;

typedef struct
{
    float defaultPitch;
    float defaultYaw;
    float keepAimThreshold;
    StealthCamController__ValueSet high;
    StealthCamController__ValueSet mid;
    StealthCamController__ValueSet low;
    ubyte blendCurve_3ptInterp_HighToMid[8];
    ubyte blendCurve_3ptInterp_MidToLow[8];
} StealthCamController__InitialValues;

typedef struct
{
    byte enable;
    byte enableAvoidance;
    FSkip(2);
    float minSpeed;
    float minDistance;
    float forTolerance;
    float bakTolerance;
    float maxVelocity;
    float velocityScalar;
    float delayBeforeFollow;
    float inMaxVelocity;
    float inDampening;
    float outMaxVelocity;
    float outDampening;
    float maxVelAngle;
    byte pitchEnable;
    byte dontPitchUpInAir;
    FSkip(2);
    float pitchMaxVelocity;
    float pitchVelScalar;
    byte usePitchSpecificMinSpeed;
    FSkip(3);
    float pitchSpecificMinSpeed;
    byte useYawSpecificMinSpeed;
    FSkip(3);
    float yawSpecificMinSpeed;
} StealthCamController__FollowCamValues;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float truck[2];
    float tilt;
    float pan;
    float roll;
    float zoom;
} StealthCamController__InputMultipliers;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
} StealthCamController__MinimumValues;

typedef struct
{
    float pitch;
    float yaw;
    float dolly;
    float truck[3];
    float tilt;
    float pan;
    float roll;
    float zoom;
} StealthCamController__MaximumValues;

typedef struct
{
    StealthCamController__InputMultipliers modifiers;
    StealthCamController__MinimumValues minValues;
    StealthCamController__MaximumValues maxValues;
    ubyte blendWeightDampening[16];
    ubyte nearYawLimitDampening[16];
    byte yawLimitsDisable;
    byte yawRelativeToFacing;
    byte yawLimitOnlyOnSync;
} StealthCamController__InputAdjustmentValues;

typedef struct
{
    float minRange;
    float maxRange;
    float lateralMovementModifier;
    float inputMovementModifier;
    ubyte centerednessAccelerationCurve[32];
    float timer;
} StealthCamController__AimAssistValues;

typedef struct
{
    byte enableDolly : 1;
    byte enableHorizTruck : 1;
    byte enableVertTruck : 1;
    byte enablePitch : 1;
    byte enableYaw : 1;
    byte enableZoom : 1;
    byte pcUiMouseLook : 1;
    byte __bitfieldpadding0 : 1;
    FSkip(3);
    unsigned int actionDollyForward;
    unsigned int actionDollyBack;
    unsigned int actionHorizTruck;
    unsigned int actionVertTruck;
    unsigned int actionPitch;
    unsigned int actionYaw;
    unsigned int actionZoomIn;
    unsigned int actionZoomOut;
} StealthCamController__InputEnableValues;

typedef struct
{
    byte enable;
    byte disableFocusCollision;
    FSkip(2);
    float radius;
    float probeOffset;
    int lowSegment;
    int medSegment;
    int highSegment;
    int aboveHeadSeg;
    int aboveHeadSegmentOffset;
    int closeCollisionStart;
    int closeCollisionMax;
} StealthCamController__CameraCollision;

typedef struct
{
    byte invertYaw;
    byte invertPitch;
} StealthCamController__InvertInputValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float maxDist;
    float maxSpeed;
} StealthCamController__CombatLockOn;

typedef struct
{
    byte enable;
    FSkip(3);
    float tolerance;
    float idealYawOffset;
    float idealTruckOffset;
    float time;
    byte allowPlayerControl;
} StealthCamController__MeleeCamValues;

typedef struct
{
    byte enable;
    FSkip(3);
    float tolerance;
    float time;
} StealthCamController__TankCamValues;

typedef struct
{
    float minSpeed;
    float minDistance;
    float maxVelocity;
    float inMaxVelocity;
    float inDampening;
    float outMaxVelocity;
    float outDampening;
} StealthCamController__ClimbFollowCamParameters;

typedef struct
{
    byte enable;
    FSkip(3);
    float moveUp_targetPitch;
    StealthCamController__ClimbFollowCamParameters moveUp_params;
    float moveDown_targetPitch;
    StealthCamController__ClimbFollowCamParameters moveDown_params;
    float moveLR_targetYaw;
    StealthCamController__ClimbFollowCamParameters moveLR_params;
} StealthCamController__ClimbFollowCamValues;

typedef struct
{
    float yawBaseSpeed;
    float yawMaxSpeed;
    float yawTimeToMaxSpeed;
    ubyte yawInputCurve[32];
    ubyte yawAccCurve[32];
    float yawInputCircleToSquareScale;
    float pitchBaseSpeed;
    float pitchMaxSpeed;
    float pitchTimeToMaxSpeed;
    ubyte pitchInputCurve[32];
    ubyte pitchAccCurve[32];
    float pitchInputCircleToSquareScale;
    float stickOff_YawDampeningFreq;
    float stickOff_YawDampeningRatio;
    float stickOff_PitchDampeningFreq;
    float stickOff_PitchDampeningRatio;
} StealthCamController__AccelerationAdjustmentValues;

typedef struct
{
    ushort segmentObjectID;
    short segment;
    float segmentOffset[3];
    StealthCamController__InitialValues initializers;
    StealthCamController__FollowCamValues followCam;
    StealthCamController__InputAdjustmentValues limits;
    FSkip(1);
    StealthCamController__AimAssistValues assistModifiers;
    StealthCamController__InputEnableValues enableInputs;
    StealthCamController__CameraCollision collision;
    StealthCamController__InvertInputValues invertControls;
    StealthCamController__CombatLockOn combatLockOn;
    StealthCamController__MeleeCamValues meleeCam;
    StealthCamController__TankCamValues tankCam;
    StealthCamController__ClimbFollowCamValues climbFollowCam;
    byte enableFocusSmoothing : 1;
    byte __bitfieldpadding15 : 7;
    float xYDampFreq;
    float xYDampRatio;
    float zDampFreq;
    float zDampRatio;
    int zLowPassDelay;
    int zLowPassCycle;
    StealthCamController__AccelerationAdjustmentValues inputAccelerationMods;
} StealthCamController;

typedef struct
{
    SimpleCamController simpleCamController;
    IsoCamController isoCamController;
    MapViewCamController mapViewCamController;
    FreeCamController freeCamController;
    ModelviewCamController modelviewCamController;
    FSkip(2);
    AnchoredCamController anchoredCamController;
    SplineCamController splineCamController;
    HmdCamController hmdCamController;
    ForceCamController forceCamController;
    CameraBoneCamController cameraBoneCamController;
    FSkip(1);
    ExplorationCamController explorationCamController;
    AimCamController aimCamController;
    StealthCamController stealthCamController;
} CameraControllerData;

typedef struct
{
    byte collideWithCloth;
    FSkip(3);
    float firstRadiusForCloth;
    float secondRadiusForCloth;
    float distanceToPlayerRatioForCloth;
    byte collideWithVegetation;
    FSkip(3);
    float firstRadiusForTrees;
    float secondRadiusForTrees;
    float distanceToPlayerRatioForTrees;
    float heightOverCamera;
    float forceImpactRatio;
} CameraCollisionPhysics;

typedef struct
{
    byte bStartActive;
    byte bIgnorePlayerOverrides;
    byte bDelayCreateTilActivated;
    FSkip(1);
    float dilationPercent;
    int screenID;
    int inputControllerID;
    int inputControllerSource;
    byte bInputStartsEnabled;
    FSkip(3);
    int cameraType;
    unsigned int categoryHash;
    CameraControllerData cameraData;
    CameraCollisionPhysics collisionPhysics;
} Camera;

typedef struct
{
    Camera cameraController;
} CameraComponent;

typedef struct
{
    unsigned int camType;
    byte enabled;
    FSkip(3);
    unsigned int cameraID;
    float timeInFrom_NonAim;
    float timeInFrom_NormalAim;
    float timeInFrom_ZoomedAim;
    float timeInFrom_SwitchedAim;
    float timeInFrom_ZoomedSwitchedAim;
    float timeInFrom_OtherCam;
    byte forceReset;
    byte pauseOtherCamsWhenActivating;
    byte pauseSelfWhenDeactivating;
    FSkip(1);
    float movespeedMult;
    float aimReticleOffset[2];
} WeaponCameraProperties;

typedef struct
{
    Ref upgradedWeaponCameraRequirementTraitListRef;
    if (CanSeekTo(upgradedWeaponCameraRequirementTraitListRef))
    {
        SeekToRef(upgradedWeaponCameraRequirementTraitListRef);
        PlayerTraitListIndexComparison upgradedWeaponCameraRequirementTraitList;
        ReturnFromRef();
    }
    unsigned int upgradedWeaponCameraRequirementTraitListCount;
    FSkip(4);
    Ref upgradedWeaponCameraPropertyListRef;
    if (CanSeekTo(upgradedWeaponCameraPropertyListRef))
    {
        SeekToRef(upgradedWeaponCameraPropertyListRef);
        WeaponCameraProperties upgradedWeaponCameraPropertyList;
        ReturnFromRef();
    }
    unsigned int upgradedWeaponCameraPropertyListCount;
} UpgradedWeaponCamera;

typedef struct
{
    Ref weaponCameraPropertyListRef;
    if (CanSeekTo(weaponCameraPropertyListRef))
    {
        SeekToRef(weaponCameraPropertyListRef);
        WeaponCameraProperties weaponCameraPropertyList;
        ReturnFromRef();
    }
    unsigned int weaponCameraPropertyListCount;
    byte allowZoom;
    byte allowShoulderSwitch;
    byte requirePlayerTraitToZoom;
    FSkip(1);
    ushort playerTraitRequiredForZoom;
    byte canUpgradeCameraProps;
    FSkip(5);
    Ref upgradedWeaponCameraListRef;
    if (CanSeekTo(upgradedWeaponCameraListRef))
    {
        SeekToRef(upgradedWeaponCameraListRef);
        UpgradedWeaponCamera upgradedWeaponCameraList;
        ReturnFromRef();
    }
    unsigned int upgradedWeaponCameraListCount;
} WeaponCameraListItem;

typedef struct
{
    short dSlopeSlideAngleShallow;
    short dSlopeSlideAngleSteep;
    float dSlowSlopeSlideSpeedMult;
    float dSlowSlopeSlideAccelMult;
    float dSlopeSlideExitMomentumlMult;
    float strongWaterCurrentExitVelMult;
} slope_slide_tune_data;

typedef struct
{
    float probability;
    AnimReference anim;
} PlayerFaceOverlayAnimEntry;

typedef struct
{
    int moveSet;
    int moveSetEnemyAwareOverride;
    Ref animEntryListRef;
    if (CanSeekTo(animEntryListRef))
    {
        SeekToRef(animEntryListRef);
        PlayerFaceOverlayAnimEntry animEntryList;
        ReturnFromRef();
    }
    unsigned int animEntryList_Count;
} PlayerFaceOverlayEntry;

typedef struct
{
    Ref entryListRef;
    if (CanSeekTo(entryListRef))
    {
        SeekToRef(entryListRef);
        PlayerFaceOverlayEntry entryList;
        ReturnFromRef();
    }
    unsigned int entryList_Count;
} PlayerFaceOverlayData;

typedef struct
{
    unsigned int action;
    byte bUseAnalog : 1;
    byte bUseDirection : 1;
    byte bReset : 1;
    byte __bitfieldpadding1 : 5;
} NetworkInputActionList__NetworkInputActionItem;

typedef struct
{
    unsigned int actionListCount;
    NetworkInputActionList__NetworkInputActionItem network_input_action_list[1];
} NetworkInputActionList;

typedef struct
{
    Ref impliedNetworkInputActionsRef;
    if (CanSeekTo(impliedNetworkInputActionsRef))
    {
        SeekToRef(impliedNetworkInputActionsRef);
        NetworkInputActionList impliedNetworkInputActions;
        ReturnFromRef();
    }
    Ref transmittedNetworkInputActionsRef;
    if (CanSeekTo(transmittedNetworkInputActionsRef))
    {
        SeekToRef(transmittedNetworkInputActionsRef);
        NetworkInputActionList transmittedNetworkInputActions;
        ReturnFromRef();
    }
} NetworkCharacterData;

typedef struct
{
    ubyte barkActorMode;
    FSkip(7);
    Ref barksActorGroupIDsRef;
    if (CanSeekTo(barksActorGroupIDsRef))
    {
        SeekToRef(barksActorGroupIDsRef);
        unsigned int barksActorGroupIDs;
        ReturnFromRef();
    }
    unsigned int numBarksActorGroupIDs;
} BarkActorPicker;

typedef struct
{
    byte registerWithDialogueSystem;
    byte bDisableInvalidCharacterAndActorWarnings;
    FSkip(2);
    unsigned int dialogueActorID;
    byte noBarksOnlyVOLines;
    FSkip(3);
    unsigned int barkCharacterGroupID;
    BarkActorPicker barkActorPicker;
    char subtitleMode;
    FSkip(1);
    short segmentMouth;
    byte animMouthFlap_enabled;
    FSkip(3);
    float animMouthFlap_disabled_time_delay;
    float animMouthFlap_rmsScale;
    ushort animMouthFlap_namedvalue_enabled_flag;
    ushort animMouthFlap_namedvalue_flapping_magnitude;
    EventEnum animMouthFlap_enableEvent;
    EventEnum animMouthFlap_disableEvent;
} BarkComponent;

typedef struct
{
    ushort objectID;
    byte allowChildren;
} ObjectComparison;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestUnrestricted;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNumeric;

typedef struct
{
    int miProperty;
    ushort miComparison;
    short pad;
    byte miNot : 1;
    byte __bitfieldpadding3 : 7;
} SCConditionTestNumericHosted;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPhysics;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPushPull;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPortable;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPortableAnimType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPortableUsageType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestJumpMode;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInternal;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEngagement;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEngagementStatus;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEngagementObject;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInteract;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInteractRequestRequirement;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInteractEndsInstantly;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInteractMode;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInteractedType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInvestigateTargetType;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestAction;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestAnimation;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestAnimationFrames;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMovement;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestGymnasticsMove;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEdgeDropType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEdgeDropRule;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEdgeStepRule;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEdgeDeflection;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestEdgeDeflectionNumeric;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestFooting;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestStatus;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkup;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupMod;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupAngle;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupDistance;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupLookahead;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupClearance;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupAttach;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupMultiOut;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupHpoleRot;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupMovement;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupConcealmentType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestHurdleOutcome;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMarkupTargetingTag;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestGrapple;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestParaglide;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestWater;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNpc;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNpcProcess;

typedef struct
{
    unsigned int hash;
} EnumThreatMood;

typedef struct
{
    int miProperty;
    EnumThreatMood miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNpcThreatMood;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestUseObjectState;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
    FSkip(1);
    short miSource;
} SCConditionTestUseObjectReaction;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNpcFearLevel;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSpatialProbe;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSpatialProbeHitType;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestTunedata;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestCombat;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestAwareness;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestCombatNumeric;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestCover;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestCombatStatus;

typedef struct
{
    unsigned int hash;
} EnumAmmoType;

typedef struct
{
    int miProperty;
    EnumAmmoType miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestAmmo;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInventory;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestInventoryRequirement;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestWeaponLoadoutType;

typedef struct
{
    int miProperty;
    unsigned int category;
    unsigned int categoryHash;
    byte miNot : 1;
    byte __bitfieldpadding3 : 7;
} SCConditionTestCameraCategoryEnabled;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestVehicle;

typedef struct
{
    unsigned int hash;
} EnumPlayNotification;

typedef struct
{
    int miProperty;
    EnumPlayNotification miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPlayNotificationType;

typedef struct
{
    unsigned int hash;
} EnumCharacterStance;

typedef struct
{
    int miProperty;
    EnumCharacterStance miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestStance;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestDamageType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestHitReactType;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestHitShapeType;

typedef struct
{
    ushort mSymbolID;
    FSkip(2);
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding3 : 7;
} SCConditionTestNamedValueBool;

typedef struct
{
    ushort mSymbolID;
    FSkip(2);
    float miComparison;
    byte miNot : 1;
    byte __bitfieldpadding3 : 7;
} SCConditionTestNamedValueScalar;

typedef struct
{
    ushort mSymbolID;
    ushort mSymbolID2;
    byte miNot : 1;
    byte __bitfieldpadding4 : 7;
} SCConditionTestNamedVlaueSymbolComp;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestObject;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestDetection;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMultiplayer;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestGameMode;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestProcess;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestProcessNumeric;

typedef struct
{
    int miProperty;
    EventEnum miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestProcessAnimGraphTrigger;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestProcessInventory;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPrototype;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestPlayerTrait;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSeizeAttack;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMeleeMove;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestWeather;

typedef struct
{
    int miProperty;
    MovesetProfile_MoveTypeEnum miMoveEnum;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestMovesetProfile;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestStateTag;

typedef struct
{
    int miProperty;
    unsigned int hash;
    byte miNot : 1;
    byte __bitfieldpadding3 : 7;
} SCConditionTestAnimCompleteID;

typedef struct
{
    int miProperty;
    unsigned int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestCraftingRecipe;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSCPropertyBool;

typedef struct
{
    int miProperty;
    float miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSCPropertyNumeric;

typedef struct
{
    int miProperty;
    int miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestSCPropertyConditionNumeric;

typedef struct
{
    int miPlatform;
    byte miNot : 1;
    byte __bitfieldpadding1 : 7;
} SCConditionTestPlatform;

typedef struct
{
    int miVrMode;
    byte miNot : 1;
    byte __bitfieldpadding1 : 7;
} SCConditionTestVrMode;

typedef struct
{
    int miProperty;
} SCConditionTestDebug;

typedef struct
{
    int miProperty;
    float miComparison;
    byte miNot : 1;
    byte __bitfieldpadding2 : 7;
} SCConditionTestNumericScalar;

typedef struct
{
    SCConditionTestUnrestricted unknown;
    FSkip(2);
    SCConditionTestNumeric numeric;
    FSkip(2);
    SCConditionTestNumericHosted numericHosted;
    FSkip(2);
    SCConditionTestPhysics physics;
    FSkip(2);
    SCConditionTestPushPull pushPull;
    FSkip(2);
    SCConditionTestPortable portable;
    FSkip(2);
    SCConditionTestPortableAnimType portable_AnimType;
    FSkip(2);
    SCConditionTestPortableUsageType portable_UsageType;
    FSkip(2);
    SCConditionTestJumpMode jumpMode;
    FSkip(2);
    SCConditionTestInternal internal;
    FSkip(2);
    SCConditionTestEngagement engagement;
    FSkip(2);
    SCConditionTestEngagementStatus engagementStatus;
    FSkip(2);
    SCConditionTestEngagementObject engagementObject;
    FSkip(2);
    SCConditionTestInteract interact;
    FSkip(2);
    SCConditionTestInteractRequestRequirement interactSkipsRequest;
    FSkip(2);
    SCConditionTestInteractEndsInstantly interactEndsInstantly;
    FSkip(2);
    SCConditionTestInteractMode interactMode;
    FSkip(2);
    SCConditionTestInteractedType interacted_Type;
    FSkip(2);
    SCConditionTestInvestigateTargetType investigateTargetType;
    FSkip(2);
    SCConditionTestAction action;
    FSkip(2);
    SCConditionTestAnimation animation;
    FSkip(2);
    SCConditionTestAnimationFrames animationFrames;
    FSkip(2);
    SCConditionTestMovement movement;
    FSkip(2);
    SCConditionTestGymnasticsMove gymnasticsMoves;
    FSkip(2);
    SCConditionTestEdgeDropType edgeDetDropType;
    FSkip(2);
    SCConditionTestEdgeDropRule edgeDetDropRule;
    FSkip(2);
    SCConditionTestEdgeStepRule edgeDetStepRule;
    FSkip(2);
    SCConditionTestEdgeDeflection edgeDeflection;
    FSkip(2);
    SCConditionTestEdgeDeflectionNumeric edgeDeflectionNumeric;
    FSkip(2);
    SCConditionTestFooting footing;
    FSkip(2);
    SCConditionTestStatus status;
    FSkip(2);
    SCConditionTestMarkup markup;
    FSkip(2);
    SCConditionTestMarkupType markupType;
    FSkip(2);
    SCConditionTestMarkupMod markupMod;
    FSkip(2);
    SCConditionTestMarkupAngle markupAngle;
    FSkip(2);
    SCConditionTestMarkupDistance markupDistance;
    FSkip(2);
    SCConditionTestMarkupLookahead markupLookahead;
    FSkip(2);
    SCConditionTestMarkupClearance markupClearance;
    FSkip(2);
    SCConditionTestMarkupAttach markupAttach;
    FSkip(2);
    SCConditionTestMarkupMultiOut markupMultiOut;
    FSkip(2);
    SCConditionTestMarkupHpoleRot markupAngleRange;
    FSkip(2);
    SCConditionTestMarkupMovement markupMovement;
    FSkip(2);
    SCConditionTestMarkupConcealmentType markupConcealmentType;
    FSkip(2);
    SCConditionTestHurdleOutcome hurdleOutcome;
    FSkip(2);
    SCConditionTestMarkupTargetingTag markupTag;
    FSkip(2);
    SCConditionTestGrapple grapple;
    FSkip(2);
    SCConditionTestParaglide paraglide;
    FSkip(2);
    SCConditionTestWater water;
    FSkip(2);
    SCConditionTestNpc npc;
    FSkip(2);
    SCConditionTestNpcProcess npcProcess;
    FSkip(2);
    SCConditionTestNpcThreatMood npcThreatMood;
    FSkip(2);
    SCConditionTestUseObjectState useObjectState;
    FSkip(2);
    SCConditionTestUseObjectReaction useObjectReaction;
    SCConditionTestNpcFearLevel npcFearLevel;
    FSkip(2);
    SCConditionTestSpatialProbe spatialProbe;
    FSkip(2);
    SCConditionTestSpatialProbeHitType spatialProbeHitType;
    FSkip(2);
    SCConditionTestTunedata tunedata;
    FSkip(2);
    SCConditionTestCombat combat;
    FSkip(2);
    SCConditionTestAwareness awareness;
    FSkip(2);
    SCConditionTestCombatNumeric combatNumeric;
    FSkip(2);
    SCConditionTestCover cover;
    FSkip(2);
    SCConditionTestCombatStatus combatStatus;
    FSkip(2);
    SCConditionTestAmmo ammo;
    FSkip(2);
    SCConditionTestInventory inventory;
    FSkip(2);
    SCConditionTestInventoryRequirement inventoryRequirement;
    FSkip(2);
    SCConditionTestWeaponLoadoutType weapon;
    FSkip(2);
    SCConditionTestCameraCategoryEnabled cameraCategory;
    FSkip(2);
    SCConditionTestVehicle vehicle;
    FSkip(2);
    SCConditionTestPlayNotificationType playNotification;
    FSkip(2);
    SCConditionTestStance stance;
    FSkip(2);
    SCConditionTestDamageType damageType;
    FSkip(2);
    SCConditionTestHitReactType hitReactType;
    FSkip(2);
    SCConditionTestHitShapeType hitShapeType;
    SCConditionTestNamedValueBool namedValue_Boolean;
    SCConditionTestNamedValueScalar namedValue_Scalar_EQ;
    SCConditionTestNamedValueScalar namedValue_Scalar_GT;
    SCConditionTestNamedValueScalar namedValue_Scalar_GTE;
    SCConditionTestNamedVlaueSymbolComp namedValue_Symbol_Comp;
    SCConditionTestObject object;
    FSkip(2);
    SCConditionTestDetection detection;
    FSkip(2);
    SCConditionTestMultiplayer multiplayer;
    FSkip(2);
    SCConditionTestGameMode gameMode;
    FSkip(2);
    SCConditionTestProcess process;
    FSkip(2);
    SCConditionTestProcessNumeric processNumeric;
    FSkip(2);
    SCConditionTestProcessAnimGraphTrigger processAnimGraphTrigger;
    FSkip(2);
    SCConditionTestProcessInventory processInventory;
    FSkip(2);
    SCConditionTestPrototype prototype;
    FSkip(2);
    SCConditionTestPlayerTrait experience;
    FSkip(2);
    SCConditionTestSeizeAttack seizeAttack;
    FSkip(2);
    SCConditionTestMeleeMove meleeMove;
    FSkip(2);
    SCConditionTestWeather weather;
    FSkip(2);
    SCConditionTestMovesetProfile movesetProfile;
    FSkip(2);
    SCConditionTestStateTag stateTag;
    FSkip(2);
    SCConditionTestAnimCompleteID animCompleteID;
    FSkip(2);
    SCConditionTestCraftingRecipe craftingRecipe;
    FSkip(2);
    SCConditionTestSCPropertyBool sCPropertyBool;
    FSkip(2);
    SCConditionTestSCPropertyNumeric sCPropertyNumeric;
    FSkip(2);
    SCConditionTestSCPropertyConditionNumeric sCPropertyConditionNumeric;
    FSkip(2);
    SCConditionTestPlatform platform;
    FSkip(2);
    SCConditionTestVrMode vrMode;
    FSkip(2);
    SCConditionTestDebug debug;
    SCConditionTestNumericScalar numericScalar;
} SCCondTest;

typedef struct
{
    int miContext;
    SCCondTest msTest;
    byte enabled;
} SCConditionData;

typedef struct
{
    int miContext;
    SCCondTest msTest;
    byte enabled;
} SCConditionData_NamedValueOnly;

typedef struct
{
    Ref validDefenderListRef;
    if (CanSeekTo(validDefenderListRef))
    {
        SeekToRef(validDefenderListRef);
        ObjectComparison validDefenderList;
        ReturnFromRef();
    }
    unsigned int validDefenderListCount;
    FSkip(4);
    Ref stateControlConditionRequirementsListRef;
    if (CanSeekTo(stateControlConditionRequirementsListRef))
    {
        SeekToRef(stateControlConditionRequirementsListRef);
        SCConditionData stateControlConditionRequirementsList;
        ReturnFromRef();
    }
    unsigned int stateControlConditionRequirementsListCount;
    FSkip(4);
    Ref validCurrentWeaponListRef;
    if (CanSeekTo(validCurrentWeaponListRef))
    {
        SeekToRef(validCurrentWeaponListRef);
        ObjectComparison validCurrentWeaponList;
        ReturnFromRef();
    }
    unsigned int validCurrentWeaponListCount;
    FSkip(4);
    Ref validTraitListRef;
    if (CanSeekTo(validTraitListRef))
    {
        SeekToRef(validTraitListRef);
        PlayerTraitListIndexComparison validTraitList;
        ReturnFromRef();
    }
    unsigned int validTraitListCount;
    FSkip(4);
    Ref validDefenderTraitListRef;
    if (CanSeekTo(validDefenderTraitListRef))
    {
        SeekToRef(validDefenderTraitListRef);
        PlayerTraitListIndexComparison validDefenderTraitList;
        ReturnFromRef();
    }
    unsigned int validDefenderTraitListCount;
    FSkip(4);
    Ref validNamedValueListRef;
    if (CanSeekTo(validNamedValueListRef))
    {
        SeekToRef(validNamedValueListRef);
        SCConditionData_NamedValueOnly validNamedValueList;
        ReturnFromRef();
    }
    unsigned int validNamedValueListCount;
    byte checkEnemyHealth;
    byte damageWillKillTarget;
    byte bCheckDefenderOrientation;
    byte bUseAbsoluteValueOrientationAngles;
    float fOrientationRelativeToAttacker;
    float fOrientationRelativeToAttackerRange;
} MeleeMoveRequirementsStruct;

typedef struct
{
    ushort timerType;
    FSkip(2);
    int frames;
} HostedSCTimer;

typedef struct
{
    float fForce;
    float fForcePitch;
    float fForceHeadingOffset;
} BallisticEffectData;

typedef struct
{
    BallisticEffectData ballisticData;
    int hitReactSelect;
} DamageEffectUnion;

typedef struct
{
    byte damageOnStartIgnoreHealthStates;
    byte damageOnFailureIgnoreHealthStates;
    FSkip(2);
    int damageOnStart;
    byte bDamageCanNotKill_OnStart;
    FSkip(3);
    int damageAmountPerSecond;
    int damageAmount;
    int damagePrimIndex;
    int damageType;
    int damageEffect;
    DamageEffectUnion damageEffectUnion;
    int damageArmorOverride;
    EventEnum eventSuccess;
    EventEnum eventFail;
    FSkip(4);
    Ref experienceAwardListRef;
    if (CanSeekTo(experienceAwardListRef))
    {
        SeekToRef(experienceAwardListRef);
        ExperienceAward experienceAwardList;
        ReturnFromRef();
    }
    unsigned int experienceAwardCount;
} seize_damage_data;

typedef struct
{
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    float speedmult;
    float volume;
} PadshockPhiatInfo;

typedef struct
{
    float meterValidInputAddition;
    float meterValidInputAddition_easyMod;
    float meterValidInputAddition_hardMod;
    float meterValidInputAddition_survivorMod;
    float validInputDelay;
    byte bDelaySyncWithAnimationTime;
    byte bAllowStickAsValidInput;
    FSkip(2);
    float stickRegistrationSetValue;
    FSkip(4);
    Ref validDefendInputRef;
    if (CanSeekTo(validDefendInputRef))
    {
        SeekToRef(validDefendInputRef);
        INPUTACTION validDefendInput;
        ReturnFromRef();
    }
    unsigned int numValidDefendInputs;
    FSkip(4);
    Ref validDefendStickRef;
    if (CanSeekTo(validDefendStickRef))
    {
        SeekToRef(validDefendStickRef);
        INPUTACTION validDefendStick;
        ReturnFromRef();
    }
    unsigned int numValidDefendSticks;
    FSkip(4);
    PadshockPhiatInfo padshockFile;
} seize_input_data;

typedef struct
{
    float regenerationPerSecond;
    float regenerationDelay;
} seize_time_data;

typedef struct
{
    ubyte bIsRegeneration;
    FSkip(3);
    float regenerationTimeSeconds;
    float regenerationDelay;
} seize_timeex_data;

typedef struct
{
    seize_input_data input;
    seize_time_data time;
    seize_timeex_data timeExplicit;
} SeizeMechanismUnion;

typedef struct
{
    MeleeMoveRequirementsStruct meleeMoveRequirements;
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    int userAssignedID;
    FSkip(4);
    Ref hostedSCTimerListRef;
    if (CanSeekTo(hostedSCTimerListRef))
    {
        SeekToRef(hostedSCTimerListRef);
        HostedSCTimer hostedSCTimerList;
        ReturnFromRef();
    }
    unsigned int iHostedSCTimerListCount;
    byte bUseTime;
    byte bUseTimeAllowFullTime;
    FSkip(2);
    float timeMax;
    int seizeTimeResultOption;
    unsigned int animTarget;
    float fOffsetZ;
    float fInterpTime;
    byte bShowTeammateSeizeIndicator;
    FSkip(3);
    float meterStartingValue;
    float meterMax;
    float initialIgnoreInputWindowMs;
    float initialIgnoreMeterWindowMs;
    byte bIgnoreMeterEnds;
    seize_damage_data defender_seize_damage;
    FSkip(3);
    int defender_seize_mechanism_type;
    SeizeMechanismUnion defender_seize_mechanism;
    Ref defender_followup_seizeRef;
    if (CanSeekTo(defender_followup_seizeRef))
    {
        SeekToRef(defender_followup_seizeRef);
        seize_tune_data defender_followup_seize;
        ReturnFromRef();
    }
    unsigned int defender_followup_seize_count;
    seize_damage_data attacker_seize_damage;
    int attacker_seize_mechanism_type;
    SeizeMechanismUnion attacker_seize_mechanism;
    Ref attacker_followup_seizeRef;
    if (CanSeekTo(attacker_followup_seizeRef))
    {
        SeekToRef(attacker_followup_seizeRef);
        seize_tune_data attacker_followup_seize;
        ReturnFromRef();
    }
    unsigned int attacker_followup_seize_count;
    byte bIsSeizeGroup;
    byte bIsSequentialCheck;
    FSkip(2);
    void seize_group_list;
    unsigned int seize_group_listcount;
} seize_tune_data;

typedef struct
{
    ushort trait;
    FSkip(2);
    float multiplier;
} PlayerProp__CraftingTimeReductionTraits;

typedef struct
{
    ushort reqTrait;
    FSkip(2);
    int uIChosenWeapon;
} PlayerProp__WeaponFinisherRequirementsData;

typedef struct
{
    unsigned int numInventoryRequirements;
    FSkip(4);
    Ref inventoryRequirementsRef;
    if (CanSeekTo(inventoryRequirementsRef))
    {
        SeekToRef(inventoryRequirementsRef);
        int inventoryRequirements;
        ReturnFromRef();
    }
} InvRequirementsSet;

typedef struct
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReferenceWithContext;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext marker;
    float offset[3];
    byte shouldApplyPairCalculations : 1;
    byte shouldApplyFootDepthZOffset : 1;
    byte useExactSnowHeight : 1;
    byte __bitfieldpadding2 : 5;
} SnowDeformComponent__SnowDeformPositionData;

typedef struct
{
    Ref deformMarkersListRef;
    if (CanSeekTo(deformMarkersListRef))
    {
        SeekToRef(deformMarkersListRef);
        SnowDeformComponent__SnowDeformPositionData deformMarkersList;
        ReturnFromRef();
    }
    unsigned int deformMarkersListCount;
    float minFootDepth;
    float maxFootDepth;
    float footDepthScale;
    float footClosenessScale;
    float maxDepth;
} SnowDeformComponent;

typedef struct
{
    ushort tiltMatchSlopeSelfProbeA;
    ushort tiltMatchSlopeSelfProbeB;
} DoubleJointProbe__ActorData;

typedef struct
{
    DoubleJointProbe__ActorData initiaterInstance;
} DoubleJointProbe;

typedef struct
{
    ushort objectID;
} PlayerProp__ChessPieceData;

typedef struct
{
    int velType;
    float initialVel[3];
    int direction;
    float gravity;
    Ref fallHeightPtrRef;
    if (CanSeekTo(fallHeightPtrRef))
    {
        SeekToRef(fallHeightPtrRef);
        FallHeightSetItem fallHeightPtr;
        ReturnFromRef();
    }
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} JumpVelocity;

typedef struct
{
    float maxLocalSpeedForward;
    float maxLocalSpeedBackward;
    float maxLocalSpeedLeftRight;
    float fAirSteeringForwardAcceleration;
    float fAirSteeringBackwardAcceleration;
    float fAirSteeringLateralAcceleration;
    float fAirSteeringForwardDeceleration;
    float fAirSteeringBackwardDeceleration;
    float fAirSteeringLateralDeceleration;
    float maxTargetSpeedForward;
    float maxTargetSpeedBackward;
    float maxTargetSpeedLeftRight;
    float idleStickSpeedForwardBackward;
    float idleStickSpeedLeftRight;
    byte bDelayAirSteerToFirstStickPress;
    FSkip(3);
    float forcedVerticalInputThreshold;
    Ref mpDebugNameRef;
    if (CanSeekTo(mpDebugNameRef))
    {
        SeekToRef(mpDebugNameRef);
        string mpDebugName;
        ReturnFromRef();
    }
} JumpAirSteerTuneData;

typedef struct
{
    ushort parachuteObject;
    ModelBoneOrMarkerReferenceWithContext parachuteBone;
    ModelBoneOrMarkerReference attachToBone;
    byte ignorePitch;
    byte ignoreRoll;
    byte ignoreYaw;
    FSkip(1);
    ushort harnessObject;
    ModelBoneOrMarkerReferenceWithContext harnessBone;
    ModelBoneOrMarkerReference playerAttachForHarness;
    float initialFallSpeed;
    float targetFallSpeed;
    float speedDecreaseHeightMax;
    float speedDecreaseHeightMin;
    float verticalSpeedIncrease;
    float verticalSpeedDecrease;
    float defaultVerticalAcceleration;
    float fAirSteeringDownwardAcceleration;
    float fAirSteeringUpwardAcceleration;
    float fPIDIntegralConstant;
    float fPIDDerivativeConstant;
    byte pidControl;
    FSkip(3);
    float targetForwardSpeed;
    float minStartFallSpeed;
    float maxStartFallSpeed;
    float minStabilizeTime;
    float maxStabilizeTime;
    float maxStickBackDetectionThreshold;
    float stickSensibilityToBreak;
    FSkip(4);
    Ref curveTargetSpeedMinRef;
    if (CanSeekTo(curveTargetSpeedMinRef))
    {
        SeekToRef(curveTargetSpeedMinRef);
        DefaultDATCurveWithLimits curveTargetSpeedMin;
        ReturnFromRef();
    }
    Ref curveTargetSpeedMaxRef;
    if (CanSeekTo(curveTargetSpeedMaxRef))
    {
        SeekToRef(curveTargetSpeedMaxRef);
        DefaultDATCurveWithLimits curveTargetSpeedMax;
        ReturnFromRef();
    }
    Ref curveSpeedUpRef;
    if (CanSeekTo(curveSpeedUpRef))
    {
        SeekToRef(curveSpeedUpRef);
        DefaultDATCurveWithLimits curveSpeedUp;
        ReturnFromRef();
    }
    Ref curveForwardSpeedMultiplicatorRef;
    if (CanSeekTo(curveForwardSpeedMultiplicatorRef))
    {
        SeekToRef(curveForwardSpeedMultiplicatorRef);
        DefaultDATCurveWithLimits curveForwardSpeedMultiplicator;
        ReturnFromRef();
    }
    ushort forwardMiddleProbe;
    ushort forwardLeftProbe;
    ushort forwardRightProbe;
    ushort downwardProbe;
    float minCollisionForwardSpeed;
    float minCollisionDistanceLateral;
    float minCollisionDistanceMiddle;
    float middleCollisionRepulsiveForce;
    float lateralCollisionRepulsiveForce;
    float rightCollisionRepulsiveForceDir[3];
    byte lateralCollisionRequireMidCollision;
    FSkip(7);
    Ref curveCollisionSpeedToDamageRef;
    if (CanSeekTo(curveCollisionSpeedToDamageRef))
    {
        SeekToRef(curveCollisionSpeedToDamageRef);
        DefaultDATCurveWithLimits curveCollisionSpeedToDamage;
        ReturnFromRef();
    }
} ParaglideTuneData;

typedef struct
{
    PlayerProp__data data_item;
    int playerVersion;
    PlayerProp__general_attributes general;
    PlayerProp__event_broadcast_attributes eventBroadcastAttributes;
    Ref healthComponent_listRef;
    if (CanSeekTo(healthComponent_listRef))
    {
        SeekToRef(healthComponent_listRef);
        HealthComponent healthComponent_list;
        ReturnFromRef();
    }
    CharacterClassComponent characterClassTuneData;
    health_tune_data healthTuneData;
    PlayerProp__sound_tune_data soundTuneData;
    PlayerProp__multiplayer_sound multiplayerSoundData;
    FSkip(1);
    PlayerProp__swim_tune_data swimTuneData;
    bone_tune_data boneTuneData;
    FSkip(1);
    PlayerProp__tune_data tuneData;
    FSkip(2);
    ConditionStatus mConditionStatus;
    PlayerProp__combat_tune_data combatTuneData;
    PlayerProp__reticle_tune_data combatReticle;
    FSkip(6);
    PlayerProp__sense_system senseSystemTuneData;
    ground_move_tune_data groundMoveTuneData;
    LimbLockSet mLimbLockSet;
    FSkip(4);
    Ref mLimbLockSetsListRef;
    if (CanSeekTo(mLimbLockSetsListRef))
    {
        SeekToRef(mLimbLockSetsListRef);
        LimbLockGroup mLimbLockSetsList;
        ReturnFromRef();
    }
    unsigned int miNumLimbLockSets;
    EdgeDeflectionData edgeDeflection;
    PlayerProp__controls_data controls_data_item;
    PlayerProp__rope_tune_data rope;
    ledge_tune_data ledge;
    FSkip(2);
    wall_hug_tune_data wallHug;
    hpole_tune_data hPole;
    ladder_tune_data ladder;
    wallvertpole_tune_data wallVPole;
    FSkip(2);
    vertpole_tune_data vPole;
    pillar_tune_data pillar;
    FSkip(2);
    pipehorizontal_tune_data pipeHorizontal;
    pipevertical_tune_data pipeVertical;
    pushpull_tune_data pushpullTuneData;
    perch_tune_data perch;
    wall_jump_tune_data wallJump;
    FSkip(1);
    grapple_tune_data grappleTuneData;
    WallCrawlTuneData wallCrawl;
    FSkip(2);
    WallConcealmentTuneData wallConcealment;
    TreeClimbTuneData treeClimb;
    PlayerProp__tr9_prototype_melee_tune_data tR9ProtoMeleeTuneData;
    PlayerProp__prototypeTuneData prototype;
    InputTracker inputTrackerData;
    FSkip(2);
    PlayerProp__adrenaline_tune_data adrenalineData;
    SteeringTuneData steeringData;
    byte useDefaultCostume;
    FSkip(3);
    HostedModelRef defaultHostedModelRef;
    ModelSlotRef defaultModelSlotRef;
    PlayerProp__aim_tune_data aimTuneData;
    AimDataUser aimData;
    PlayerProp__CameraSwitchTuneData cameraSwitchTuneData;
    PlayerProp__CoverTuneData coverTuneData;
    PlayerProp__DeathFromAboveTuneData deathFromAboveTuneData;
    PlayerProp__JumpEscapeTuneData jumpEscapeTuneData;
    ProceduralAnimParams accAimProcAnimParams;
    PlayerProp__overlay_effects overlayEffects;
    PlayerProp__debug_mechanic_tune_data debugData;
    FSkip(3);
    PlayerProp__hit_reaction_tune_data hitReactionTuneData;
    in_air_tune_data inAirTuneData;
    MarkupDetectionTable markupDetectionMap;
    CollisionReactionTune collisionReactionTuneData;
    PlayerProp__scripted_gameplay_tune_data scriptedGameplayTuneData;
    PlayerProp__markup_detection_tune_data markupDetectionTuneData;
    PlayerProp__physics_kick_tune_data physicsKickTuneData;
    PlayerProp__push_pull_tune_data pushPullTuneData;
    PlayerProp__physics_sense_tune_data physicsSenseTuneData;
    PlayerProp__instinct_mode instinctMode;
    PlayerProp__physics_jumping_landing_tune_data physicsJumpingLandingTuneData;
    PlayerProp__zipline_tune_data zipLineTuneData;
    PlayerProp__zipline_tune_data bendyHpoleTuneData;
    PlayerProp__idle_tune_data idleTuneData;
    PlayerProp__position_lag_tune_data positionLagTuneData;
    PlayerProp__MantleStateTuneData mantleStateTuneData;
    BalanceBeamTuneData balanceBeamTuneDataItem;
    PlayerProp__MovingPlatformTuneData movingPlatformTuneData;
    GymnasticsTuneData gymnasticsTuneDataItem;
    PlayerProp__InjuryTuneData injuryTuneDataItem;
    vision_mode_tune_data visionMode;
    CameraComponent camera_tune_data;
    FSkip(4);
    WeaponCameraListItem fallbackWeaponCameraListItem;
    MovesetProfile_MoveTypeEnum modifiableMoveType_cameraControl;
    MovesetProfile_MoveTypeEnum modifiableMoveType_speedLimit;
    MovesetProfile_MoveTypeEnum modifiableMoveType_speedScale;
    MovesetProfile_MoveTypeEnum modifiableMoveType_turnrateScale;
    MovesetProfile_MoveTypeEnum modifiableMoveType_weaponSelect;
    slope_slide_tune_data slopeSlideTuneData;
    PlayerFaceOverlayData faceOverlayData;
    FSkip(4);
    NetworkCharacterData network;
    BarkComponent barkComponent;
    Ref seizeAttackListRef;
    if (CanSeekTo(seizeAttackListRef))
    {
        SeekToRef(seizeAttackListRef);
        seize_tune_data seizeAttackList;
        ReturnFromRef();
    }
    ushort traitForFireArrow;
    ushort traitForExplosiveArrow;
    ushort traitForFinisher;
    ushort traitForVisibleHearts;
    ushort traitForActiveAttach;
    ushort traitForActiveAttachWallCrawl;
    ushort traitForIncreasedSwimSpeed;
    FSkip(2);
    float swimMaxSpeedMultiplierWithTrait;
    ushort traitAllowingMovingWithSIWhileHidden;
    ushort traitRequiredToMultiplySIAndNonSIRadius;
    float globalHighlightedDistanceMultiplier;
    float globalProximityDistanceMultiplier;
    Ref craftingTimeMultipliersRef;
    if (CanSeekTo(craftingTimeMultipliersRef))
    {
        SeekToRef(craftingTimeMultipliersRef);
        PlayerProp__CraftingTimeReductionTraits craftingTimeMultipliers;
        ReturnFromRef();
    }
    unsigned int numCraftingTimeMultipliers;
    FSkip(4);
    Ref weaponFinisherRequirements_ListRef;
    if (CanSeekTo(weaponFinisherRequirements_ListRef))
    {
        SeekToRef(weaponFinisherRequirements_ListRef);
        PlayerProp__WeaponFinisherRequirementsData weaponFinisherRequirements_List;
        ReturnFromRef();
    }
    unsigned int weaponFinisherRequirements_ListCount;
    unsigned int seizeAttack_listCount;
    Ref inventoryResourceSetsRef;
    if (CanSeekTo(inventoryResourceSetsRef))
    {
        SeekToRef(inventoryResourceSetsRef);
        InvRequirementsSet inventoryResourceSets;
        ReturnFromRef();
    }
    unsigned int numInventoryResourceSets;
    FSkip(4);
    SnowDeformComponent snowDeformComponent;
    Ref controlModesRef;
    if (CanSeekTo(controlModesRef))
    {
        SeekToRef(controlModesRef);
        ControlMode controlModes;
        ReturnFromRef();
    }
    Ref senseUnitsRef;
    if (CanSeekTo(senseUnitsRef))
    {
        SeekToRef(senseUnitsRef);
        SenseUnit senseUnits;
        ReturnFromRef();
    }
    Ref doubleJointProbe_listRef;
    if (CanSeekTo(doubleJointProbe_listRef))
    {
        SeekToRef(doubleJointProbe_listRef);
        DoubleJointProbe doubleJointProbe_list;
        ReturnFromRef();
    }
    unsigned int doubleJointProbe_listCount;
    PlayerProp__ChessPieceData chessPieceData;
    FSkip(2);
    Ref jumpVelocity_listRef;
    if (CanSeekTo(jumpVelocity_listRef))
    {
        SeekToRef(jumpVelocity_listRef);
        JumpVelocity jumpVelocity_list;
        ReturnFromRef();
    }
    Ref jumpAirSteerTuneData_listRef;
    if (CanSeekTo(jumpAirSteerTuneData_listRef))
    {
        SeekToRef(jumpAirSteerTuneData_listRef);
        JumpAirSteerTuneData jumpAirSteerTuneData_list;
        ReturnFromRef();
    }
    Ref paraglideTuneData_listRef;
    if (CanSeekTo(paraglideTuneData_listRef))
    {
        SeekToRef(paraglideTuneData_listRef);
        ParaglideTuneData paraglideTuneData_list;
        ReturnFromRef();
    }
    Ref deathFromAboveJumpVelocityRef;
    if (CanSeekTo(deathFromAboveJumpVelocityRef))
    {
        SeekToRef(deathFromAboveJumpVelocityRef);
        JumpVelocity deathFromAboveJumpVelocity;
        ReturnFromRef();
    }
    unsigned int mpReviveInteractProfile;
    PlayerProp__idleanim idleanim_list[1];
} PlayerProp;

typedef struct
{
    PlayerProp prop;
} PlayerComponent;

RefDefinitions refDefinitions;
PlayerComponent root <open=true>;